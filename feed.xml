<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-07-25T20:30:26+09:00</updated><id>http://localhost:4000/</id><title type="html">めもちょー</title><subtitle>Mirror of http://retrage01.hateblo.jp/ Blog post in Japanese by @retrage01</subtitle><entry><title type="html">LKL.js: Running Linux Kernel on JavaScript *Directly*</title><link href="http://localhost:4000/2018/07/25/lkl-js-en.html" rel="alternate" type="text/html" title="LKL.js: Running Linux Kernel on JavaScript *Directly*" /><published>2018-07-25T20:29:00+09:00</published><updated>2018-07-25T20:29:00+09:00</updated><id>http://localhost:4000/2018/07/25/lkl-js-en</id><content type="html" xml:base="http://localhost:4000/2018/07/25/lkl-js-en.html">&lt;p&gt;I ported Linux kernel directly on JavaScript.
In other words, I translated the Linux kernel to JavaScript using Emscripten,
and Unlike JSLinux, it runs without emulators.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-js-architecture.png&quot; alt=&quot;LKL.js Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following is the working repository.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/retrage/linux/tree/retrage/em-v2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I published a demonstration site for LKL.js.
Please enable SharedArrayBuffer and try it out&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://retrage.github.io/lkl-js&quot;&gt;LKL.js Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also published slides about LKL.js.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://speakerdeck.com/retrage/lkl-dot-js-running-linux-kernel-on-javascript-star-directly-star&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux-kernel-library-lkl&quot;&gt;Linux Kernel Library (LKL)&lt;/h2&gt;

&lt;p&gt;We use Linux Kernel Library (LKL) which makes the Linux kernel an anykernel.
LKL is a fork of torvalds/linux.
It is designed to put LKL specific code only in
&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl&lt;/code&gt; and runs without modifications of other code.
By this design, it makes easy to follow the mainline. (Currently v4.16)
Since LKL is anykernel, it runs on user space of
various OS such as Linux, FreeBSD, and Windows etc.&lt;/p&gt;

&lt;h2 id=&quot;emscripten&quot;&gt;Emscripten&lt;/h2&gt;

&lt;p&gt;Emscripten is LLVM based C/C++ to 
JavaScript/WebAssembly transpiler.
It also provides a Unix-like environment to run translated software
on web browsers.&lt;/p&gt;

&lt;h2 id=&quot;can-we-port-lkl-to-javascript-with-emscripten&quot;&gt;Can we port LKL to JavaScript with Emscripten?&lt;/h2&gt;

&lt;p&gt;LKL runs on various OSes, Emscripten provides Unix-like
environment. So can LKL be ported to JavaScript with Emscripten?&lt;/p&gt;

&lt;h3 id=&quot;current-status-of-linux-kernel-build-with-clang&quot;&gt;Current Status of Linux Kernel Build with Clang&lt;/h3&gt;

&lt;p&gt;First of all, the Linux kernel is deeply dependent on 
gcc-extension, and there is a doubt that Clang can not compile it.
Once upon the time, there was LLVMLinux project that aims to compile
Linux kernel with Clang.
However, through the efforts of the Google Android team, two LTS (4.4 and 4.9)
can be built with Clang.
Now, LKL can be built with Clang.&lt;/p&gt;

&lt;h3 id=&quot;lkl-build-flow-101&quot;&gt;LKL Build Flow 101&lt;/h3&gt;

&lt;p&gt;Let’s look at the build flow of LKL.
First, when&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; tools/lkl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is performed, the build system determines which source code (*.c/*.S)
to be built from the Kconfig settings and compiles them.
Object files (*.o) generated by compiling are once archived by &lt;code class=&quot;highlighter-rouge&quot;&gt;ar&lt;/code&gt;
to &lt;code class=&quot;highlighter-rouge&quot;&gt;built-in.o&lt;/code&gt;.
Next, it links all &lt;code class=&quot;highlighter-rouge&quot;&gt;built-in.o&lt;/code&gt; files into &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt; at once.
For host side code, files under &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/lib&lt;/code&gt; compiled and linked
to &lt;code class=&quot;highlighter-rouge&quot;&gt;liblkl.o&lt;/code&gt;.
Finally, link all files (&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;liblkl.o&lt;/code&gt;) to &lt;code class=&quot;highlighter-rouge&quot;&gt;liblkl.so&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a simple build flow of LKL.&lt;/p&gt;

&lt;h2 id=&quot;porting-lkl-with-emscripten&quot;&gt;Porting LKL with Emscripten&lt;/h2&gt;

&lt;p&gt;Next, we will take a look at how to port LKL with Emscripten.&lt;/p&gt;

&lt;p&gt;Not limited to Emscripten, when using LLVM infrastructures,
the compiler compiles source to target with the following flow.&lt;/p&gt;

&lt;p&gt;Soruce -&amp;gt; LLVM IR -&amp;gt; Target&lt;/p&gt;

&lt;p&gt;In this way, the source is once converted to LLVM IR (*.bc/*.ll)
and then converted to the target.
In Emscripten, the “linking” is the conversion from LLVM IR to JavaScript.
Therefore, it is necessary to first convert all
(including libc etc. provided by Emscripten) to LLVM IR.&lt;/p&gt;

&lt;h3 id=&quot;generating-vmlinuxbc&quot;&gt;Generating vmlinux.bc&lt;/h3&gt;

&lt;p&gt;The build using &lt;code class=&quot;highlighter-rouge&quot;&gt;emcc&lt;/code&gt; (An Emscripten Clang wrapper) is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; tools/lkl &lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;AR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/ar.py&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The two important things here are &lt;code class=&quot;highlighter-rouge&quot;&gt;$FCFLAS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;.
I will explain each one.
(Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;C=&quot;$CC $CFLAGS&quot;&lt;/code&gt; is forced to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;$CFLAGS&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$CFLAGS&lt;/code&gt; is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s WASM=0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s ASYNCIFY=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s EMULATE_FUNCTION_POINTER_CASTS=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s USE_PTHREADS=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s PTHREAD_POOL_SIZE=4&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s TOTAL_MEMORY=1342177280&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The options are to pass to Emscripten.
Please refer to the Emscripten manual for details.&lt;/p&gt;

&lt;p&gt;Furthermore, the following definitions are specified.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DMAX_NR_ZONES=2&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DNR_PAGEFLAGS=20&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DSPINLOCK_SIZE=0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_GETLK64=12&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_SETLK64=13&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_SETLKW64=14&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These values are originally obtained by compiling an empty file
at the time of Linux kernel build. However, this time they can not be
obtained directly. Therefore, we have to specify these values
which come from when building with the x86_64 environment.&lt;/p&gt;

&lt;p&gt;Next, I will explain &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;. The following is a snippet of &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;objs&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.o&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;built-in&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As explained above, the build system of Linux kernel gathers object files
by &lt;code class=&quot;highlighter-rouge&quot;&gt;ar&lt;/code&gt; and links them to get &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To work with Emscripten we need to get &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt; as a LLVM bitcode.
LLVM has a linker called &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt; that links multiple LLVM bitcode files
to get one LLVM bitcode.
To generate &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;, we need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;,
but there is a problem.
&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt; can not take archive files as arguments like &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt;s.
Therefore, we have to record object files that are originally archived.
In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt; will record them as file paths in &lt;code class=&quot;highlighter-rouge&quot;&gt;objs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, Let’s look at the part of &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt; generation.
I added following scripts to &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts/link-vmlinux.sh&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;info CLEAN obj 
python &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/clean-obj.py&quot;&lt;/span&gt;

info GEN link-vmlinux.sh
python &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/link-vmlinux-gen.py&quot;&lt;/span&gt;

info LINK vmlinux
bash &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/link-vmlinux.sh&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clean-obj.py&lt;/code&gt; removes duplicated file paths from &lt;code class=&quot;highlighter-rouge&quot;&gt;objs&lt;/code&gt;
which is generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;link-vmlinux-gen.py&lt;/code&gt; generates &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux-link.sh&lt;/code&gt;
(not &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts/link-vmlinux.sh&lt;/code&gt;) which performs &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;.
By performing &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux-link.sh&lt;/code&gt;, we can get &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is the flow of generating &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;generating-bootjs&quot;&gt;Generating boot.js&lt;/h3&gt;

&lt;p&gt;Next, I will look at until JavaScript code is generated.
As explained above, since LKL is one of Library OS,
&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt; does not work on its own, it works only when it has
a part of an application. In this case, our target is &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/tests/boot&lt;/code&gt;
which is LKL’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello, world&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$LINK&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.bc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-in.o &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/lib/liblkl-in.o &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/lib/lkl.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, we have to link &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/lib/lkl.o&lt;/code&gt;),
host dependent part &lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/lib/liblkl-in.o&lt;/code&gt; and
applicatin part &lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/tests/boot-in.o&lt;/code&gt; and get &lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/tests/boot.bc&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.ll &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/dlmalloc.bc js/dlmalloc.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/libc.bc js/libc.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/pthreads.bc js/pthreads.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/dlmalloc.ll js/dlmalloc.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/libc.ll js/libc.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/pthreads.ll js/pthreads.bc
&lt;span class=&quot;nv&quot;&gt;$PY&lt;/span&gt; rename_symbols.py &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.ll &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-mod.ll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, it disassembles all LLVM bitcode files
(&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/tests/boot.bc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;libc.bc&lt;/code&gt; etc.)
using &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-dis&lt;/code&gt;.
Next, it applies &lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;boot.ll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is a reason for performing such operations.
This is because function names used in the Linux kernel conflict
with function names used in libcs.
In normal LKL, this conflict is avoided by using ELF linker tricks.
Meanwhile, since JavaScript generated by Emscripten does not
have a namespace, such collisions occur.
Therefore, by rewriting the functions names that would collide
with &lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt;, it can avoid collisions.&lt;/p&gt;

&lt;p&gt;In addition, &lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt; also performs operations such as
converting inline assemblies in Linux kernel to Emscripten
&lt;code class=&quot;highlighter-rouge&quot;&gt;emscripten_asm_const_int&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;From the &lt;code class=&quot;highlighter-rouge&quot;&gt;boot-mod.ll&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;EMCC_DEBUG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;$CC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/boot.html &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-mod.ll &lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;generate HTML and JavaScript files.&lt;/p&gt;

&lt;h2 id=&quot;adding-workarounds&quot;&gt;Adding Workarounds&lt;/h2&gt;

&lt;p&gt;Although we generated the Linux kernel translated in “completely”
JavaScript and the application &lt;code class=&quot;highlighter-rouge&quot;&gt;boot.js&lt;/code&gt;, it will not work as it is.
This is due to the fact that the architecture of computers and
JavaScript is very different. So we have to make some modifications.&lt;/p&gt;

&lt;h3 id=&quot;replacing-inline-assemblies&quot;&gt;Replacing inline assemblies&lt;/h3&gt;

&lt;p&gt;In the Linux kernel, the architecture-dependent code is basically placed
under &lt;code class=&quot;highlighter-rouge&quot;&gt;arch/$ARCH&lt;/code&gt;, and other code are architecture independent.
However, an empty inline assembly may be inserted so that optimization
by the compiler prevents meaningful code from being lost at compile time.
Here is an example, &lt;code class=&quot;highlighter-rouge&quot;&gt;set_normalized_timespec64&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/time/time.c&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_normalized_timespec64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/*
		 * The following asm() prevents the compiler from
		 * optimising this loop into a modulo operation. See
		 * also __iter_div_u64_rem() in include/linux/time.h
		 */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Such Inline assemblies cause a failure to convert from LLVM bitcode to
JavaScript. Therefore, we have to replace inline assemblies such as
&lt;code class=&quot;highlighter-rouge&quot;&gt;asm(&quot;&quot; : &quot;+rm&quot;(nsec))&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;emcsripten_asm_const_int&lt;/code&gt;
which calls JavaScript code from C defined in Emscripten.&lt;/p&gt;

&lt;h3 id=&quot;fix-early_param&quot;&gt;Fix early_param&lt;/h3&gt;

&lt;p&gt;In the Linux kernel, there is &lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;.
This is defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;include/linux/init.h&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obs_kernel_param&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define __setup_param(str, unique_id, fn, early)			\
	static const char __setup_str_##unique_id[] __initconst		\
		__aligned(1) = str; 					\
	static struct obs_kernel_param __setup_##unique_id		\
		__used __section(.init.setup)				\
		__attribute__((aligned((sizeof(long)))))		\
		= { __setup_str_##unique_id, fn, early }
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define early_param(str, fn)						\
	__setup_param(str, fn, fn, 1)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt; is a macro, taking &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt; as arguments,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;obs_kernel_param&lt;/code&gt; structure placed in &lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By referring to &lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl/kernel/vmlinux.ldS&lt;/code&gt; which is generated
in the build of LKL, we can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt; is arranged
between &lt;code class=&quot;highlighter-rouge&quot;&gt;__setup_start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__setup_end&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__setup_start = .; KEEP(*(.init.setup)) __setup_end = .;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These symbols will be used in &lt;code class=&quot;highlighter-rouge&quot;&gt;init/main.c&lt;/code&gt; as follows.
Here it compares one of boot parameter (&lt;code class=&quot;highlighter-rouge&quot;&gt;param&lt;/code&gt;) of Linux kernel
with &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;obs_kernel_param&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt;.
If it matches, it will execute &lt;code class=&quot;highlighter-rouge&quot;&gt;(*setup_func)(char*)&lt;/code&gt; with argument &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Check for early params. */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_early_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				 &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obs_kernel_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__setup_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__setup_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
		    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		     &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;earlycon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* We accept everything at this stage. */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In summary, &lt;code class=&quot;highlighter-rouge&quot;&gt;do_early_param&lt;/code&gt; executes &lt;code class=&quot;highlighter-rouge&quot;&gt;setup_func&lt;/code&gt; registered by
&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt; by referring boot parameters.&lt;/p&gt;

&lt;p&gt;However, since it uses ELF symbols, it does not work correctly
in JavaScript. For this reason, the function which will be called here
is hard coded.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_early_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				 &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* XXX: There is a lot of early_param, but hardcode in init/main.c */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_INIT_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;quiet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;loglevel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;earlycon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* debug */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* quiet */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quiet_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* loglevel */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loglevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unknown early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* We accept everything at this stage. */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;fix-initcall&quot;&gt;Fix initcall&lt;/h3&gt;

&lt;p&gt;Like &lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;initcall&lt;/code&gt; which are called in the initialization
manages functions using ELF symbols.
With JavaScript alone, we can not know which function should be called.
Therefore, we have to generate inticall tables from &lt;code class=&quot;highlighter-rouge&quot;&gt;System.map&lt;/code&gt;
generated by a normal build of LKL.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/* initcall{} */&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EM_ASM({&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blacklist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    /* _&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(); */&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    _&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;();&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;});&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above is the initcall table generation script.
We hard-code the code to &lt;code class=&quot;highlighter-rouge&quot;&gt;do_initcalls&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_ASM&lt;/code&gt; is an inline assembly that directly calls the JavaScript code
in C.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* XXX: initcalls are broken, so hardcode here */&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* initcall0 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EM_ASM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_net_ns_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* initcall1 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EM_ASM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_lkl_console_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_wq_sysfs_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_ksysfs_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;demonstration-and-the-results&quot;&gt;Demonstration and the Results&lt;/h2&gt;

&lt;p&gt;As described at the top, LKL.js uses pthread,
we have to enable SharedArrayBuffer.
Although every modern web browsers are shipped with SharedarrayBuffer,
it is disabled by default because of Spectre mitigation in Mozilla Firefox.
Therefore, please enable it before executing the demo.&lt;/p&gt;

&lt;p&gt;The following is the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;start_kernel&lt;/code&gt;.
We can see that it shows dmesg on browsers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [    0.000000] Linux version 4.16.0+ (akira@akira-Z270) () #13 Tue Jul 17 23:01:19 JST 2018
  [    0.000000] bootmem address range: 0x675000 - 0x1674000
  [    0.000000] On node 0 totalpages: 4095
  [    0.000000]   Normal zone: 36 pages used for memmap
  [    0.000000]   Normal zone: 0 pages reserved
  [    0.000000]   Normal zone: 4095 pages, LIFO batch:0
  [    0.000000] pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768
  [    0.000000] pcpu-alloc: [0] 0 
  [    0.000000] Built 1 zonelists, mobility grouping off.  Total pages: 4059
  [    0.000000] Kernel command line: mem=16M loglevel=8
  [    0.000000] Parameter  is obsolete, ignored
  [    0.000000] Parameter  is obsolete, ignored
  [    0.000000] Dentry cache hash table entries: 2048 (order: 1, 8192 bytes)
  [    0.000000] Inode-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.000000] Memory available: 16144k/16380k RAM
  [    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
  [    0.000000] NR_IRQS: 1024
  [    0.000000] lkl: irqs initialized
  [    0.000000] clocksource: lkl: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns
  [    0.000100] lkl: time and timers initialized (irq1)
  [    0.001100] pid_max: default: 4096 minimum: 301
  [    0.009400] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.009900] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.327100] console [lkl_console0] enabled
  [    0.329600] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
  [    0.329700] xor: automatically using best checksumming function   8regs     
  [    0.341199] NET: Registered protocol family 16
  [    0.388999] clocksource: Switched to clocksource lkl
  [    0.414100] NET: Registered protocol family 2
  [    0.437700] tcp_listen_portaddr_hash hash table entries: 512 (order: 0, 4096 bytes)
  [    0.438199] TCP established hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.439000] TCP bind hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.439600] TCP: Hash tables configured (established 1024 bind 1024)
  [    0.443200] UDP hash table entries: 256 (order: 0, 4096 bytes)
  [    0.444000] UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
  [    0.472100] workingset: timestamp_bits=30 max_order=12 bucket_order=0
  [    0.863100] SGI XFS with ACLs, security attributes, no debug enabled
  [    0.923700] jitterentropy: Initialization failed with host not compliant with requirements: 2
  [    0.924599] io scheduler noop registered
  [    0.924900] io scheduler deadline registered
  [    0.933099] io scheduler cfq registered (default)
  [    0.933500] io scheduler kyber registered
  [    1.633500] NET: Registered protocol family 10
  [    1.658400] Segment Routing with IPv6
  [    1.660800] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
  [    1.674200] ------------[ cut here ]------------
  [    1.675500] WARNING: CPU: 0 PID: 0 at arch/lkl/kernel/setup.c:188   (null)
  [    1.675899] Call Trace:
  [    1.676200] 
  [    1.676999] ---[ end trace 941dc55fe0966cff ]---
  [    1.684299] Warning: unable to open an initial console.
  [    1.685200] This architecture does not have kernel memory protection.
  pthread_join((pthread_t)tid, NULL): No such process
  lkl_start_kernel(&amp;amp;lkl_host_ops, &quot;mem=16M loglevel=8&quot;) = 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;From the above results, we confirmed that Linux kernel was booted
directly in JavaScript.
However, it just outputted dmesg and
it is not suitable for practical use at all.
This is because of the following problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It fails to create kernel threads.&lt;/li&gt;
  &lt;li&gt;It fails to mount rootfs.&lt;/li&gt;
  &lt;li&gt;It fails to execute init (PID 1).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, support for pthreads in Emscripten is not good.
We extracted semaphore, mutex, and thread from Little Kernel (LK)
and add them to LKL as green threads.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/retrage/linux/tree/retrage/fiber&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We plan to create LKL.js using this green threads.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;We created a Linux kernel fully translated in JavaScript using
LKL and Emscripten. It boots the Linux kernel and we confirmed
that it shows dmesg.
Although the architecture is greatly different between
computers and JavaScript, we found that it works somewhat by adding
some fixes and workarounds.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/lkl/linux&lt;/li&gt;
  &lt;li&gt;https://github.com/kripken/emscripten&lt;/li&gt;
  &lt;li&gt;https://llvm.org/&lt;/li&gt;
  &lt;li&gt;https://clang.llvm.org/&lt;/li&gt;
  &lt;li&gt;https://wiki.linuxfoundation.org/llvmlinux&lt;/li&gt;
  &lt;li&gt;https://lwn.net/Articles/734071/&lt;/li&gt;
  &lt;li&gt;http://llvm.org/docs/CommandGuide/llvm-link.html&lt;/li&gt;
  &lt;li&gt;https://0xax.gitbooks.io/linux-insides/Concepts/linux-cpu-3.html&lt;/li&gt;
  &lt;li&gt;https://github.com/littlekernel/lk&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I ported Linux kernel directly on JavaScript. In other words, I translated the Linux kernel to JavaScript using Emscripten, and Unlike JSLinux, it runs without emulators. The following is the working repository. https://github.com/retrage/linux/tree/retrage/em-v2 I published a demonstration site for LKL.js. Please enable SharedArrayBuffer and try it out LKL.js Demo I also published slides about LKL.js. https://speakerdeck.com/retrage/lkl-dot-js-running-linux-kernel-on-javascript-star-directly-star Linux Kernel Library (LKL) We use Linux Kernel Library (LKL) which makes the Linux kernel an anykernel. LKL is a fork of torvalds/linux. It is designed to put LKL specific code only in arch/lkl and runs without modifications of other code. By this design, it makes easy to follow the mainline. (Currently v4.16) Since LKL is anykernel, it runs on user space of various OS such as Linux, FreeBSD, and Windows etc. Emscripten Emscripten is LLVM based C/C++ to JavaScript/WebAssembly transpiler. It also provides a Unix-like environment to run translated software on web browsers. Can we port LKL to JavaScript with Emscripten? LKL runs on various OSes, Emscripten provides Unix-like environment. So can LKL be ported to JavaScript with Emscripten? Current Status of Linux Kernel Build with Clang First of all, the Linux kernel is deeply dependent on gcc-extension, and there is a doubt that Clang can not compile it. Once upon the time, there was LLVMLinux project that aims to compile Linux kernel with Clang. However, through the efforts of the Google Android team, two LTS (4.4 and 4.9) can be built with Clang. Now, LKL can be built with Clang. LKL Build Flow 101 Let’s look at the build flow of LKL. First, when $ make -C tools/lkl is performed, the build system determines which source code (*.c/*.S) to be built from the Kconfig settings and compiles them. Object files (*.o) generated by compiling are once archived by ar to built-in.o. Next, it links all built-in.o files into vmlinux at once. For host side code, files under tools/lkl/lib compiled and linked to liblkl.o. Finally, link all files (vmlinux and liblkl.o) to liblkl.so. This is a simple build flow of LKL. Porting LKL with Emscripten Next, we will take a look at how to port LKL with Emscripten. Not limited to Emscripten, when using LLVM infrastructures, the compiler compiles source to target with the following flow. Soruce -&amp;gt; LLVM IR -&amp;gt; Target In this way, the source is once converted to LLVM IR (*.bc/*.ll) and then converted to the target. In Emscripten, the “linking” is the conversion from LLVM IR to JavaScript. Therefore, it is necessary to first convert all (including libc etc. provided by Emscripten) to LLVM IR. Generating vmlinux.bc The build using emcc (An Emscripten Clang wrapper) is: make -C tools/lkl CC=&quot;$CC $CFLAGS&quot; AR=&quot;$PY $PWD/ar.py&quot; V=1 The two important things here are $FCFLAS and ar.py. I will explain each one. (Note that C=&quot;$CC $CFLAGS&quot; is forced to pass $CFLAGS) $CFLAGS is: CFLAGS=&quot;$CFLAGS -s WASM=0&quot; CFLAGS=&quot;$CFLAGS -s ASYNCIFY=1&quot; CFLAGS=&quot;$CFLAGS -s EMULATE_FUNCTION_POINTER_CASTS=1&quot; CFLAGS=&quot;$CFLAGS -s USE_PTHREADS=1&quot; CFLAGS=&quot;$CFLAGS -s PTHREAD_POOL_SIZE=4&quot; CFLAGS=&quot;$CFLAGS -s TOTAL_MEMORY=1342177280&quot; The options are to pass to Emscripten. Please refer to the Emscripten manual for details. Furthermore, the following definitions are specified. CFLAGS=&quot;$CFLAGS -DMAX_NR_ZONES=2&quot; CFLAGS=&quot;$CFLAGS -DNR_PAGEFLAGS=20&quot; CFLAGS=&quot;$CFLAGS -DSPINLOCK_SIZE=0&quot; CFLAGS=&quot;$CFLAGS -DF_GETLK64=12&quot; CFLAGS=&quot;$CFLAGS -DF_SETLK64=13&quot; CFLAGS=&quot;$CFLAGS -DF_SETLKW64=14&quot; These values are originally obtained by compiling an empty file at the time of Linux kernel build. However, this time they can not be obtained directly. Therefore, we have to specify these values which come from when building with the x86_64 environment. Next, I will explain ar.py. The following is a snippet of ar.py. filename = &quot;objs&quot; def main(): if not os.path.exists(filename): with open(filename, &quot;w&quot;) as fp: pass objs = [] for i, arg in enumerate(sys.argv): if &quot;.o&quot; in arg and not &quot;built-in&quot; in arg and i &amp;gt; 2: objs.append(arg) with open(filename, &quot;aw&quot;) as fp: for obj in objs: if not obj is &quot;&quot;: fp.write(obj + &quot; &quot;) return 0 As explained above, the build system of Linux kernel gathers object files by ar and links them to get vmlinux. To work with Emscripten we need to get vmlinux as a LLVM bitcode. LLVM has a linker called llvm-link that links multiple LLVM bitcode files to get one LLVM bitcode. To generate vmlinux.bc, we need to use llvm-link, but there is a problem. llvm-link can not take archive files as arguments like lds. Therefore, we have to record object files that are originally archived. In this case, ar.py will record them as file paths in objs. Next, Let’s look at the part of vmlinux.bc generation. I added following scripts to scripts/link-vmlinux.sh. info CLEAN obj python &quot;${srctree}/clean-obj.py&quot; info GEN link-vmlinux.sh python &quot;${srctree}/link-vmlinux-gen.py&quot; info LINK vmlinux bash &quot;${srctree}/link-vmlinux.sh&quot; clean-obj.py removes duplicated file paths from objs which is generated by ar.py. link-vmlinux-gen.py generates vmlinux-link.sh (not scripts/link-vmlinux.sh) which performs llvm-link. By performing vmlinux-link.sh, we can get vmlinux.bc. This is the flow of generating vmlinux.bc. Generating boot.js Next, I will look at until JavaScript code is generated. As explained above, since LKL is one of Library OS, vmlinux does not work on its own, it works only when it has a part of an application. In this case, our target is tools/lkl/tests/boot which is LKL’s Hello, world. $LINK -o $LKL/tests/boot.bc \ $LKL/tests/boot-in.o $LKL/lib/liblkl-in.o $LKL/lib/lkl.o First, we have to link vmlinux.bc ($LKL/lib/lkl.o), host dependent part $LKL/lib/liblkl-in.o and applicatin part $LKL/tests/boot-in.o and get $LKL/tests/boot.bc. $DIS -o $LKL/tests/boot.ll $LKL/tests/boot.bc $CP ~/.emscripten_cache/asmjs/dlmalloc.bc js/dlmalloc.bc $CP ~/.emscripten_cache/asmjs/libc.bc js/libc.bc $CP ~/.emscripten_cache/asmjs/pthreads.bc js/pthreads.bc $DIS -o js/dlmalloc.ll js/dlmalloc.bc $DIS -o js/libc.ll js/libc.bc $DIS -o js/pthreads.ll js/pthreads.bc $PY rename_symbols.py $LKL/tests/boot.ll $LKL/tests/boot-mod.ll First, it disassembles all LLVM bitcode files ($LKL/tests/boot.bc and libc.bc etc.) using llvm-dis. Next, it applies rename_symbols.py to boot.ll. There is a reason for performing such operations. This is because function names used in the Linux kernel conflict with function names used in libcs. In normal LKL, this conflict is avoided by using ELF linker tricks. Meanwhile, since JavaScript generated by Emscripten does not have a namespace, such collisions occur. Therefore, by rewriting the functions names that would collide with rename_symbols.py, it can avoid collisions. In addition, rename_symbols.py also performs operations such as converting inline assemblies in Linux kernel to Emscripten emscripten_asm_const_int. From the boot-mod.ll, EMCC_DEBUG=1 $CC -o js/boot.html $LKL/tests/boot-mod.ll $CFLAGS -v generate HTML and JavaScript files. Adding Workarounds Although we generated the Linux kernel translated in “completely” JavaScript and the application boot.js, it will not work as it is. This is due to the fact that the architecture of computers and JavaScript is very different. So we have to make some modifications. Replacing inline assemblies In the Linux kernel, the architecture-dependent code is basically placed under arch/$ARCH, and other code are architecture independent. However, an empty inline assembly may be inserted so that optimization by the compiler prevents meaningful code from being lost at compile time. Here is an example, set_normalized_timespec64 in kernel/time/time.c: void set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec) { while (nsec &amp;gt;= NSEC_PER_SEC) { /* * The following asm() prevents the compiler from * optimising this loop into a modulo operation. See * also __iter_div_u64_rem() in include/linux/time.h */ asm(&quot;&quot; : &quot;+rm&quot;(nsec)); nsec -= NSEC_PER_SEC; ++sec; } while (nsec &amp;lt; 0) { asm(&quot;&quot; : &quot;+rm&quot;(nsec)); nsec += NSEC_PER_SEC; --sec; } ts-&amp;gt;tv_sec = sec; ts-&amp;gt;tv_nsec = nsec; } Such Inline assemblies cause a failure to convert from LLVM bitcode to JavaScript. Therefore, we have to replace inline assemblies such as asm(&quot;&quot; : &quot;+rm&quot;(nsec)) with emcsripten_asm_const_int which calls JavaScript code from C defined in Emscripten. Fix early_param In the Linux kernel, there is early_param. This is defined in include/linux/init.h as follows: struct obs_kernel_param { const char *str; int (*setup_func)(char *); int early; }; /* snip */ #define __setup_param(str, unique_id, fn, early) \ static const char __setup_str_##unique_id[] __initconst \ __aligned(1) = str; \ static struct obs_kernel_param __setup_##unique_id \ __used __section(.init.setup) \ __attribute__((aligned((sizeof(long))))) \ = { __setup_str_##unique_id, fn, early } /* snip */ #define early_param(str, fn) \ __setup_param(str, fn, fn, 1) early_param is a macro, taking str and fn as arguments, and obs_kernel_param structure placed in .init.setup. By referring to arch/lkl/kernel/vmlinux.ldS which is generated in the build of LKL, we can see that .init.setup is arranged between __setup_start and __setup_end. __setup_start = .; KEEP(*(.init.setup)) __setup_end = .; These symbols will be used in init/main.c as follows. Here it compares one of boot parameter (param) of Linux kernel with str of obs_kernel_param in .init.setup. If it matches, it will execute (*setup_func)(char*) with argument val. /* Check for early params. */ static int __init do_early_param(char *param, char *val, const char *unused, void *arg) { const struct obs_kernel_param *p; for (p = __setup_start; p &amp;lt; __setup_end; p++) { if ((p-&amp;gt;early &amp;amp;&amp;amp; parameq(param, p-&amp;gt;str)) || (strcmp(param, &quot;console&quot;) == 0 &amp;amp;&amp;amp; strcmp(p-&amp;gt;str, &quot;earlycon&quot;) == 0) ) { if (p-&amp;gt;setup_func(val) != 0) pr_warn(&quot;Malformed early option '%s'\n&quot;, param); } } /* We accept everything at this stage. */ return 0; } In summary, do_early_param executes setup_func registered by early_param by referring boot parameters. However, since it uses ELF symbols, it does not work correctly in JavaScript. For this reason, the function which will be called here is hard coded. static int __init do_early_param(char *param, char *val, const char *unused, void *arg) { /* XXX: There is a lot of early_param, but hardcode in init/main.c */ const char *early_params[MAX_INIT_ARGS+2] = { &quot;debug&quot;, &quot;quiet&quot;, &quot;loglevel&quot;, NULL, }; int i; for (i = 0; early_params[i]; i++) { if (strcmp(param, early_params[i]) == 0 || (strcmp(param, &quot;console&quot;) == 0 &amp;amp;&amp;amp; strcmp(early_params[i], &quot;earlycon&quot;) == 0) ) { switch (i) { case 0: /* debug */ if (debug_kernel(val) != 0) pr_warn(&quot;Malformed early option '%s'\n&quot;, param); break; case 1: /* quiet */ if (quiet_kernel(val) != 0) pr_warn(&quot;Malformed early option '%s'\n&quot;, param); break; case 2: /* loglevel */ if (loglevel(val) != 0) pr_warn(&quot;Malformed early option '%s'\n&quot;, param); break; default: pr_warn(&quot;Unknown early option '%s'\n&quot;, param); } } } /* We accept everything at this stage. */ return 0; } Fix initcall Like early_param, initcall which are called in the initialization manages functions using ELF symbols. With JavaScript alone, we can not know which function should be called. Therefore, we have to generate inticall tables from System.map generated by a normal build of LKL. with open(sys.argv[1], &quot;r&quot;) as fp: for line in fp: if SIG in line: symbol = line[:-1].split(&quot; &quot;)[2] try: level = int(symbol[-1]) initcall = symbol[symbol.index(SIG)+len(SIG):len(symbol)-1] initcalls[level].append(initcall) except ValueError: pass for level, row in enumerate(initcalls): print(&quot;/* initcall{} */&quot;.format(level)) print(&quot;EM_ASM({&quot;) for initcall in row: if initcall in blacklist: print(&quot; /* _&quot;+initcall+&quot;(); */&quot;) else: print(&quot; _&quot;+initcall+&quot;();&quot;) print(&quot;});&quot;) The above is the initcall table generation script. We hard-code the code to do_initcalls. EM_ASM is an inline assembly that directly calls the JavaScript code in C. static void __init do_initcalls(void) { /* XXX: initcalls are broken, so hardcode here */ /* initcall0 */ EM_ASM({ _net_ns_init(); }); /* initcall1 */ EM_ASM({ _lkl_console_init(); _wq_sysfs_init(); _ksysfs_init(); /* snip */ }); } Demonstration and the Results As described at the top, LKL.js uses pthread, we have to enable SharedArrayBuffer. Although every modern web browsers are shipped with SharedarrayBuffer, it is disabled by default because of Spectre mitigation in Mozilla Firefox. Therefore, please enable it before executing the demo. The following is the result of start_kernel. We can see that it shows dmesg on browsers. [ 0.000000] Linux version 4.16.0+ (akira@akira-Z270) () #13 Tue Jul 17 23:01:19 JST 2018 [ 0.000000] bootmem address range: 0x675000 - 0x1674000 [ 0.000000] On node 0 totalpages: 4095 [ 0.000000] Normal zone: 36 pages used for memmap [ 0.000000] Normal zone: 0 pages reserved [ 0.000000] Normal zone: 4095 pages, LIFO batch:0 [ 0.000000] pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768 [ 0.000000] pcpu-alloc: [0] 0 [ 0.000000] Built 1 zonelists, mobility grouping off. Total pages: 4059 [ 0.000000] Kernel command line: mem=16M loglevel=8 [ 0.000000] Parameter is obsolete, ignored [ 0.000000] Parameter is obsolete, ignored [ 0.000000] Dentry cache hash table entries: 2048 (order: 1, 8192 bytes) [ 0.000000] Inode-cache hash table entries: 1024 (order: 0, 4096 bytes) [ 0.000000] Memory available: 16144k/16380k RAM [ 0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1 [ 0.000000] NR_IRQS: 1024 [ 0.000000] lkl: irqs initialized [ 0.000000] clocksource: lkl: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns [ 0.000100] lkl: time and timers initialized (irq1) [ 0.001100] pid_max: default: 4096 minimum: 301 [ 0.009400] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes) [ 0.009900] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes) [ 0.327100] console [lkl_console0] enabled [ 0.329600] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns [ 0.329700] xor: automatically using best checksumming function 8regs [ 0.341199] NET: Registered protocol family 16 [ 0.388999] clocksource: Switched to clocksource lkl [ 0.414100] NET: Registered protocol family 2 [ 0.437700] tcp_listen_portaddr_hash hash table entries: 512 (order: 0, 4096 bytes) [ 0.438199] TCP established hash table entries: 1024 (order: 0, 4096 bytes) [ 0.439000] TCP bind hash table entries: 1024 (order: 0, 4096 bytes) [ 0.439600] TCP: Hash tables configured (established 1024 bind 1024) [ 0.443200] UDP hash table entries: 256 (order: 0, 4096 bytes) [ 0.444000] UDP-Lite hash table entries: 256 (order: 0, 4096 bytes) [ 0.472100] workingset: timestamp_bits=30 max_order=12 bucket_order=0 [ 0.863100] SGI XFS with ACLs, security attributes, no debug enabled [ 0.923700] jitterentropy: Initialization failed with host not compliant with requirements: 2 [ 0.924599] io scheduler noop registered [ 0.924900] io scheduler deadline registered [ 0.933099] io scheduler cfq registered (default) [ 0.933500] io scheduler kyber registered [ 1.633500] NET: Registered protocol family 10 [ 1.658400] Segment Routing with IPv6 [ 1.660800] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver [ 1.674200] ------------[ cut here ]------------ [ 1.675500] WARNING: CPU: 0 PID: 0 at arch/lkl/kernel/setup.c:188 (null) [ 1.675899] Call Trace: [ 1.676200] [ 1.676999] ---[ end trace 941dc55fe0966cff ]--- [ 1.684299] Warning: unable to open an initial console. [ 1.685200] This architecture does not have kernel memory protection. pthread_join((pthread_t)tid, NULL): No such process lkl_start_kernel(&amp;amp;lkl_host_ops, &quot;mem=16M loglevel=8&quot;) = 0 Limitations From the above results, we confirmed that Linux kernel was booted directly in JavaScript. However, it just outputted dmesg and it is not suitable for practical use at all. This is because of the following problems: It fails to create kernel threads. It fails to mount rootfs. It fails to execute init (PID 1). Also, support for pthreads in Emscripten is not good. We extracted semaphore, mutex, and thread from Little Kernel (LK) and add them to LKL as green threads. https://github.com/retrage/linux/tree/retrage/fiber We plan to create LKL.js using this green threads. Summary We created a Linux kernel fully translated in JavaScript using LKL and Emscripten. It boots the Linux kernel and we confirmed that it shows dmesg. Although the architecture is greatly different between computers and JavaScript, we found that it works somewhat by adding some fixes and workarounds. Reference https://github.com/lkl/linux https://github.com/kripken/emscripten https://llvm.org/ https://clang.llvm.org/ https://wiki.linuxfoundation.org/llvmlinux https://lwn.net/Articles/734071/ http://llvm.org/docs/CommandGuide/llvm-link.html https://0xax.gitbooks.io/linux-insides/Concepts/linux-cpu-3.html https://github.com/littlekernel/lk</summary></entry><entry><title type="html">LKL.js: Linux kernelを直接JavaScript上で動かす</title><link href="http://localhost:4000/2018/07/21/lkl-js.html" rel="alternate" type="text/html" title="LKL.js: Linux kernelを直接JavaScript上で動かす" /><published>2018-07-21T15:30:00+09:00</published><updated>2018-07-21T15:30:00+09:00</updated><id>http://localhost:4000/2018/07/21/lkl-js</id><content type="html" xml:base="http://localhost:4000/2018/07/21/lkl-js.html">&lt;p&gt;Linux kernelを直接JavaScript上で動かした．
つまり，JSLinuxのようにEmulatorをJavaScriptで作成し，
その上でLinuxを動かすのではなく，
JavaScriptで書かれたLinuxを生成し，それを動かす，ということである．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-js-architecture.png&quot; alt=&quot;lkl.js Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;リポジトリは以下の通り．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/retrage/linux/tree/retrage/em-v2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお
&lt;a href=&quot;https://retrage.github.io/lkl-js/&quot;&gt;lkl.js Demo&lt;/a&gt;
にデモを用意した．
SharedArrayBufferを有効にして試してみてほしい．&lt;/p&gt;

&lt;h2 id=&quot;linux-kernel-library-lkl&quot;&gt;Linux Kernel Library (LKL)&lt;/h2&gt;

&lt;p&gt;ここでは，Linux kernelをLibrary OSの形態の1つであるAnykernelにする
Linux Kernel Library (LKL)を利用する．
LKLはLinux kernelのforkとして存在し，&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl&lt;/code&gt;にのみLKL specificな
コードをおき，その他は全く変更を加えずに動作するように設計されている．
これによりmainlineへの追従性を高めている．(現在はv4.16)
LKLはAnykernelであるので，
LinuxやFreeBSD, Windowsなど様々なOSのユーザ空間で動作する．&lt;/p&gt;

&lt;h2 id=&quot;emscripten&quot;&gt;Emscripten&lt;/h2&gt;

&lt;p&gt;EmscriptenはLLVMを利用したC/C++からJavaScript/WebAssemblyへのトランスパイラである．
Emscriptenはlibcやpthreadなどへも対応しており，Unix-likeな環境を用意している．&lt;/p&gt;

&lt;h2 id=&quot;lklをemscriptenでjavascriptに移植できるか&quot;&gt;LKLをEmscriptenでJavaScriptに移植できるか？&lt;/h2&gt;

&lt;p&gt;LKLは様々なOSで動作し，EmscriptenはUnix-likeな環境を用意する．
では，LKLはEmscriptenでJavaScriptに移植することはできるだろうか．&lt;/p&gt;

&lt;h2 id=&quot;移植する前に&quot;&gt;移植する前に&lt;/h2&gt;

&lt;h3 id=&quot;clangでのlinux-kernelのビルドの現状&quot;&gt;clangでのLinux kernelのビルドの現状&lt;/h3&gt;

&lt;p&gt;そもそもLinux kernelとは，gcc拡張に依存しており，
clangなどではそもそも扱えないのでは，という疑問がある．
かつてLLVM Linuxというプロジェクトが立ち上がるぐらいには
Linux kernelをclangでコンパイルするのは困難であった．
しかし，2017年頃より，Androidの開発者らにより，
Linux kernelがclangでもコンパイル可能となった．&lt;/p&gt;

&lt;h3 id=&quot;linux-kernelのビルドの流れ&quot;&gt;Linux kernelのビルドの流れ&lt;/h3&gt;

&lt;p&gt;Linux kernelのビルドの流れをみていく．
最初に，makeが行われると，kconfigの設定からビルドされるソースコード(&lt;em&gt;.c/&lt;/em&gt;.S)が決定され，
コンパイルが行われる．コンパイルにより生成されたオブジェクトファイル(*.o)は
一度機能ごとにarにより&lt;code class=&quot;highlighter-rouge&quot;&gt;built-in.o&lt;/code&gt;などの名前でアーカイブ化される．
最後に，まとめて得られた&lt;code class=&quot;highlighter-rouge&quot;&gt;built-in.o&lt;/code&gt;をリンクすることにより&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt;を得る．
以上がLinux kernelにおける簡単なビルドの流れとなっている．&lt;/p&gt;

&lt;h2 id=&quot;lklをemscriptenで移植&quot;&gt;LKLをEmscriptenで移植&lt;/h2&gt;

&lt;p&gt;では，実際にどのようにLKLをEmscriptenで移植していくのかをみていく．&lt;/p&gt;

&lt;p&gt;Emscriptenに限らず，LLVMを利用する場合，次のような流れでターゲットにコンパイルする．&lt;/p&gt;

&lt;p&gt;Source -&amp;gt; LLVM IR -&amp;gt; Target&lt;/p&gt;

&lt;p&gt;このように一度LLVM IR (&lt;em&gt;.bc/&lt;/em&gt;.ll)に変換してからターゲットに変換される．
なお，Emscriptenでは通常のリンクに当たる部分がLLVM IRからJavaScriptへの変換となっている．
このため，最初に全て(Emscriptenの用意するlibcなども含めて)をLLVM IRに変換する必要がある．&lt;/p&gt;

&lt;h3 id=&quot;vmliuxbcの生成&quot;&gt;vmliux.bcの生成&lt;/h3&gt;

&lt;p&gt;emcc (Emscripten clangのwrapper)でのビルドは次のようになっている&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; tools/lkl &lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;AR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/ar.py&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここで重要なのが&lt;code class=&quot;highlighter-rouge&quot;&gt;$CFLAGS&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;の2つである．それぞれみていく．
(なお，&lt;code class=&quot;highlighter-rouge&quot;&gt;CC=&quot;$CC $CFLAGS&quot;&lt;/code&gt;となっているのは無理やりCFLAGSを渡すためである)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$CFLAGS&lt;/code&gt;は次のようになっている．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s WASM=0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s ASYNCIFY=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s EMULATE_FUNCTION_POINTER_CASTS=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s USE_PTHREADS=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s PTHREAD_POOL_SIZE=4&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s TOTAL_MEMORY=1342177280&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでは，Emscriptenに渡すオプションを指定している．
詳細についてはEmscriptenのマニュアルを参考にしてほしい．&lt;/p&gt;

&lt;p&gt;さらに以下のような定義を指定している．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DMAX_NR_ZONES=2&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DNR_PAGEFLAGS=20&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DSPINLOCK_SIZE=0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_GETLK64=12&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_SETLK64=13&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_SETLKW64=14&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これらは本来Linux kernelビルド時に空のファイルをコンパイルするなど
して得られる値であり，今回の場合，これらは直接得ることができない．
そのため，あらかじめx86_64でビルドしたときに得られた値をここで指定している．&lt;/p&gt;

&lt;p&gt;次に&lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;をみていく．以下のような簡単なものとなっている．&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;objs&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.o&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;built-in&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先に説明したように，本来Linux kernelでは
コンパイルによって得られたオブジェクトファイルを
&lt;code class=&quot;highlighter-rouge&quot;&gt;ar&lt;/code&gt;によりまとめ，最後にリンクを行うことで&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt;を得る．&lt;/p&gt;

&lt;p&gt;Emscriptenで扱うには&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt;をLLVM bitcodeとして得る必要がある．
LLVMには&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;という複数のLLVM bitcodeファイルをリンクして
1つのLLVM bitcodeを得るリンカが存在する．
&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;を得るには&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;を利用する必要があるが，
ここで1つ問題がある．&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;は通常のリンカのように，
アーカイブファイルを引数としてとることができない．
そのため，本来アーカイブにされるオブジェクトファイルを記録しておく必要がある．
ここでは，&lt;code class=&quot;highlighter-rouge&quot;&gt;objs&lt;/code&gt;にそれらをまとめてファイルパスとして記録しておく．&lt;/p&gt;

&lt;p&gt;次に実際に&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;が生成される部分をみていく．
&lt;code class=&quot;highlighter-rouge&quot;&gt;scripts/link-vmlinux.sh&lt;/code&gt;に次のような変更が加えられている．&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;info CLEAN obj 
python &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/clean-obj.py&quot;&lt;/span&gt;

info GEN link-vmlinux.sh
python &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/link-vmlinux-gen.py&quot;&lt;/span&gt;

info LINK vmlinux
bash &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/link-vmlinux.sh&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clean-obj.py&lt;/code&gt;では先に得られた&lt;code class=&quot;highlighter-rouge&quot;&gt;objs&lt;/code&gt;より重複するファイルパスを削除する．
次に&lt;code class=&quot;highlighter-rouge&quot;&gt;link-vmlinux-gen.py&lt;/code&gt;では&lt;code class=&quot;highlighter-rouge&quot;&gt;objs&lt;/code&gt;より&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;を行う
&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux-link.sh&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;scripts/link-vmlinux.sh&lt;/code&gt;とは異なる)を生成する．
最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;link-vmlinux.sh&lt;/code&gt;を実行し，&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;を得る．&lt;/p&gt;

&lt;p&gt;以上が&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;を得るまでの流れとなっている．&lt;/p&gt;

&lt;h3 id=&quot;bootjsの生成&quot;&gt;boot.jsの生成&lt;/h3&gt;

&lt;p&gt;次に実際にJavaScriptが生成されるまでをみていく．
先に説明したとおり，LKLはLibray OSの1つであるので，&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt;それ単体では動作せず，
アプリケーションとなる部分があってはじめて動作する．ここでは，LKLのHello, worldに相当する
&lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/tests/boot&lt;/code&gt;をターゲットとする．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$LINK&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.bc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-in.o &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/lib/liblkl-in.o &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/lib/lkl.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;まず，先に生成した&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/lib/lkl.o&lt;/code&gt;)と
ホスト依存部分&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/lib/liblkl-in.o&lt;/code&gt;，
アプリケーション部分&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/tests/boot-in.o&lt;/code&gt;をリンクして&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/tests/boot.bc&lt;/code&gt;を得る．&lt;/p&gt;

&lt;p&gt;次に以下のようなことを行う．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.ll &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/dlmalloc.bc js/dlmalloc.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/libc.bc js/libc.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/pthreads.bc js/pthreads.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/dlmalloc.ll js/dlmalloc.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/libc.ll js/libc.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/pthreads.ll js/pthreads.bc
&lt;span class=&quot;nv&quot;&gt;$PY&lt;/span&gt; rename_symbols.py &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.ll &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-mod.ll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最初に&lt;code class=&quot;highlighter-rouge&quot;&gt;boot.bc&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-dis&lt;/code&gt;を用いてLLVM bitcodeからLLVM IRへ変換する．
次にEmscriptenの&lt;code class=&quot;highlighter-rouge&quot;&gt;dlmalloc.bc&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;libc.bc&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;pthreads.bc&lt;/code&gt;などのファイルを
LLVM IRへと変換する．
最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;boot.ll&lt;/code&gt;に対して実行する．
このようなことを行うのには理由がある．
それは，Linux kernelで利用されている関数名とlibcなどで利用されている関数名が
衝突してしまうからである．
通常のLKLでは，ELFの仕様を利用しうまくLinux kernelの関数を隠匿化することにより
この衝突を回避している．一方で，Emscriptenでは名前空間などが存在しないために，
このような衝突が発生してしまう．
そこで，あらかじめリンクされる予定のLLVM bitcodeをLLVM IRに変換し，
衝突するであろう関数名を&lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt;で書き換えることにより衝突を回避している．&lt;/p&gt;

&lt;p&gt;また，&lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt;では，
Linux kernelに含まれる，inline asmをEmscriptenの&lt;code class=&quot;highlighter-rouge&quot;&gt;emscripten_asm_const_int&lt;/code&gt;
に変換するなどの操作も行なっている．&lt;/p&gt;

&lt;p&gt;以上によって得られた&lt;code class=&quot;highlighter-rouge&quot;&gt;boot-mod.ll&lt;/code&gt;より&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;EMCC_DEBUG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;$CC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/boot.html &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-mod.ll &lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;によりHTMLとJSを得る．&lt;/p&gt;

&lt;h2 id=&quot;動かすための修正&quot;&gt;動かすための修正&lt;/h2&gt;

&lt;p&gt;以上により得られた「完全に」JavaScriptで書かれたLinux kernelとそれを利用した
アプリケーションboot.jsであるが，このままでは動作しない．
これは，通常のマシンとJavaScriptとではそもそものアーキテクチャが
大きく異なっていることに由来する．それでもいくつかの修正を加える．&lt;/p&gt;

&lt;h3 id=&quot;inline-assemblyの置換&quot;&gt;inline assemblyの置換&lt;/h3&gt;

&lt;p&gt;Linux kernelでは基本的に&lt;code class=&quot;highlighter-rouge&quot;&gt;arch&lt;/code&gt;以下にアーキテクチャ依存のコードをおき，
それ以外ではアーキテクチャ非依存のコードとなるように配置されている．
しかし，一部のコードでは，コンパイラによる最適化により意味のあるコードが
コンパイル時に失われないように空のinline assemblyが挿入されている場合がある．
以下はその一例，&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/time/time.c&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;set_normalized_timespec64&lt;/code&gt;である．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_normalized_timespec64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/*
		 * The following asm() prevents the compiler from
		 * optimising this loop into a modulo operation. See
		 * also __iter_div_u64_rem() in include/linux/time.h
		 */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このようなinline assemblyはLLVM bitcodeからJavaScriptへの変換に失敗する要因となる．
このため，&lt;code class=&quot;highlighter-rouge&quot;&gt;asm(&quot;&quot; : &quot;+rm&quot;(nsec));&lt;/code&gt;をEmscriptenで定義されている
CからJSのコードを呼ぶinline assembly&lt;code class=&quot;highlighter-rouge&quot;&gt;emscripten_asm_const_int&lt;/code&gt;に置き換えることで対応する．&lt;/p&gt;

&lt;h3 id=&quot;early_paramの修正&quot;&gt;early_paramの修正&lt;/h3&gt;

&lt;p&gt;Linux kernelでは，&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;というものが存在する．
これは，&lt;code class=&quot;highlighter-rouge&quot;&gt;include/linux/init.h&lt;/code&gt;に以下のように定義される．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obs_kernel_param&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define __setup_param(str, unique_id, fn, early)			\
	static const char __setup_str_##unique_id[] __initconst		\
		__aligned(1) = str; 					\
	static struct obs_kernel_param __setup_##unique_id		\
		__used __section(.init.setup)				\
		__attribute__((aligned((sizeof(long)))))		\
		= { __setup_str_##unique_id, fn, early }
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define early_param(str, fn)						\
	__setup_param(str, fn, fn, 1)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;つまり，&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;はマクロであり，&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt;を引数にとり，
&lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt;セクションに置かれる&lt;code class=&quot;highlighter-rouge&quot;&gt;obs_kernel_param&lt;/code&gt;構造体であることがわかる．&lt;/p&gt;

&lt;p&gt;通常のLKLのビルドで生成される&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl/kernel/vmlinux.lds&lt;/code&gt;を参照すると
以下のようであることから，&lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;__setup_start&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;__setup_end&lt;/code&gt;で
挟まれたように配置されることがわかる．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__setup_start = .; KEEP(*(.init.setup)) __setup_end = .;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これらのシンボルは&lt;code class=&quot;highlighter-rouge&quot;&gt;init/main.c&lt;/code&gt;において次のように使われる．
ここでは，Linux kernelのboot parameter(&lt;code class=&quot;highlighter-rouge&quot;&gt;param&lt;/code&gt;)の1つについて，
&lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt;にある&lt;code class=&quot;highlighter-rouge&quot;&gt;obs_kernel_param&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;と比較を行い，
一致した場合に設定してある&lt;code class=&quot;highlighter-rouge&quot;&gt;(*setup_func)(char*)&lt;/code&gt;を
&lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;を引数として実行している．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Check for early params. */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_early_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				 &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obs_kernel_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__setup_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__setup_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
		    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		     &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;earlycon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* We accept everything at this stage. */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;まとめると，&lt;code class=&quot;highlighter-rouge&quot;&gt;do_early_param&lt;/code&gt;では&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;によって登録されている
&lt;code class=&quot;highlighter-rouge&quot;&gt;setup_func&lt;/code&gt;をboot parameterにより実行する，という形になっている．&lt;/p&gt;

&lt;p&gt;ただ，これはELFのシンボルを利用しているために，JavaScriptでは正しく実行されない．
このため，ここで呼ばれるであろう関数について，以下のようにハードコードする．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_early_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				 &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* XXX: There is a lot of early_param, but hardcode in init/main.c */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_INIT_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;quiet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;loglevel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;earlycon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* debug */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* quiet */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quiet_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* loglevel */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loglevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unknown early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* We accept everything at this stage. */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;initcallの修正&quot;&gt;initcallの修正&lt;/h3&gt;

&lt;p&gt;先の&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;同様，初期化で呼ばれる&lt;code class=&quot;highlighter-rouge&quot;&gt;initcall&lt;/code&gt;も
ELFのシンボルを用いて呼ばれる関数を管理している．
JavaScript単体では，どの関数が呼ばれるべきかはわからない．
そのため，通常のLKLのビルドで生成される&lt;code class=&quot;highlighter-rouge&quot;&gt;System.map&lt;/code&gt;
を用いて関数をあらかじめ取得し，そこから関数呼び出しを行う．&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/* initcall{} */&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EM_ASM({&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blacklist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    /* _&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(); */&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    _&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;();&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;});&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これによって得られるコードを&lt;code class=&quot;highlighter-rouge&quot;&gt;do_initcalls&lt;/code&gt;にハードコードする．
&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_ASM&lt;/code&gt;はCにJSのコード直接記述するinline assemblyである．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* XXX: initcalls are broken, so hardcode here */&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* initcall0 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EM_ASM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_net_ns_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* initcall1 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EM_ASM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_lkl_console_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_wq_sysfs_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_ksysfs_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;デモと結果&quot;&gt;デモと結果&lt;/h2&gt;

&lt;p&gt;冒頭で紹介したように，lkl.jsではpthreadを利用しているため，
SharedArrayBufferを有効にする必要がある．
現在のブラウザではSharedArrayBufferが実装されているものの，
Spectreのmitiagtionのため，デフォルトでは無効になっている．
そのためこれを有効にした上で実行してみてほしい．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;start_kernel&lt;/code&gt;の実行結果を以下に示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [    0.000000] Linux version 4.16.0+ (akira@akira-Z270) () #13 Tue Jul 17 23:01:19 JST 2018
  [    0.000000] bootmem address range: 0x675000 - 0x1674000
  [    0.000000] On node 0 totalpages: 4095
  [    0.000000]   Normal zone: 36 pages used for memmap
  [    0.000000]   Normal zone: 0 pages reserved
  [    0.000000]   Normal zone: 4095 pages, LIFO batch:0
  [    0.000000] pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768
  [    0.000000] pcpu-alloc: [0] 0 
  [    0.000000] Built 1 zonelists, mobility grouping off.  Total pages: 4059
  [    0.000000] Kernel command line: mem=16M loglevel=8
  [    0.000000] Parameter  is obsolete, ignored
  [    0.000000] Parameter  is obsolete, ignored
  [    0.000000] Dentry cache hash table entries: 2048 (order: 1, 8192 bytes)
  [    0.000000] Inode-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.000000] Memory available: 16144k/16380k RAM
  [    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
  [    0.000000] NR_IRQS: 1024
  [    0.000000] lkl: irqs initialized
  [    0.000000] clocksource: lkl: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns
  [    0.000100] lkl: time and timers initialized (irq1)
  [    0.001100] pid_max: default: 4096 minimum: 301
  [    0.009400] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.009900] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.327100] console [lkl_console0] enabled
  [    0.329600] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
  [    0.329700] xor: automatically using best checksumming function   8regs     
  [    0.341199] NET: Registered protocol family 16
  [    0.388999] clocksource: Switched to clocksource lkl
  [    0.414100] NET: Registered protocol family 2
  [    0.437700] tcp_listen_portaddr_hash hash table entries: 512 (order: 0, 4096 bytes)
  [    0.438199] TCP established hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.439000] TCP bind hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.439600] TCP: Hash tables configured (established 1024 bind 1024)
  [    0.443200] UDP hash table entries: 256 (order: 0, 4096 bytes)
  [    0.444000] UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
  [    0.472100] workingset: timestamp_bits=30 max_order=12 bucket_order=0
  [    0.863100] SGI XFS with ACLs, security attributes, no debug enabled
  [    0.923700] jitterentropy: Initialization failed with host not compliant with requirements: 2
  [    0.924599] io scheduler noop registered
  [    0.924900] io scheduler deadline registered
  [    0.933099] io scheduler cfq registered (default)
  [    0.933500] io scheduler kyber registered
  [    1.633500] NET: Registered protocol family 10
  [    1.658400] Segment Routing with IPv6
  [    1.660800] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
  [    1.674200] ------------[ cut here ]------------
  [    1.675500] WARNING: CPU: 0 PID: 0 at arch/lkl/kernel/setup.c:188   (null)
  [    1.675899] Call Trace:
  [    1.676200] 
  [    1.676999] ---[ end trace 941dc55fe0966cff ]---
  [    1.684299] Warning: unable to open an initial console.
  [    1.685200] This architecture does not have kernel memory protection.
  pthread_join((pthread_t)tid, NULL): No such process
  lkl_start_kernel(&amp;amp;lkl_host_ops, &quot;mem=16M loglevel=8&quot;) = 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;現在の問題点&quot;&gt;現在の問題点&lt;/h2&gt;

&lt;p&gt;以上より，JavaScript上で直接Linux kerenlが起動したことが確認できた．
しかし，現状ではdmesgが出力されるだけで全く実用には適さない．
これには次のような問題点が存在するためである．&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;kthreadの生成に失敗する&lt;/li&gt;
  &lt;li&gt;rootfsのマウントに失敗する&lt;/li&gt;
  &lt;li&gt;init&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;また，Emscriptenでのpthreadのサポートがあまりよくない．
Little Kernel(LK)からsemaphore, mutex, threadの機能を抜き出し，
これらをgreen threadとして扱うLKLを作成した．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/retrage/linux/tree/retrage/fiber&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを用いたLKL.jsを作成することを予定している．&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;JavaScriptで書かれたLinux kernelをLKLからEmscriptenにより生成し，
これが起動し，dmesgが出力されることを確認した．
通常のマシンとJavaScriptではアーキテクチャが大きく異なるが，
いくつかの修正とworkaroundを加えることにより，
多少なりとも動作することがわかった．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/lkl/linux&lt;/li&gt;
  &lt;li&gt;https://github.com/kripken/emscripten&lt;/li&gt;
  &lt;li&gt;https://llvm.org/&lt;/li&gt;
  &lt;li&gt;https://clang.llvm.org/&lt;/li&gt;
  &lt;li&gt;https://wiki.linuxfoundation.org/llvmlinux&lt;/li&gt;
  &lt;li&gt;https://lwn.net/Articles/734071/&lt;/li&gt;
  &lt;li&gt;http://llvm.org/docs/CommandGuide/llvm-link.html&lt;/li&gt;
  &lt;li&gt;https://0xax.gitbooks.io/linux-insides/Concepts/linux-cpu-3.html&lt;/li&gt;
  &lt;li&gt;https://github.com/littlekernel/lk&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Linux kernelを直接JavaScript上で動かした． つまり，JSLinuxのようにEmulatorをJavaScriptで作成し， その上でLinuxを動かすのではなく， JavaScriptで書かれたLinuxを生成し，それを動かす，ということである．</summary></entry><entry><title type="html">HiFive1でZephyr</title><link href="http://localhost:4000/2018/06/26/zephyr-on-hifive1.html" rel="alternate" type="text/html" title="HiFive1でZephyr" /><published>2018-06-26T23:19:50+09:00</published><updated>2018-06-26T23:19:50+09:00</updated><id>http://localhost:4000/2018/06/26/zephyr-on-hifive1</id><content type="html" xml:base="http://localhost:4000/2018/06/26/zephyr-on-hifive1.html">&lt;p&gt;HiFive1とは，SiFiveによって開発されたRISC-V搭載のArduino互換ボードである．
一方，Zephyrは，Linux Foundationにより開発が進められている組み込み向けOSである．
upstreamのZephyrはHiFive1に対応している．
ここでは，ZephyrをHiFive1向けにビルドしてみる．&lt;/p&gt;

&lt;p&gt;ホスト環境はx86_64で&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Distributor ID:	Ubuntu
Description:	Ubuntu 16.04.4 LTS
Release:	16.04
Codename:	xenial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;である．&lt;/p&gt;

&lt;h2 id=&quot;risc-v向けtoolchainのビルド&quot;&gt;RISC-V向けtoolchainのビルド&lt;/h2&gt;

&lt;p&gt;最初にRISC-V向けのtoolchainをビルドする．&lt;/p&gt;

&lt;p&gt;基本的に以下のREADME通り．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/riscv/riscv-gnu-toolchain&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone --recursive https://github.com/riscv/riscv-gnu-toolchain
$ sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/rv32&lt;/code&gt;以下にインストールすることとする．
ターゲットのHiFive1は&lt;code class=&quot;highlighter-rouge&quot;&gt;32-bit RV32IMAC&lt;/code&gt;である．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./configure --prefix=$HOME/rv32 --with-arch=rv32imac --with-abi=ilp32d
$ make linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;zephyrの取得と環境構築&quot;&gt;Zephyrの取得と環境構築&lt;/h2&gt;

&lt;p&gt;以下の通り，必要となるパッケージをインストールする．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://docs.zephyrproject.org/getting_started/installation_linux.html&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/zephyrproject-rtos/zephyr.git
$ sudo apt install git cmake ninja-build gperf ccache doxygen dfu-util device-tree-compiler python3-ply python3-pip python3-setuptools python3-wheel xz-utils file make gcc-multilib autoconf automake libtool
$ cd zephyr
$ pip3 install --user -r scripts/requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;applicationのビルド&quot;&gt;Applicationのビルド&lt;/h2&gt;

&lt;p&gt;以下の通り，環境変数を与える．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd hello/build
$ export ZEPHYR_BASE=~/src/zephyr
$ export BOARD=&quot;hifive1&quot;
$ export ZEPHYR_TOOLCHAIN_VARIANT=riscv32
$ export GCCRISCV32_TOOLCHAIN_PATH=~/rv32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cmake &quot;Unix Makefies&quot; ..
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで，ビルドされ&lt;code class=&quot;highlighter-rouge&quot;&gt;build/zephyr/zephyr.elf&lt;/code&gt;が生成される．&lt;/p&gt;</content><author><name></name></author><summary type="html">HiFive1とは，SiFiveによって開発されたRISC-V搭載のArduino互換ボードである． 一方，Zephyrは，Linux Foundationにより開発が進められている組み込み向けOSである． upstreamのZephyrはHiFive1に対応している． ここでは，ZephyrをHiFive1向けにビルドしてみる．</summary></entry><entry><title type="html">RustでBrainfuck処理系を高速化して遊んでみる</title><link href="http://localhost:4000/2018/06/18/brainfuck-performance.html" rel="alternate" type="text/html" title="RustでBrainfuck処理系を高速化して遊んでみる" /><published>2018-06-18T22:37:02+09:00</published><updated>2018-06-18T22:37:02+09:00</updated><id>http://localhost:4000/2018/06/18/brainfuck-performance</id><content type="html" xml:base="http://localhost:4000/2018/06/18/brainfuck-performance.html">&lt;p&gt;Brainfuckとは&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;lt;+-.,[]&lt;/code&gt;の8つの命令からなるプログラミング言語である．
実装が簡単であるために，すでに多くの言語によって実装がなされている．
ここでは，
&lt;a href=&quot;https://eli.thegreenplace.net/2017/adventures-in-jit-compilation-part-1-an-interpreter.html&quot;&gt;Adventures in JIT compilation: Part 1 - an interpreter&lt;/a&gt;
を参考にC++の実装をRustに移植し，そのパフォーマンスを計測し，比較をして遊んでみる．&lt;/p&gt;

&lt;h2 id=&quot;brainfuckの実装&quot;&gt;Brainfuckの実装&lt;/h2&gt;

&lt;p&gt;実装したBrainfuckは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simpleinterp&lt;/li&gt;
  &lt;li&gt;optinterp&lt;/li&gt;
  &lt;li&gt;optinterp2&lt;/li&gt;
  &lt;li&gt;optinterp3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の4通りがある．&lt;/p&gt;

&lt;p&gt;simpleinterpは素朴な実装であり，高速化はなされていない．
optinterpは&lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt;の対応表を実行時に作成することにより最適化を図っている．
optinterp2は8つの命令に加えて高水準な命令を定義し，
局所的に実行される命令をそれらの命令に置き換えることで最適化を行う．
optinterp3はさらに実行されるループに使われるパターンを高水準な命令に置き換え，最適化を行う．&lt;/p&gt;

&lt;p&gt;実装の概要については
&lt;a href=&quot;https://speakerdeck.com/retrage/brainf-star-ckfalsegao-su-hua-1&quot;&gt;BrainFuckの高速化&lt;/a&gt;
において解説している．&lt;/p&gt;

&lt;h2 id=&quot;ベンチマークと計測方法&quot;&gt;ベンチマークと計測方法&lt;/h2&gt;

&lt;p&gt;先に挙げたブログ内では
&lt;code class=&quot;highlighter-rouge&quot;&gt;mandelbrot&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;factor&lt;/code&gt;の2つのスクリプトをベンチマークに用いている．
ここでもこれらのスクリプトを用いることとする．&lt;/p&gt;

&lt;p&gt;実行速度の計測には&lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt;を用いる．
計測時には&lt;code class=&quot;highlighter-rouge&quot;&gt;--release&lt;/code&gt;オプションを指定し，最適化がなされるようにした．&lt;/p&gt;

&lt;p&gt;実行環境は&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MacBook Air (11-inch, Early 2014)
CPU: 1.7 GHz Intel Core i7
RAM: 8GB 1600 MHz DDR3
OS: macOS High Sierra 10.13.5
cargo: 1.26.0
rustc: 1.26.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;である．&lt;/p&gt;

&lt;h2 id=&quot;mandelbrot&quot;&gt;mandelbrot&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mandelbrot&lt;/code&gt;の場合の比較．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;simpleinterp: cargo run --release mandelbrot.bf  47.78s user 0.14s system 99% cpu 48.037 total
optinterp:    cargo run --release mandelbrot.bf  25.90s user 0.10s system 99% cpu 26.080 total
optinterp2:   cargo run --release mandelbrot.bf  8.30s user 0.08s system 99% cpu 8.443 total
optinterp3:   cargo run --release mandelbrot.bf  6.46s user 0.09s system 99% cpu 6.617 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/bf-perf-mandelbrot.png&quot; alt=&quot;Mandelbrot Performance&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;factor&quot;&gt;factor&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;factor&lt;/code&gt;の場合の比較&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;simpleinterp: cargo run --release factor.bf &amp;lt; prime  17.16s user 0.10s system 99% cpu 17.321 total
optinterp:    cargo run --release factor.bf &amp;lt; prime  9.64s user 0.09s system 99% cpu 9.790 total
optinterp2:   cargo run --release factor.bf &amp;lt; prime  3.45s user 0.09s system 98% cpu 3.611 total
optinterp3:   cargo run --release factor.bf &amp;lt; prime  2.93s user 0.07s system 98% cpu 3.039 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/bf-perf-factor.png&quot; alt=&quot;Factor Performace&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;いずれのスクリプトの場合でも
simpleinterp &amp;gt; optinterp &amp;gt; optinterp2 &amp;gt; optinterp3
の順の実行時間であった．これは元記事とも一致する．
さらに元記事のようにJITなどを用いて最適化することも考えられる．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://eli.thegreenplace.net/2017/adventures-in-jit-compilation-part-1-an-interpreter.html&lt;/li&gt;
  &lt;li&gt;https://github.com/retrage/brainfuck-rs&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Brainfuckとは&amp;gt;&amp;lt;+-.,[]の8つの命令からなるプログラミング言語である． 実装が簡単であるために，すでに多くの言語によって実装がなされている． ここでは， Adventures in JIT compilation: Part 1 - an interpreter を参考にC++の実装をRustに移植し，そのパフォーマンスを計測し，比較をして遊んでみる．</summary></entry><entry><title type="html">8cc in Lazy K</title><link href="http://localhost:4000/2018/04/01/8cc-lazyk.html" rel="alternate" type="text/html" title="8cc in Lazy K" /><published>2018-04-01T21:17:53+09:00</published><updated>2018-04-01T21:17:53+09:00</updated><id>http://localhost:4000/2018/04/01/8cc-lazyk</id><content type="html" xml:base="http://localhost:4000/2018/04/01/8cc-lazyk.html">&lt;p&gt;本日は4月1日で，エイプリルフールの日である．
ただ，書いている現在は午後9時で，ちょっと嘘をつくには遅すぎる時間である．そこで，今回は何にも役に立たないものを作ってみようと思った．
そこで，表題の通り，Lazy Kで書かれた8ccを生成して遊んでみた．&lt;/p&gt;

&lt;h2 id=&quot;生成&quot;&gt;生成&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shinh/bflisp/blob/master/8cc.bf&quot;&gt;ELVMで生成された8cc.bf&lt;/a&gt;
をダウンロード&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/msullivan/LazyK/blob/master/eg/bf2lazy.c&quot;&gt;bf2lazy.c&lt;/a&gt;
をダウンロード&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;2.で1.をLazy Kに変換
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc bf2lazy.c -o bf2lazy
./bf2lazy &amp;lt; 8cc.bf &amp;gt; 8cc.bf.lazy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;生成されたLazy Kのコード
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ du -h 8cc.bf.lazy
 12G	8cc.bf.lazy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;バカみたいにでかくなる．&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;検証&quot;&gt;検証&lt;/h2&gt;
&lt;p&gt;おそらくは正しく動くはずであるが，8cc.bfだけで検証するのが相当かかるようなので，8cc.bf.lazyではさらに検証に時間がかかるはずなので，やらないこととする．&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;適当にやったらLazy Kのコードがバカでかくなった．
生成されたコードは無用の長物なので，どこにもあげないが，簡単に生成できるので，暇な人はやってみよう．&lt;/p&gt;</content><author><name></name></author><summary type="html">本日は4月1日で，エイプリルフールの日である． ただ，書いている現在は午後9時で，ちょっと嘘をつくには遅すぎる時間である．そこで，今回は何にも役に立たないものを作ってみようと思った． そこで，表題の通り，Lazy Kで書かれた8ccを生成して遊んでみた．</summary></entry><entry><title type="html">Google V8 JavaScript EngineでのWebAssemblyのi32.addの実装を見てみる</title><link href="http://localhost:4000/2018/03/04/v8-wasm-i32add-internal.html" rel="alternate" type="text/html" title="Google V8 JavaScript EngineでのWebAssemblyのi32.addの実装を見てみる" /><published>2018-03-04T14:43:55+09:00</published><updated>2018-03-04T14:43:55+09:00</updated><id>http://localhost:4000/2018/03/04/v8-wasm-i32add-internal</id><content type="html" xml:base="http://localhost:4000/2018/03/04/v8-wasm-i32add-internal.html">&lt;p&gt;WebAssembly(以下，wasm)については，既に多くの解説記事が存在するため，
wasmについての説明は割愛する．
ここでは，wasmがどのように実装され，実行されるのかを見ていく．
参照する実装はGoogle V8 JavaScript Engineの
&lt;code class=&quot;highlighter-rouge&quot;&gt;1b254a25163fd84a7696ff62e87cb6dcde7e13f2&lt;/code&gt;である．&lt;/p&gt;

&lt;h2 id=&quot;簡単なコード例&quot;&gt;簡単なコード例&lt;/h2&gt;
&lt;p&gt;次のようなwasmのコードを考える．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(module
    (func (param $lhs i32) (param $rhs i32) (result i32)
        get_local $lhs
        get_local $rhs
        i32.add
    )
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;このコードは2つのパラメータを加算して返す関数を表している．
具体的には，パラメータ$lhsと$rhsをスタックにプッシュし，
i32.addによりそれらの加算を行なっている．&lt;/p&gt;

&lt;h2 id=&quot;i32addの実装からたどる&quot;&gt;i32.addの実装からたどる&lt;/h2&gt;
&lt;p&gt;最初にi32.addはどのように実装されているのかを見ていく．
&lt;code class=&quot;highlighter-rouge&quot;&gt;src/wasm/wasm-interpreter.cc&lt;/code&gt;には次のような定義がある．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define FOREACH_SIMPLE_BINOP(V) \
  V(I32Add, uint32_t, +)        \
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I32Add&lt;/code&gt;とあるので，ここがi32.addの定義であることがわかる．
次に&lt;code class=&quot;highlighter-rouge&quot;&gt;FOREACH_SIMPLE_BINOP&lt;/code&gt;が使われている部分を見る．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define EXECUTE_SIMPLE_BINOP(name, ctype, op)               \
  case kExpr##name: {                                       \
    WasmValue rval = Pop();                                 \
    WasmValue lval = Pop();                                 \
    auto result = lval.to&amp;lt;ctype&amp;gt;() op rval.to&amp;lt;ctype&amp;gt;();     \
    possible_nondeterminism_ |= has_nondeterminism(result); \
    Push(WasmValue(result));                                \
    break;                                                  \
  }
          FOREACH_SIMPLE_BINOP(EXECUTE_SIMPLE_BINOP)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXECUTE_SIMPLE_BINOP&lt;/code&gt;を引数として&lt;code class=&quot;highlighter-rouge&quot;&gt;FOREACH_SIMPLE_BINOP&lt;/code&gt;を
呼び出していることがわかる．
ここでは，何らかのcase文となっておりその中で，
スタックから値をポップしrvalとlvalに代入し，与えられたopで計算を行い，
resultに代入し，値をプッシュしていることがわかる．
つまり，ここで実際の計算が行われていることがわかる．&lt;/p&gt;

&lt;p&gt;では，このcase文の大元を見てみる．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      switch (orig) {
        case kExprNop:
          break;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ここから，origにより判定していることがわかる．
origは&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      byte orig = code-&amp;gt;start[pc];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;であり，codeは&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  void Execute(InterpreterCode* code, pc_t pc, int max) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;Execute&lt;/code&gt;の引数であることがわかる．
さらに，&lt;code class=&quot;highlighter-rouge&quot;&gt;Execute&lt;/code&gt;は&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  WasmInterpreter::State Run(int num_steps = -1) {
    DCHECK(state_ == WasmInterpreter::STOPPED ||
           state_ == WasmInterpreter::PAUSED);
    DCHECK(num_steps == -1 || num_steps &amp;gt; 0);
    if (num_steps == -1) {
      TRACE(&quot;  =&amp;gt; Run()\n&quot;);
    } else if (num_steps == 1) {
      TRACE(&quot;  =&amp;gt; Step()\n&quot;);
    } else {
      TRACE(&quot;  =&amp;gt; Run(%d)\n&quot;, num_steps);
    }
    state_ = WasmInterpreter::RUNNING;
    Execute(frames_.back().code, frames_.back().pc, num_steps);
    // If state_ is STOPPED, the current activation must be fully unwound.
    DCHECK_IMPLIES(state_ == WasmInterpreter::STOPPED,
                   current_activation().fp == frames_.size());
    return state_;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;より&lt;code class=&quot;highlighter-rouge&quot;&gt;WasmInterpreter::State Run&lt;/code&gt;から呼び出されている．
コードを追うのは一旦このあたりでやめておく．&lt;/p&gt;

&lt;h2 id=&quot;スタックの実装&quot;&gt;スタックの実装&lt;/h2&gt;
&lt;p&gt;wasmはスタックマシンとなっている．ここでは，これまでで出てきた関数
&lt;code class=&quot;highlighter-rouge&quot;&gt;Pop&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;Push&lt;/code&gt;からスタックの実装をみていく．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  WasmValue Pop() {
    DCHECK_GT(frames_.size(), 0);
    DCHECK_GT(StackHeight(), frames_.back().llimit());  // can't pop into locals
    return *--sp_;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  void Push(WasmValue val) {
    DCHECK_NE(kWasmStmt, val.type());
    DCHECK_LE(1, stack_limit_ - sp_);
    *sp_++ = val;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Pop&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Push&lt;/code&gt;，いずれも実装はたったの1行だけであることがわかる．&lt;/p&gt;

&lt;p&gt;以上，Google V8 JavaScript Engineでのwasmの実装を簡単に見ていった．
正直なところ，最適化などで非常に複雑かつ高度な実装になっていると思っていたが，
今回読んだ部分はナイーブな実装となっており，読みやすいといえる．
一方で，JavaScriptとのインターフェースとなる部分は相当複雑であることが
容易に想像できる．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://webassembly.github.io/spec/core/index.html&lt;/li&gt;
  &lt;li&gt;https://developer.mozilla.org/ja/docs/WebAssembly/Understanding_the_text_format&lt;/li&gt;
  &lt;li&gt;https://github.com/v8/v8/blob/master/src/wasm/wasm-interpreter.cc&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">WebAssembly(以下，wasm)については，既に多くの解説記事が存在するため， wasmについての説明は割愛する． ここでは，wasmがどのように実装され，実行されるのかを見ていく． 参照する実装はGoogle V8 JavaScript Engineの 1b254a25163fd84a7696ff62e87cb6dcde7e13f2である．</summary></entry><entry><title type="html">Rustでcoreboot payload</title><link href="http://localhost:4000/2017/12/18/coreboot-ffi.html" rel="alternate" type="text/html" title="Rustでcoreboot payload" /><published>2017-12-18T23:28:27+09:00</published><updated>2017-12-18T23:28:27+09:00</updated><id>http://localhost:4000/2017/12/18/coreboot-ffi</id><content type="html" xml:base="http://localhost:4000/2017/12/18/coreboot-ffi.html">&lt;p&gt;この記事は&lt;a href=&quot;https://adventar.org/calendars/2282&quot;&gt;自作OS Advent Calendar&lt;/a&gt;
の19日目の記事として書かれた．
ここでは，corebootのpayloadをRustを使って作ってみる．
corebootはファームウェアなのでOSとは異なるが，そこはご愛嬌ということで．&lt;/p&gt;

&lt;h2 id=&quot;corebootについて&quot;&gt;corebootについて&lt;/h2&gt;
&lt;p&gt;corebootとは既存のプロプライエタリなBIOSを置き換えるBIOSと
そのプロジェクトのことである．
corebootは大きくcoreboot本体とPayloadの2つがあり，
Payloadには様々なソフトウェアを載せることができる．
今回はPayloadをRustで作ってみようということである．
ここでは，Libpayloadと呼ばれるPayload向けのライブラリの関数を
Rustから呼び出してみる．&lt;/p&gt;

&lt;h2 id=&quot;rustでのベアメタルプログラミング&quot;&gt;Rustでのベアメタルプログラミング&lt;/h2&gt;
&lt;p&gt;Rustでのベアメタルプログラミングについてはκeenさんの&lt;a href=&quot;http://keens.github.io/blog/2016/05/04/rustdebeametaruraspberry_pinolchika/&quot;&gt;記事&lt;/a&gt;
が詳しい．ほとんどここを参考にした．&lt;/p&gt;

&lt;p&gt;ホストの環境はx86_64であるとする．
最初に&lt;code class=&quot;highlighter-rouge&quot;&gt;cargo new --bin cb-ffi&lt;/code&gt;とかやって新規のCargoプロジェクトを作成する．&lt;/p&gt;

&lt;p&gt;次に以下のような内容で&lt;code class=&quot;highlighter-rouge&quot;&gt;main.rs&lt;/code&gt;を書く．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#![feature(lang_items, asm)]
#![crate_type = &quot;staticlib&quot;]
#![no_std]

#[link(name = &quot;libpayload&quot;, kind = &quot;static&quot;)]
extern {
    fn putchar(c: u32);
}

#[no_mangle]
pub extern fn main() {
    loop{
        unsafe { putchar(65) };
    }   
}

#[lang = &quot;eh_personality&quot;]
extern fn eh_personality() {}

#[lang = &quot;panic_fmt&quot;]
extern fn panic_fmt() {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ほとんど上記の記事と同じであるが，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#[link(name = &quot;libpayload&quot;, kind = &quot;static&quot;)]
extern {
    fn putchar(c: u32);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;でlibpayloadの&lt;code class=&quot;highlighter-rouge&quot;&gt;putchar&lt;/code&gt;の参照を定義しており，&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#[no_mangle]
pub extern fn main() {
    loop{
        unsafe { putchar(65) };
    }   
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;で上記のputcharを呼び出していることがわかる．&lt;/p&gt;

&lt;p&gt;次に&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rustc --target i686-unknown-linux-gnu --emit=obj main.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とかやって&lt;code class=&quot;highlighter-rouge&quot;&gt;main.o&lt;/code&gt;を作成する．&lt;/p&gt;

&lt;p&gt;最後に，あらかじめ作成しておいた&lt;code class=&quot;highlighter-rouge&quot;&gt;libpayload.a&lt;/code&gt;とリンクする．
ここでは，Libpayloadの&lt;code class=&quot;highlighter-rouge&quot;&gt;lpgcc&lt;/code&gt;を用いる．Libpayloadについては
&lt;a href=&quot;https://www.coreboot.org/Libpayload&quot;&gt;ここ&lt;/a&gt;を参照のこと．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/src/coreboot/payloads/libpayload/bin/lpgcc main.o libpayload.a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;できた&lt;code class=&quot;highlighter-rouge&quot;&gt;a.out&lt;/code&gt;をcorebootのPayloadに指定すればできあがり．&lt;/p&gt;

&lt;p&gt;以上，ファームウェアといいつつも，
ただのベアメタルプログラミングであることがわかる．
しかも一切アセンブリに触れずにできていることからも簡単であると言える．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;http://keens.github.io/blog/2016/05/04/rustdebeametaruraspberry_pinolchika/&lt;/li&gt;
  &lt;li&gt;https://www.coreboot.org/Libpayload&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">この記事は自作OS Advent Calendar の19日目の記事として書かれた． ここでは，corebootのpayloadをRustを使って作ってみる． corebootはファームウェアなのでOSとは異なるが，そこはご愛嬌ということで．</summary></entry><entry><title type="html">Linux kernelの5-Level Paging有効化部分を読んでみる</title><link href="http://localhost:4000/2017/12/13/five-level-paging.html" rel="alternate" type="text/html" title="Linux kernelの5-Level Paging有効化部分を読んでみる" /><published>2017-12-13T20:22:09+09:00</published><updated>2017-12-13T20:22:09+09:00</updated><id>http://localhost:4000/2017/12/13/five-level-paging</id><content type="html" xml:base="http://localhost:4000/2017/12/13/five-level-paging.html">&lt;p&gt;この記事は&lt;a href=&quot;https://qiita.com/advent-calendar/2017/linux&quot;&gt;Linux Advent Calendar&lt;/a&gt; 
14日目の記事として書かれた．
本記事ではLinuxにおける5-Level Paging(la57 paging)の実装を見ていく．&lt;/p&gt;

&lt;h2 id=&quot;5-level-pagingとは&quot;&gt;5-Level Pagingとは&lt;/h2&gt;
&lt;p&gt;これまで，x86_64では物理アドレス下位48bitのみが使用されてきた．
このため，64TiBの物理アドレス空間と256TiBの仮想アドレス空間に限られてきた．
Intelはこれを拡張し，物理アドレス下位52bitへと拡張させた．
これにより，4PiBの物理アドレス空間と128PiBの仮想アドレス空間が利用できるようになった．
この拡張に対応するため新たに導入されたのが，ここで紹介する5-Level Pagingである．
基本的な考え方は4-Level Pagingと同一であり，
PML4にさらに上位にPML5が追加された形となっている．&lt;/p&gt;

&lt;h2 id=&quot;サポート状況について&quot;&gt;サポート状況について&lt;/h2&gt;
&lt;p&gt;現在，一部のサーバが5-Level Pagingに対応しているようである．
では，個人では触ることができないか，というとそんなことはなく，
QEMUのmasterブランチには5-Level Pagingのエミュレーションが
&lt;a href=&quot;https://github.com/qemu/qemu/commit/6c7c3c21f95dd9af8a0691c0dd29b07247984122#diff-0517790436e7f5831f2b14f1e93ac740&quot;&gt;取り込まれている&lt;/a&gt;．
このため，対応ハードウェアを持っていないくても楽しむことができる．
面白いことに，Library OSの1つであるOSvにおいて，
Avi Kivityさんが5-Level Paging対応のパッチを
&lt;a href=&quot;https://groups.google.com/forum/#!topic/osv-dev/9Y1q0j5qhXI&quot;&gt;投稿している&lt;/a&gt;．&lt;/p&gt;

&lt;h2 id=&quot;5-level-pagingの確認&quot;&gt;5-Level Pagingの確認&lt;/h2&gt;
&lt;p&gt;Linux kernerでコンパイル時に5-Level Pagingを有効にするかを決めているので，
あまり関係がないが一応記しておく．
5-Level Pagingの機能を持っているかどうかはCPUID命令を用いることで確かめることができる．
具体的には&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    mov $7, %eax
    mov $0, %ecx
    cpuid
    test $1&amp;lt;&amp;lt;16, %ecx /* ? */
    jz .no_5level_paging
    /* 以下，5Level Paging有効化のコード */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;となる．&lt;/p&gt;

&lt;h2 id=&quot;5-level-pagingの有効化&quot;&gt;5-Level Pagingの有効化&lt;/h2&gt;
&lt;p&gt;次に実際に5-Level Pagingを以下のような流れで有効にする．&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;現在のPagingとmodeを確認&lt;/li&gt;
  &lt;li&gt;long modeの場合はcompatibility modeなどに切り替える&lt;/li&gt;
  &lt;li&gt;Pagingを無効化&lt;/li&gt;
  &lt;li&gt;PAEとLA57の有効化&lt;/li&gt;
  &lt;li&gt;WRMSRでIA32_EFER.LMEを設定&lt;/li&gt;
  &lt;li&gt;CR3が5-Level Pagingを指すように設定&lt;/li&gt;
  &lt;li&gt;Pagingの有効化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここで注意したい点は，long modeでは直接LA57を変更できない点である．
long modeでLA57を変更しようとした場合，general protection exceptionが発生するようである．&lt;/p&gt;

&lt;h2 id=&quot;linux-kernelでの実装&quot;&gt;Linux kernelでの実装&lt;/h2&gt;
&lt;p&gt;では実際のコードを見ていく．
なお，参照するkernelはtorvalds/linux v4.14 bebc608 である．
&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/x86/boot/compressed/head_64.S&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;startup_64&lt;/code&gt;のコードを見ていく．
おおよそコード内のコメントにある通りであるが，簡単コメントしていく．
ここでは，long modeが有効になっており，まだカーネルが圧縮されている状態である．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	movq	%cr4, %rax
	testl	$X86_CR4_LA57, %eax
	jnz	lvl5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;最初にcr4レジスタの値から5-Level Pagingが有効であるかを確認する．
有効でなければ以下を行う．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	leaq	lvl5_pgtable(%rbx), %rdi
	xorq	%rax, %rax
	movq	$(PAGE_SIZE/8), %rcx
	rep	stosq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;追加のPML5のテーブル(lvl5_pgtable)をクリアする．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	movq	%cr3, %rdi
	leaq	0x7 (%rdi), %rax
	movq	%rax, lvl5_pgtable(%rbx)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ここでCR3を最初かつ勇逸のトップレベルページテーブルのエントリとするらしい．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	pushq	$__KERNEL32_CS
	leaq	compatible_mode(%rip), %rax
	pushq	%rax
	lretq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;compatibility modeに移行&lt;/p&gt;

&lt;p&gt;compatible_modeの内容は次にようになっている．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	movl	%cr0, %eax
	btrl	$X86_CR0_PG_BIT, %eax
	movl	%eax, %cr0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Pagingを無効&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	leal	lvl5_pgtable(%ebx), %eax
	movl	%eax, %cr3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;CR3がPML5のテーブルを指すように設定&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	movl	%cr4, %eax
	orl	$(X86_CR4_PAE | X86_CR4_LA57), %eax
	movl	%eax, %cr4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;PAEとLA57の有効化&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	movl	$(X86_CR0_PG | X86_CR0_PE), %eax
	movl	%eax, %cr0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Pagingの有効化&lt;/p&gt;

&lt;p&gt;以上のような流れとなっている．
意外と短くまとまっていることがわかる．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://software.intel.com/sites/default/files/managed/2b/80/5-level_paging_white_paper.pdf&lt;/li&gt;
  &lt;li&gt;https://lwn.net/Articles/708526/&lt;/li&gt;
  &lt;li&gt;https://lwn.net/Articles/717293/&lt;/li&gt;
  &lt;li&gt;https://lwn.net/Articles/716324/&lt;/li&gt;
  &lt;li&gt;https://github.com/qemu/qemu/commit/6c7c3c21f95dd9af8a0691c0dd29b07247984122#diff-0517790436e7f5831f2b14f1e93ac740&lt;/li&gt;
  &lt;li&gt;https://groups.google.com/forum/#!topic/osv-dev/9Y1q0j5qhXI&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">この記事はLinux Advent Calendar 14日目の記事として書かれた． 本記事ではLinuxにおける5-Level Paging(la57 paging)の実装を見ていく．</summary></entry><entry><title type="html">EFI stubなLinux kernelのヘッダ部分を見てみる</title><link href="http://localhost:4000/2017/12/09/efi-stub-header.html" rel="alternate" type="text/html" title="EFI stubなLinux kernelのヘッダ部分を見てみる" /><published>2017-12-09T00:12:14+09:00</published><updated>2017-12-09T00:12:14+09:00</updated><id>http://localhost:4000/2017/12/09/efi-stub-header</id><content type="html" xml:base="http://localhost:4000/2017/12/09/efi-stub-header.html">&lt;p&gt;EFI環境においてLinux kernelの起動方法には
ブートローダを用いる方法とEFI stubの2通りがある．
EFI stubではbzImageに対してEFI Application相当のヘッダを付加することで
EFIから直接kernelを起動する．
ここでは，EFI stubなLinux kernelのヘッダが実際に見ることで
どのように直接起動できるようにしているかを見ていく．
実際の記事を書いたのが相当前なので，ここではLinux kernel 4.5を対象としている．&lt;/p&gt;

&lt;p&gt;最初に&lt;code class=&quot;highlighter-rouge&quot;&gt;CONFIG_EFI_STUB=y&lt;/code&gt;としてビルドしたときのbzImageのhexdumpの一部を以下に示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000: 4d5a ea07 00c0 078c c88e d88e c08e d031  MZ.............1
00000010: e4fb fcbe 4000 ac20 c074 09b4 0ebb 0700  ....@.. .t......
00000020: cd10 ebf2 31c0 cd16 cd19 eaf0 ff00 f000  ....1...........
00000030: 0000 0000 0000 0000 0000 0000 8200 0000  ................
00000040: 5573 6520 6120 626f 6f74 206c 6f61 6465  Use a boot loade
00000050: 722e 0d0a 0a52 656d 6f76 6520 6469 736b  r....Remove disk
00000060: 2061 6e64 2070 7265 7373 2061 6e79 206b   and press any k
00000070: 6579 2074 6f20 7265 626f 6f74 2e2e 2e0d  ey to reboot....
00000080: 0a00 5045 0000 6486 0400 0000 0000 0000  ..PE..d.........
00000090: 0000 0100 0000 a000 0602 0b02 0214 4020  ..............@ 
000000a0: 5f00 0000 0000 c0ad e800 1040 0000 0002  _..........@....
000000b0: 0000 0000 0000 0000 0000 2000 0000 2000  .......... ... .
000000c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000d0: 0000 00d0 4701 0002 0000 0000 0000 0a00  ....G...........
000000e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000f0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000100: 0000 0000 0000 0600 0000 0000 0000 0000  ................
00000110: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000120: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000130: 0000 0000 0000 0000 0000 2e73 6574 7570  ...........setup
00000140: 0000 e03b 0000 0002 0000 e03b 0000 0002  ...;.......;....
00000150: 0000 0000 0000 0000 0000 0000 0000 2000  .............. .
00000160: 5060 2e72 656c 6f63 0000 2000 0000 e03d  P`.reloc.. ....=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;EFI ApplicationはPEフォーマットを採用している．
PEフォーマットではDOSヘッダが最初にあり，次にPEヘッダが置かれている．
それぞれのシグネチャを手がかりに先のhexdumpの結果を見ていく．
最初に0x00に0x4d5a(=”MZ”)があり，DOSヘッダであることを示している．
次に0x3cを見ると，0x0082があり，これがPEヘッダの先頭位置を表している．
0x0082には0x5045(=”PE”)があり．確かにこれがPEヘッダの始まりであることがわかる．
以下、PEヘッダの定義が続くが、ここでは深追いしない．
以上のように，確かにbzImageがEFI Applicationの形式となっていることがわかる．&lt;/p&gt;

&lt;p&gt;ところで．bzImageはgccなどの通常のツールチェーンを用いてビルドされるため，
直接PEフォーマットを出力することはできない．
次にどのようにしてPEフォーマットを出力するのかを見ていく．
最初に&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/x86/boot/Makefile&lt;/code&gt;の一部を示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sed-zoffset := -e 's/^\([0-9a-fA-F]*\) [ABCDGRSTVW] \(startup_32\|startup_64\|efi32_stub_entry\|efi64_stub_entry\|efi_pe_entry\|input_data\|_end\|z_.*\)$$/\#define ZO_\2 0x\1/p'

quiet_cmd_zoffset = ZOFFSET $@
      cmd_zoffset = $(NM) $&amp;lt; | sed -n $(sed-zoffset) &amp;gt; $@

targets += zoffset.h
$(obj)/zoffset.h: $(obj)/compressed/vmlinux FORCE
        $(call if_changed,zoffset)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここではsedを用いて&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/x86/boot/compressed/vmlinux&lt;/code&gt;のnmの出力結果から
エントリポイントとなるシンボルのアドレスをzoffset.hに出力していることがわかる．
次に出力されたzoffset.hの一部を示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define ZO__end 0x0000000000609000
#define ZO_efi64_stub_entry 0x0000000000000390
#define ZO_efi_pe_entry 0x0000000000000210
#define ZO_input_data 0x00000000000003b4
#define ZO_startup_32 0x0000000000000000
#define ZO_startup_64 0x0000000000000200
#define ZO_z_extract_offset 0x0000000000e74000
#define ZO_z_extract_offset_negative 0xffffffffff18c000
#define ZO_z_input_len 0x00000000005e4c23
#define ZO_z_output_len 0x00000000014468b8
#define ZO_z_run_size 0x0000000001553000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ここで特に重要なのは&lt;code class=&quot;highlighter-rouge&quot;&gt;ZO_efi_pe_entry&lt;/code&gt;である．これは後で利用される．
次に&lt;code class=&quot;highlighter-rouge&quot;&gt;src/arch/x86/boot/tools/build.c&lt;/code&gt;(以下，&lt;code class=&quot;highlighter-rouge&quot;&gt;build.c&lt;/code&gt;)を利用する．
これはbzImageを作成するためのツールである．
&lt;code class=&quot;highlighter-rouge&quot;&gt;build.c&lt;/code&gt;は以下の4つの引数をとる．&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;setup.bin&lt;/li&gt;
  &lt;li&gt;vmlinux.bin&lt;/li&gt;
  &lt;li&gt;zoffset.h&lt;/li&gt;
  &lt;li&gt;出力先&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.c&lt;/code&gt;の処理を実際にみていく．
ここではPEヘッダのエントリポイントの設定に注目する．
&lt;code class=&quot;highlighter-rouge&quot;&gt;build.c&lt;/code&gt;の一部を示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void update_pecoff_text(unsigned int text_start, unsigned int file_sz)
{
        unsigned int pe_header;
        unsigned int text_sz = file_sz - text_start;

        pe_header = get_unaligned_le32(&amp;amp;buf[0x3c]);

        /*
         * Size of code: Subtract the size of the first sector (512 bytes)
         * which includes the header.
         */
        put_unaligned_le32(file_sz - 512, &amp;amp;buf[pe_header + 0x1c]);

        /*
         * Address of entry point for PE/COFF executable
         */
        put_unaligned_le32(text_start + efi_pe_entry, &amp;amp;buf[pe_header + 0x28]);

        update_pecoff_section_header(&quot;.text&quot;, text_start, text_sz);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;bufはsetup.binをベースにbzImageの最初の512byteとなる部分である．
pe_headerはbufの0x3cにある32bitを取得する．先のバイナリでは0x0082となる．
次にPEヘッダの&lt;code class=&quot;highlighter-rouge&quot;&gt;Size of code&lt;/code&gt;をbufに書き込む．&lt;/p&gt;

&lt;p&gt;次にPEヘッダの&lt;code class=&quot;highlighter-rouge&quot;&gt;Address Of Entry Point&lt;/code&gt;をbufに書き込む．
text_startはrelocを考慮したときのsetup.binのサイズであり，
efi_pe_entryは先のzoffset.hから得た&lt;code class=&quot;highlighter-rouge&quot;&gt;ZO_efi_pe_entry&lt;/code&gt;の値，0x0210となる．
書き込む位置は&lt;code class=&quot;highlighter-rouge&quot;&gt;[pe_header + 0x28] = 0x82 + 0x28 = 0xaa&lt;/code&gt;となる．
最初に示したhexdumpの0xaaをみると、0x4010が書き込まれている．
ここから，EFIがbzImageを0x4010から実行されることがわかる．&lt;/p&gt;

&lt;p&gt;まとめると，EFIはEFI Applicationをロードすると，
PEヘッダに記載されている&lt;code class=&quot;highlighter-rouge&quot;&gt;Address Of Entry Point&lt;/code&gt;で指定されているアドレスから実行する．
EFI stubなLinux kernelのbzImageの場合，efi_pe_entryから実行されるため，
efi_pe_entryのアドレスが&lt;code class=&quot;highlighter-rouge&quot;&gt;Address Of Entry Point&lt;/code&gt;に入っている必要がある．
&lt;code class=&quot;highlighter-rouge&quot;&gt;build.c&lt;/code&gt;はこのアドレスをsetup.bin，vmlinux.binから算出し，埋め込んでいることがわかった．&lt;/p&gt;

&lt;p&gt;最後にbzImageの0x4010以降とefi_pe_entryとを比較してみる．&lt;/p&gt;

&lt;p&gt;bzImageのhexdumpの結果を示す．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00004010: 4889 0d81 e15e 0048 8915 82e1 5e00 488d  H....^.H....^.H.
00004020: 0573 e15e 0048 8905 64e1 5e00 e800 0000  .s.^.H..d.^.....
00004030: 005d 4881 ed31 0200 0048 012d b0e1 5e00  .]H..1...H.-..^.
00004040: 4889 c7e8 a8a1 5e00 4883 f800 743f 4889  H.....^.H...t?H.
00004050: c648 8d05 a8fd ffff 8986 1402 0000 eb18  .H..............
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/x86/boot/compressed/head64.o&lt;/code&gt;のobjdumpの結果を示す．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0000000000000210 &amp;lt;efi_pe_entry&amp;gt;:
 210:   48 89 0d 00 00 00 00    mov    %rcx,0x0(%rip)        # 217 &amp;lt;efi_pe_entry+0x7&amp;gt;
 217:   48 89 15 00 00 00 00    mov    %rdx,0x0(%rip)        # 21e &amp;lt;efi_pe_entry+0xe&amp;gt;
 21e:   48 8d 05 00 00 00 00    lea    0x0(%rip),%rax        # 225 &amp;lt;efi_pe_entry+0x15&amp;gt;
 225:   48 89 05 00 00 00 00    mov    %rax,0x0(%rip)        # 22c &amp;lt;efi_pe_entry+0x1c&amp;gt;
 22c:   e8 00 00 00 00          callq  231 &amp;lt;efi_pe_entry+0x21&amp;gt;
 231:   5d                      pop    %rbp
 232:   48 81 ed 00 00 00 00    sub    $0x0,%rbp
 239:   48 01 2d 00 00 00 00    add    %rbp,0x0(%rip)        # 240 &amp;lt;efi_pe_entry+0x30&amp;gt;
 240:   48 89 c7                mov    %rax,%rdi
 243:   e8 00 00 00 00          callq  248 &amp;lt;efi_pe_entry+0x38&amp;gt;
 248:   48 83 f8 00             cmp    $0x0,%rax
 24c:   74 3f                   je     28d &amp;lt;fail&amp;gt;
 24e:   48 89 c6                mov    %rax,%rsi
 251:   48 8d 05 00 00 00 00    lea    0x0(%rip),%rax        # 258 &amp;lt;efi_pe_entry+0x48&amp;gt;
 258:   89 86 14 02 00 00       mov    %eax,0x214(%rsi)
 25e:   eb 18                   jmp    278 &amp;lt;handover_entry+0x18&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;おまけ&quot;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;参考までにEDK2でビルドしたHello WorldをUEFI Shell上で出力するEFI Applicationのhexdumpの結果を以下に示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000: 4d5a 0000 0000 0000 0000 0000 0000 0000  MZ..............
00000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000030: 0000 0000 0000 0000 0000 0000 8000 0000  ................
00000040: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000050: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000060: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000070: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000080: 5045 0000 6486 0300 0000 0000 0000 0000  PE..d...........
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここからわかるように，EFIではDOSヘッダについてはSignatureと0x3c位置の部分しか見ないようである．
そのため，先のbzImageではこの他の領域をLegacy Bootのために有効活用しているようである．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://upload.wikimedia.org/wikipedia/commons/7/70/Portable_Executable_32_bit_Structure_in_SVG.svg&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">EFI環境においてLinux kernelの起動方法には ブートローダを用いる方法とEFI stubの2通りがある． EFI stubではbzImageに対してEFI Application相当のヘッダを付加することで EFIから直接kernelを起動する． ここでは，EFI stubなLinux kernelのヘッダが実際に見ることで どのように直接起動できるようにしているかを見ていく． 実際の記事を書いたのが相当前なので，ここではLinux kernel 4.5を対象としている．</summary></entry><entry><title type="html">BitVisorのEFI向け VMM Loader(1st stage)のコードを読んでみる</title><link href="http://localhost:4000/2017/12/07/bitvisor-efi-loader.html" rel="alternate" type="text/html" title="BitVisorのEFI向け VMM Loader(1st stage)のコードを読んでみる" /><published>2017-12-07T02:05:28+09:00</published><updated>2017-12-07T02:05:28+09:00</updated><id>http://localhost:4000/2017/12/07/bitvisor-efi-loader</id><content type="html" xml:base="http://localhost:4000/2017/12/07/bitvisor-efi-loader.html">&lt;p&gt;この記事は
&lt;a href=&quot;https://qiita.com/advent-calendar/2017/bitvisor&quot;&gt;BitVisor Advent Calendar&lt;/a&gt;
7日目の記事として書かれた．
ここでは，BitVisorのEFI向け VMMLoader(1st stage)のコードを読んでみる．&lt;/p&gt;

&lt;p&gt;EFI Loaderのコードは
&lt;a href=&quot;https://bitbucket.org/bitvisor/bitvisor/src/34fa14de2421cd3564323eec998f8e0c465e99a0/boot/uefi-loader/loadvmm.c?at=default&amp;amp;fileviewer=file-view-default&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boot/uefi-loader/loadvmm.c&lt;/code&gt;&lt;/a&gt;
にある．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;efi_main&lt;/code&gt;をみていく．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        status = systab-&amp;gt;BootServices-&amp;gt;
                HandleProtocol (image, &amp;amp;LoadedImageProtocol, &amp;amp;tmp);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;LoadedImageProtocolがサポートされているかを確認．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        status = systab-&amp;gt;BootServices-&amp;gt;
                HandleProtocol (loaded_image-&amp;gt;DeviceHandle,
                                &amp;amp;FileSystemProtocol, &amp;amp;tmp);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;FileSystemProtocolがサポートされているかを確認．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        create_file_path (loaded_image-&amp;gt;FilePath, L&quot;bitvisor.elf&quot;, file_path,
                          sizeof file_path / sizeof file_path[0]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ここで，&lt;code class=&quot;highlighter-rouge&quot;&gt;bitvisor.elf&lt;/code&gt;までのパスを作成する．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        status = fileio-&amp;gt;OpenVolume (fileio, &amp;amp;file);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ボリュームを開く．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        status = file-&amp;gt;Open (file, &amp;amp;file2, file_path, EFI_FILE_MODE_READ, 0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;先で作成したファイルパスのファイルを開く．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        status = systab-&amp;gt;BootServices-&amp;gt;AllocatePages (AllocateMaxAddress,
                                                      EfiLoaderData, 0x10,
                                                      &amp;amp;paddr);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;4KiB*0x10=64KiBだけページをAllocateする．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	readsize = 0x10000;
	status = file2-&amp;gt;Read (file2, &amp;amp;readsize, (void *)paddr);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bitvisor.elf&lt;/code&gt;のうち0x10000だけpaddrに展開する．
このあたりのマジックナンバーについては榮樂さんによる&lt;a href=&quot;https://www.bitvisor.org/summit2/slides/bitvisor-summit-2-03-eiraku.pdf&quot;&gt;スライド&lt;/a&gt;
に詳しく書いてある．
それによれば，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BitVisorのVMMローダ(2nd stage)ではELFバイナリの先頭64KiB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(20ページ目)
とある．この部分はその先頭64KiBを読み出していると考えられる．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	entry = *(uint32_t *)(paddr + 0x18);
	entry_func = (entry_func_t *)(paddr + (entry &amp;amp; 0xFFFF));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ELFの先頭アドレスからエントリポイントを計算し，&lt;code class=&quot;highlighter-rouge&quot;&gt;entry_func&lt;/code&gt;とする．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	struct bitvisor_boot boot_ext = {
		UEFI_BITVISOR_BOOT_UUID,
		paddr,
		readsize,
		file2
	};
	void *boot_exts[] = {
		&amp;amp;boot_ext,
		NULL
	};

	boot_error = entry_func (image, systab, boot_exts);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;必要な情報を構造体に抱えて&lt;code class=&quot;highlighter-rouge&quot;&gt;entry_func&lt;/code&gt;に飛び込む．&lt;/p&gt;

&lt;p&gt;以上を簡単にまとめると，
ファイルの読み出し-&amp;gt;エントリポイントの計算-&amp;gt;エントリポイントへのジャンプ
のようになっている．
ELFのパースを行わないことで，簡素な実装となっていることが見て取れる．
また，&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;EFIアプリケーションの開発と言えばEDK2やgnu-efiがあるが，
BitVisorのEFI Loaderの場合，EDKからのヘッダを利用し，
&lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64-w64-mingw32-gcc&lt;/code&gt;によりコンパイルを行う．
このため依存関係が少なくコンパイルが容易であると言える．&lt;/p&gt;

&lt;p&gt;BitVisorの&lt;code class=&quot;highlighter-rouge&quot;&gt;uefi-loader&lt;/code&gt;に加え，品川先生の&lt;a href=&quot;https://github.com/utshina/uefi-simple&quot;&gt;uefi-simple&lt;/a&gt;に刺激を受け，
&lt;a href=&quot;https://github.com/retrage/uefi-sample&quot;&gt;uefi-sample&lt;/a&gt;
というサンプルを作成した．
これにより，EDK2やgnu-efiに頼ることなくEFIアプリケーションを作成することができる．&lt;/p&gt;

&lt;p&gt;ここでは，BitVisor のVMMローダ(1st stage)のコードを読んだ．
機会があれば，2nd stageのコードも読んでみたい．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://bitbucket.org/bitvisor/bitvisor&lt;/li&gt;
  &lt;li&gt;https://www.bitvisor.org/summit2/slides/bitvisor-summit-2-03-eiraku.pdf&lt;/li&gt;
  &lt;li&gt;https://qiita.com/hdk_2/items/b73161f08fefce0d99c3&lt;/li&gt;
  &lt;li&gt;https://github.com/utshina/uefi-simple&lt;/li&gt;
  &lt;li&gt;https://github.com/retrage/uefi-sample&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">この記事は BitVisor Advent Calendar 7日目の記事として書かれた． ここでは，BitVisorのEFI向け VMMLoader(1st stage)のコードを読んでみる．</summary></entry></feed>