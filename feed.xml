<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://retrage.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://retrage.github.io/" rel="alternate" type="text/html" /><updated>2020-02-20T14:17:41+00:00</updated><id>https://retrage.github.io/feed.xml</id><title type="html">retrage.github.io</title><subtitle>Blog posts by @retrage</subtitle><entry><title type="html">Debugging OVMF with GDB</title><link href="https://retrage.github.io/2019/12/05/debugging-ovmf-en.html" rel="alternate" type="text/html" title="Debugging OVMF with GDB" /><published>2019-12-05T08:26:19+00:00</published><updated>2019-12-05T08:26:19+00:00</updated><id>https://retrage.github.io/2019/12/05/debugging-ovmf-en</id><content type="html" xml:base="https://retrage.github.io/2019/12/05/debugging-ovmf-en.html">&lt;p&gt;In this blog post, 
I will describe how to debug OVMF using GDB
without any special tool unlike another post[1].&lt;/p&gt;

&lt;h2 id=&quot;code-mapping-in-uefi&quot;&gt;Code Mapping in UEFI&lt;/h2&gt;

&lt;p&gt;On x64 UEFI, it provides flat single address memory space
and place the firmware itself and UEFI images on the space
without any memory protection.
In this way, we can do source code level debugging
any UEFI code with debugger.
On OVMF, each feature is modularized
and the module is loaded as UEFI image.
BootServices is included in &lt;code class=&quot;highlighter-rouge&quot;&gt;DxeCore.efi&lt;/code&gt;,
loaded at boot time.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Notify: PPI Guid: EE16160A-E8BE-47A6-820A-C6900DB0250A, Peim notify entry point: 836CA9
PlatformPei: ClearCacheOnMpServicesAvailable
DiscoverPeimsAndOrderWithApriori(): Found 0x0 PEI FFS files in the 1th FV
DXE IPL Entry
Loading PEIM D6A2CB7F-6A18-4E2F-B43B-9920A733700A
Loading PEIM at 0x00007EA8000 EntryPoint=0x00007EAB0BC DxeCore.efi
Loading DXE CORE at 0x00007EA8000 EntryPoint=0x00007EAB0BC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;debug-symbols-in-edk2&quot;&gt;Debug Symbols in EDK2&lt;/h2&gt;

&lt;p&gt;EDK2 build system generates
debug symbol information &lt;code class=&quot;highlighter-rouge&quot;&gt;*.debug&lt;/code&gt;
along with executables &lt;code class=&quot;highlighter-rouge&quot;&gt;*.efi&lt;/code&gt;
on debug build (&lt;code class=&quot;highlighter-rouge&quot;&gt;-b DEBUG&lt;/code&gt;).
If you use gcc (example: &lt;code class=&quot;highlighter-rouge&quot;&gt;GCC5&lt;/code&gt;),
it compiles source code to ELF object files,
link with custom linker script,
and convert to PE format.
Thus, the debug info is for ELF
and can be recognized by GDB.
On the other hand,
Visual Studio and clang/lld (&lt;code class=&quot;highlighter-rouge&quot;&gt;CLANG9&lt;/code&gt;)[2]
generates PE/COFF directly and the debug info
may be PDB.&lt;/p&gt;

&lt;p&gt;To summarize, the points are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OVMF code is placed on the flat single memory space.&lt;/li&gt;
  &lt;li&gt;GDB can debug EDK2 UEFI image built with gcc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a look at how to debug OVMF.&lt;/p&gt;

&lt;h2 id=&quot;building-edk2&quot;&gt;Building EDK2&lt;/h2&gt;

&lt;p&gt;Build EDK2 using gcc as usual.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:tianocore/edk2.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;edk2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git submodule update &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; BaseTools
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ./edksetup.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;build &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; OvmfPkg/OvmfPkgX64.dsc &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; DEBUG &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; X64 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; GCC5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To make debugging easy, create a Makefile as follow.
Note that we have to connect debugcon at 0x402
to dump debug information (&lt;code class=&quot;highlighter-rouge&quot;&gt;debug.log&lt;/code&gt;) from OVMF[4].&lt;/p&gt;

&lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env make
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/bash

&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;debug.log
&lt;span class=&quot;nv&quot;&gt;OVMFBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;edk2/Build/OvmfX64/DEBUG_GCC5/
&lt;span class=&quot;nv&quot;&gt;OVMFCODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(OVMFBASE)&lt;/span&gt;/FV/OVMF_CODE.fd
&lt;span class=&quot;nv&quot;&gt;OVMFVARS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(OVMFBASE)&lt;/span&gt;/FV/OVMF_VARS.fd
&lt;span class=&quot;nv&quot;&gt;QEMU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qemu-system-x86_64
&lt;span class=&quot;nv&quot;&gt;QEMUFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw,file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fat:rw:image &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pflash,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw,readonly,file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(OVMFCODE)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pflash,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw,file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(OVMFVARS)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;-debugcon&lt;/span&gt; file:&lt;span class=&quot;nv&quot;&gt;$(LOG)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-global&lt;/span&gt; isa-debugcon.iobase&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x402 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;-serial&lt;/span&gt; stdio &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;-nographic&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;-nodefaults&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;$(QEMU)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(QEMUFLAGS)&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;$(QEMU)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(QEMUFLAGS)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-S&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run debug&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before debugging, run the firmware to get &lt;code class=&quot;highlighter-rouge&quot;&gt;debug.log&lt;/code&gt;.
It may be better to provide &lt;code class=&quot;highlighter-rouge&quot;&gt;startup.nsh&lt;/code&gt; script.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;debug.log&lt;/code&gt;.
It includes the addresses of loaded UEFI images like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Loading PEIM at 0x00007EA8000 EntryPoint=0x00007EAB0BC DxeCore.efi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, extract text section (&lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt;) RVA from &lt;code class=&quot;highlighter-rouge&quot;&gt;*.efi&lt;/code&gt;
PE binaries.
This can be done by &lt;code class=&quot;highlighter-rouge&quot;&gt;readelf&lt;/code&gt; if it is ELF,
but the images are PE format.
Here we use 
&lt;a href=&quot;https://github.com/retrage/peinfo&quot;&gt;retrage/peinfo&lt;/a&gt;[3].&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:retrage/peinfo.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;peinfo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;peinfo extracts section information from a binary.
This time we want to know VirtualAddress in RVA.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name: .text
VirtualSize: 0x000204c0
VirtualAddress: 0x00000240
SizeOfRawData: 0x000204c0
PointerToRawData: 0x00000240
PointerToRelocations: 0x00000000
PointerToLinenumbers: 0x00000000
NumberOfRelocations: 0x0000
NumberOfLinenumbers: 0x0000
Characteristics: 0x60000020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run following bash script with &lt;code class=&quot;highlighter-rouge&quot;&gt;debug.log&lt;/code&gt; and peinfo.
This outputs a snippet of GDB script that adds
symbol information (&lt;code class=&quot;highlighter-rouge&quot;&gt;add-symbol-file&lt;/code&gt;).
It calculates the address of UEFI image text section
from base address and VirtualAddress.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug.log&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;edk2/Build/OvmfX64/DEBUG_GCC5/X64&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PEINFO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;peinfo/peinfo&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Loading | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; efi | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;LINE&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LINE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f4&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LINE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f6&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[:cntrl:]&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PEINFO&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; 5 text | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;VirtualAddress | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;print(hex(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; + &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;))&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;efi/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;debug/g&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add-symbol-file &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash gen_symbol_offsets.sh &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; gdbscript
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The generated GDB script is like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/PcdPeim.debug 0x82c380
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/ReportStatusCodeRouterPei.debug 0x831080
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/StatusCodeHandlerPei.debug 0x833100
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/PlatformPei.debug 0x835100
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/PeiCore.debug 0x7ee8240
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/DxeIpl.debug 0x7ee3240
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/S3Resume2Pei.debug 0x7edf240
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/CpuMpPei.debug 0x7ed6240
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/DxeCore.debug 0x7ea8240
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/DevicePathDxe.debug 0x7b8f240
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s place a breakpoint at &lt;code class=&quot;highlighter-rouge&quot;&gt;BootServices-&amp;gt;HandleProtocol()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) source gdbscript
(gdb) b CoreHandleProtocol
(gdb) target remote localhost:1234
(gdb) c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The debugger stops, and we can do source code level debug.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;   ┌──/home/akira/src/ovmf-debug/edk2/MdeModulePkg/Core/Dxe/Hand/Handle.c──────┐
   │933     CoreHandleProtocol (                                               │
   │934       IN EFI_HANDLE       UserHandle,                                  │
   │935       IN EFI_GUID         *Protocol,                                   │
   │936       OUT VOID            **Interface                                  │
   │937       )                                                                │
B+&amp;gt;│938     {                                                                  │
   │939       return CoreOpenProtocol (                                        │
   │940               UserHandle,                                              │
   │941               Protocol,                                                │
   │942               Interface,                                               │
   │943               gDxeCoreImageHandle,                                     │
   │944               NULL,                                                    │
   │945               EFI_OPEN_PROTOCOL_BY_HANDLE_PROTOCOL                     │
   └───────────────────────────────────────────────────────────────────────────┘
remote Thread 1 In: CoreHandleProtocol                      L938  PC: 0x7eb6ad4 



(gdb) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;20191205-postscript&quot;&gt;2019/12/05 Postscript&lt;/h3&gt;

&lt;p&gt;tnishinaga gave me the improved version of the script
to support multiple search paths. Thank you!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug.log&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./Build&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SEARCHPATHS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./Build/OvmfX64/DEBUG_GCC5/X64/ ./Build/Edk2SamplePkgX64/DEBUG_GCC5/X64/&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PEINFO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;peinfo/peinfo&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Loading | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; efi | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;LINE&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LINE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f4&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LINE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f6&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[:cntrl:]&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;EFIFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;find &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SEARCHPATHS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-maxdepth&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PEINFO&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EFIFILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; 5 text | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;VirtualAddress | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;print(hex(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; + &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;))&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;efi/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;debug/g&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;SYMFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;find &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SEARCHPATHS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-maxdepth&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add-symbol-file &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SYMFILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;[1] https://jp3bgy.github.io/blog/uefi/2018/12/24/How-to-Source-Debug-OVMF.html&lt;/li&gt;
  &lt;li&gt;[2] https://github.com/tianocore/edk2/commit/15330934dc860c20b2143c802f3b4285e89021e3&lt;/li&gt;
  &lt;li&gt;[3] https://github.com/retrage/peinfo&lt;/li&gt;
  &lt;li&gt;[4] https://github.com/tianocore/tianocore.github.io/wiki/How-to-debug-OVMF-with-QEMU-using-GDB&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">In this blog post, I will describe how to debug OVMF using GDB without any special tool unlike another post[1].</summary></entry><entry><title type="html">EFI_STATUSの値</title><link href="https://retrage.github.io/2019/11/26/efi-status-code.html" rel="alternate" type="text/html" title="EFI_STATUSの値" /><published>2019-11-26T00:40:56+00:00</published><updated>2019-11-26T00:40:56+00:00</updated><id>https://retrage.github.io/2019/11/26/efi-status-code</id><content type="html" xml:base="https://retrage.github.io/2019/11/26/efi-status-code.html">&lt;p&gt;毎回&lt;code class=&quot;highlighter-rouge&quot;&gt;EFI_STATUS&lt;/code&gt;の値を調べるのが手間なのでここでまとめておく．&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;EFI_STATUS&lt;/th&gt;
      &lt;th&gt;Value (64-bit)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_SUCCESS&lt;/td&gt;
      &lt;td&gt;0x0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_LOAD_ERROR&lt;/td&gt;
      &lt;td&gt;0x8000000000000001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_INVALID_PARAMETER&lt;/td&gt;
      &lt;td&gt;0x8000000000000002&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_UNSUPPORTED&lt;/td&gt;
      &lt;td&gt;0x8000000000000003&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_BAD_BUFFER_SIZE&lt;/td&gt;
      &lt;td&gt;0x8000000000000004&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_BUFFER_TOO_SMALL&lt;/td&gt;
      &lt;td&gt;0x8000000000000005&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_NOT_READY&lt;/td&gt;
      &lt;td&gt;0x8000000000000006&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_DEVICE_ERROR&lt;/td&gt;
      &lt;td&gt;0x8000000000000007&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_WRITE_PROTECTED&lt;/td&gt;
      &lt;td&gt;0x8000000000000008&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_OUT_OF_RESOURCES&lt;/td&gt;
      &lt;td&gt;0x8000000000000009&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_VOLUME_CORRUPTED&lt;/td&gt;
      &lt;td&gt;0x800000000000000a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_VOLUME_FULL&lt;/td&gt;
      &lt;td&gt;0x800000000000000b&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_NO_MEDIA&lt;/td&gt;
      &lt;td&gt;0x800000000000000c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_MEDIA_CHANGED&lt;/td&gt;
      &lt;td&gt;0x800000000000000d&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_NOT_FOUND&lt;/td&gt;
      &lt;td&gt;0x800000000000000e&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_ACCESS_DENIED&lt;/td&gt;
      &lt;td&gt;0x800000000000000f&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_NO_RESPONSE&lt;/td&gt;
      &lt;td&gt;0x8000000000000010&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_NO_MAPPING&lt;/td&gt;
      &lt;td&gt;0x8000000000000011&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_TIMEOUT&lt;/td&gt;
      &lt;td&gt;0x8000000000000012&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_NOT_STARTED&lt;/td&gt;
      &lt;td&gt;0x8000000000000013&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_ALREADY_STARTED&lt;/td&gt;
      &lt;td&gt;0x8000000000000014&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_ABORTED&lt;/td&gt;
      &lt;td&gt;0x8000000000000015&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_ICMP_ERROR&lt;/td&gt;
      &lt;td&gt;0x8000000000000016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_TFTP_ERROR&lt;/td&gt;
      &lt;td&gt;0x8000000000000017&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_PROTOCOL_ERROR&lt;/td&gt;
      &lt;td&gt;0x8000000000000018&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_INCOMPATIBLE_VERSION&lt;/td&gt;
      &lt;td&gt;0x8000000000000019&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_SECURITY_VIOLATION&lt;/td&gt;
      &lt;td&gt;0x800000000000001a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_CRC_ERROR&lt;/td&gt;
      &lt;td&gt;0x800000000000001b&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_END_OF_MEDIA&lt;/td&gt;
      &lt;td&gt;0x800000000000001c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_END_OF_FILE&lt;/td&gt;
      &lt;td&gt;0x800000000000001f&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_INVALID_LANGUAGE&lt;/td&gt;
      &lt;td&gt;0x8000000000000020&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_COMPROMISED_DATA&lt;/td&gt;
      &lt;td&gt;0x8000000000000021&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_HTTP_ERROR&lt;/td&gt;
      &lt;td&gt;0x8000000000000023&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_NETWORK_UNREACHABLE&lt;/td&gt;
      &lt;td&gt;0x8000000000000064&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_HOST_UNREACHABLE&lt;/td&gt;
      &lt;td&gt;0x8000000000000065&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_PROTOCOL_UNREACHABLE&lt;/td&gt;
      &lt;td&gt;0x8000000000000066&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_PORT_UNREACHABLE&lt;/td&gt;
      &lt;td&gt;0x8000000000000067&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_CONNECTION_FIN&lt;/td&gt;
      &lt;td&gt;0x8000000000000068&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_CONNECTION_RESET&lt;/td&gt;
      &lt;td&gt;0x8000000000000069&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_CONNECTION_REFUSED&lt;/td&gt;
      &lt;td&gt;0x800000000000006a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_WARN_UNKNOWN_GLYPH&lt;/td&gt;
      &lt;td&gt;0x1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_WARN_DELETE_FAILURE&lt;/td&gt;
      &lt;td&gt;0x2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_WARN_WRITE_FAILURE&lt;/td&gt;
      &lt;td&gt;0x3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_WARN_BUFFER_TOO_SMALL&lt;/td&gt;
      &lt;td&gt;0x4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_WARN_STALE_DATA&lt;/td&gt;
      &lt;td&gt;0x5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EFI_WARN_FILE_SYSTEM&lt;/td&gt;
      &lt;td&gt;0x6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;edk2での定義&quot;&gt;EDK2での定義&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-c:MdePkg/Include/Uefi/UefiBaseType.h:24&quot;&gt;///
/// Function return status for EFI API.
///
typedef RETURN_STATUS             EFI_STATUS;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-c:MdePkg/Include/Base.h:959&quot;&gt;//
// Status codes common to all execution phases
//
typedef UINTN RETURN_STATUS;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので&lt;code class=&quot;highlighter-rouge&quot;&gt;EFI_STATUS&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;UINTN&lt;/code&gt;である．
x64では&lt;code class=&quot;highlighter-rouge&quot;&gt;UINTN&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;UINT64&lt;/code&gt;となっている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c:MdePkg/Include/Uefi/UefiBaseType.h:109&quot;&gt;///
/// Enumeration of EFI_STATUS.
///@{
#define EFI_SUCCESS               RETURN_SUCCESS
#define EFI_LOAD_ERROR            RETURN_LOAD_ERROR
#define EFI_INVALID_PARAMETER     RETURN_INVALID_PARAMETER
#define EFI_UNSUPPORTED           RETURN_UNSUPPORTED
#define EFI_BAD_BUFFER_SIZE       RETURN_BAD_BUFFER_SIZE
#define EFI_BUFFER_TOO_SMALL      RETURN_BUFFER_TOO_SMALL
#define EFI_NOT_READY             RETURN_NOT_READY
#define EFI_DEVICE_ERROR          RETURN_DEVICE_ERROR
#define EFI_WRITE_PROTECTED       RETURN_WRITE_PROTECTED
#define EFI_OUT_OF_RESOURCES      RETURN_OUT_OF_RESOURCES
#define EFI_VOLUME_CORRUPTED      RETURN_VOLUME_CORRUPTED
#define EFI_VOLUME_FULL           RETURN_VOLUME_FULL
#define EFI_NO_MEDIA              RETURN_NO_MEDIA
#define EFI_MEDIA_CHANGED         RETURN_MEDIA_CHANGED
#define EFI_NOT_FOUND             RETURN_NOT_FOUND
#define EFI_ACCESS_DENIED         RETURN_ACCESS_DENIED
#define EFI_NO_RESPONSE           RETURN_NO_RESPONSE
#define EFI_NO_MAPPING            RETURN_NO_MAPPING
#define EFI_TIMEOUT               RETURN_TIMEOUT
#define EFI_NOT_STARTED           RETURN_NOT_STARTED
#define EFI_ALREADY_STARTED       RETURN_ALREADY_STARTED
#define EFI_ABORTED               RETURN_ABORTED
#define EFI_ICMP_ERROR            RETURN_ICMP_ERROR
#define EFI_TFTP_ERROR            RETURN_TFTP_ERROR
#define EFI_PROTOCOL_ERROR        RETURN_PROTOCOL_ERROR
#define EFI_INCOMPATIBLE_VERSION  RETURN_INCOMPATIBLE_VERSION
#define EFI_SECURITY_VIOLATION    RETURN_SECURITY_VIOLATION
#define EFI_CRC_ERROR             RETURN_CRC_ERROR
#define EFI_END_OF_MEDIA          RETURN_END_OF_MEDIA
#define EFI_END_OF_FILE           RETURN_END_OF_FILE
#define EFI_INVALID_LANGUAGE      RETURN_INVALID_LANGUAGE
#define EFI_COMPROMISED_DATA      RETURN_COMPROMISED_DATA
#define EFI_HTTP_ERROR            RETURN_HTTP_ERROR

#define EFI_WARN_UNKNOWN_GLYPH    RETURN_WARN_UNKNOWN_GLYPH
#define EFI_WARN_DELETE_FAILURE   RETURN_WARN_DELETE_FAILURE
#define EFI_WARN_WRITE_FAILURE    RETURN_WARN_WRITE_FAILURE
#define EFI_WARN_BUFFER_TOO_SMALL RETURN_WARN_BUFFER_TOO_SMALL
#define EFI_WARN_STALE_DATA       RETURN_WARN_STALE_DATA
#define EFI_WARN_FILE_SYSTEM      RETURN_WARN_FILE_SYSTEM
///@}

///
/// Define macro to encode the status code.
///
#define EFIERR(_a)                ENCODE_ERROR(_a)

#define EFI_ERROR(A)              RETURN_ERROR(A)

///
/// ICMP error definitions
///@{
#define EFI_NETWORK_UNREACHABLE   EFIERR(100)
#define EFI_HOST_UNREACHABLE      EFIERR(101)
#define EFI_PROTOCOL_UNREACHABLE  EFIERR(102)
#define EFI_PORT_UNREACHABLE      EFIERR(103)
///@}

///
/// Tcp connection status definitions
///@{
#define EFI_CONNECTION_FIN        EFIERR(104)
#define EFI_CONNECTION_RESET      EFIERR(105)
#define EFI_CONNECTION_REFUSED    EFIERR(106)
///@}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define RETURN_SUCCESS               0
#define RETURN_LOAD_ERROR            ENCODE_ERROR (1)
#define RETURN_INVALID_PARAMETER     ENCODE_ERROR (2)
#define RETURN_UNSUPPORTED           ENCODE_ERROR (3)
#define RETURN_BAD_BUFFER_SIZE       ENCODE_ERROR (4)
#define RETURN_BUFFER_TOO_SMALL      ENCODE_ERROR (5)
#define RETURN_NOT_READY             ENCODE_ERROR (6)
#define RETURN_DEVICE_ERROR          ENCODE_ERROR (7)
#define RETURN_WRITE_PROTECTED       ENCODE_ERROR (8)
#define RETURN_OUT_OF_RESOURCES      ENCODE_ERROR (9)
#define RETURN_VOLUME_CORRUPTED      ENCODE_ERROR (10)
#define RETURN_VOLUME_FULL           ENCODE_ERROR (11)
#define RETURN_NO_MEDIA              ENCODE_ERROR (12)
#define RETURN_MEDIA_CHANGED         ENCODE_ERROR (13)
#define RETURN_NOT_FOUND             ENCODE_ERROR (14)
#define RETURN_ACCESS_DENIED         ENCODE_ERROR (15)
#define RETURN_NO_RESPONSE           ENCODE_ERROR (16)
#define RETURN_NO_MAPPING            ENCODE_ERROR (17)
#define RETURN_TIMEOUT               ENCODE_ERROR (18)
#define RETURN_NOT_STARTED           ENCODE_ERROR (19)
#define RETURN_ALREADY_STARTED       ENCODE_ERROR (20)
#define RETURN_ABORTED               ENCODE_ERROR (21)
#define RETURN_ICMP_ERROR            ENCODE_ERROR (22)
#define RETURN_TFTP_ERROR            ENCODE_ERROR (23)
#define RETURN_PROTOCOL_ERROR        ENCODE_ERROR (24)
#define RETURN_INCOMPATIBLE_VERSION  ENCODE_ERROR (25)
#define RETURN_SECURITY_VIOLATION    ENCODE_ERROR (26)
#define RETURN_CRC_ERROR             ENCODE_ERROR (27)
#define RETURN_END_OF_MEDIA          ENCODE_ERROR (28)
#define RETURN_END_OF_FILE           ENCODE_ERROR (31)
#define RETURN_INVALID_LANGUAGE      ENCODE_ERROR (32)
#define RETURN_COMPROMISED_DATA      ENCODE_ERROR (33)
#define RETURN_HTTP_ERROR            ENCODE_ERROR (35)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define RETURN_WARN_UNKNOWN_GLYPH    ENCODE_WARNING (1)
#define RETURN_WARN_DELETE_FAILURE   ENCODE_WARNING (2)
#define RETURN_WARN_WRITE_FAILURE    ENCODE_WARNING (3)
#define RETURN_WARN_BUFFER_TOO_SMALL ENCODE_WARNING (4)
#define RETURN_WARN_STALE_DATA       ENCODE_WARNING (5)
#define RETURN_WARN_FILE_SYSTEM      ENCODE_WARNING (6)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-c:MdePkg/Include/Base.h:973&quot;&gt;#define ENCODE_ERROR(StatusCode)     ((RETURN_STATUS)(MAX_BIT | (StatusCode)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-c:MdePkg/Include/Base.h:984&quot;&gt;#define ENCODE_WARNING(StatusCode)   ((RETURN_STATUS)(StatusCode))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで&lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_BIT&lt;/code&gt;はx64では次のようになっている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c:MdePkg/Include/X64/ProcessorBind.h:246&quot;&gt;#define MAX_BIT     0x8000000000000000ULL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上をまとめるとx64では&lt;code class=&quot;highlighter-rouge&quot;&gt;EFI_STATUS&lt;/code&gt;の値は最初に示した表のようになる．
以下は表の生成に利用したスクリプトである．&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;MAX_BIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8000000000000000&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# MAX_BIT = 0x80000000
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status_padding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val_padding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'| '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_padding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' | '&lt;/span&gt; \
            &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_padding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' |'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;efi_status_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_to_return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_status_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;efi_to_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_status&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;return_status_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return_to_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_status_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;return_to_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; 

    &lt;span class=&quot;n&quot;&gt;status_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_to_return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;print_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'EFI_STATUS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Value (64-bit)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_to_return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'EFIERR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_status&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_to_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ENCODE_ERROR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'EFIERR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_BIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ENCODE_WARNING'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 0 is expected
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;print_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">毎回EFI_STATUSの値を調べるのが手間なのでここでまとめておく．</summary></entry><entry><title type="html">OVMFのデバッグ</title><link href="https://retrage.github.io/2019/11/05/debugging-ovmf.html" rel="alternate" type="text/html" title="OVMFのデバッグ" /><published>2019-11-05T05:16:39+00:00</published><updated>2019-11-05T05:16:39+00:00</updated><id>https://retrage.github.io/2019/11/05/debugging-ovmf</id><content type="html" xml:base="https://retrage.github.io/2019/11/05/debugging-ovmf.html">&lt;p&gt;ここではgdbを用いたOVMFのデバッグ方法について説明する．
すでにOVMFのデバッグについて書かれた記事[1]が存在するが，
ここでは特別なツールなどは使わずに通常のgdbでOVMFをデバッグする．&lt;/p&gt;

&lt;h2 id=&quot;uefiにおけるコードの配置&quot;&gt;UEFIにおけるコードの配置&lt;/h2&gt;

&lt;p&gt;UEFIでは(少なくともx64では)フラットな単一のメモリ空間が用意され，
ファームウェア本体もUEFI Applicationも同一の空間内にメモリ保護なしに
配置される，このため，複雑なことは一切せずにシンボル情報とベースアドレスさえ
分かっていればどのようなUEFIのコードであっても通常のデバッガでソースコードレベルデバッグが
可能となっている．
また，OVMFでは各機能がモジュール化されており，
ロードされる際には通常のUEFI ImageであるPEとしてロードされる．
これはおそらく多くの人がデバッグしたいであろうBootServicesでも同様である．
BootServicesは&lt;code class=&quot;highlighter-rouge&quot;&gt;DxeCore.efi&lt;/code&gt;として存在し，以下のように起動中にロードされる．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Notify: PPI Guid: EE16160A-E8BE-47A6-820A-C6900DB0250A, Peim notify entry point: 836CA9
PlatformPei: ClearCacheOnMpServicesAvailable
DiscoverPeimsAndOrderWithApriori(): Found 0x0 PEI FFS files in the 1th FV
DXE IPL Entry
Loading PEIM D6A2CB7F-6A18-4E2F-B43B-9920A733700A
Loading PEIM at 0x00007EA8000 EntryPoint=0x00007EAB0BC DxeCore.efi
Loading DXE CORE at 0x00007EA8000 EntryPoint=0x00007EAB0BC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;edk2におけるuefi-imageのデバッグシンボル&quot;&gt;EDK2におけるUEFI Imageのデバッグシンボル&lt;/h2&gt;

&lt;p&gt;OVMFを含むEDK2ではデバッグビルド(&lt;code class=&quot;highlighter-rouge&quot;&gt;-b DEBUG&lt;/code&gt;)を行うと
実行ファイル&lt;code class=&quot;highlighter-rouge&quot;&gt;*.efi&lt;/code&gt;とデバッグシンボル情報&lt;code class=&quot;highlighter-rouge&quot;&gt;*.debug&lt;/code&gt;が生成される．
このとき，使うツールチェーンによって生成されるデバッグシンボル情報の形式が異なる点に
注意する必要がある．
おそらくLinuxなどでビルドする場合に最も用いられるであろうgccではmingw32ではなく
通常のELFを出力するgccでコンパイルがなされ，
用意されたリンカスクリプトを元にリンクを行ったあと，
UEFI Imageの実行形式であるPEへと変換がなされる．
このため，gcc(&lt;code class=&quot;highlighter-rouge&quot;&gt;GCC5&lt;/code&gt;など)ではデバッグ情報はELFのものとなっており，
これは通常のgdbで解釈可能なものとなっている．
一方，Visual Studioや最近追加されたclang/lldでのビルド(&lt;code class=&quot;highlighter-rouge&quot;&gt;CLANG9&lt;/code&gt;)[2]
ではELFではなくPE/COFFを直接生成するため，デバッグ情報はpdbとなっているはずである(未確認)．&lt;/p&gt;

&lt;p&gt;以上をまとめると次のようになる．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OVMFのコードはフラットな単一のメモリ空間に配置される&lt;/li&gt;
  &lt;li&gt;gccでのビルドされたEDK2のUEFI Imageは(ELFターゲットな)gdbでデバッグ可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下では実際に特別なパッケージやデバッガを使わずにOVMF本体をデバッグしていく．&lt;/p&gt;

&lt;h2 id=&quot;edk2のビルド&quot;&gt;EDK2のビルド&lt;/h2&gt;

&lt;p&gt;何十回もやっているであろう作業なので説明は割愛．
普通にgccでデバッグビルドでビルドする．&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:tianocore/edk2.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;edk2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git submodule update &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; BaseTools
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ./edksetup.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;build &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; OvmfPkg/OvmfPkgX64.dsc &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; DEBUG &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; X64 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; GCC5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;デバッグをしやすくするために以下のようなMakefileを作成する．
ここで注意したいのは0x402でdebugconを接続しておき，
OVMFからのデバッグ情報(&lt;code class=&quot;highlighter-rouge&quot;&gt;debug.log&lt;/code&gt;)を記録しておくことである[4]．&lt;/p&gt;

&lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env make
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/bash

&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;debug.log
&lt;span class=&quot;nv&quot;&gt;OVMFBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;edk2/Build/OvmfX64/DEBUG_GCC5/
&lt;span class=&quot;nv&quot;&gt;OVMFCODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(OVMFBASE)&lt;/span&gt;/FV/OVMF_CODE.fd
&lt;span class=&quot;nv&quot;&gt;OVMFVARS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(OVMFBASE)&lt;/span&gt;/FV/OVMF_VARS.fd
&lt;span class=&quot;nv&quot;&gt;QEMU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qemu-system-x86_64
&lt;span class=&quot;nv&quot;&gt;QEMUFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw,file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fat:rw:image &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
		  &lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pflash,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw,readonly,file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(OVMFCODE)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
		  &lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pflash,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw,file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(OVMFVARS)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
		  &lt;span class=&quot;nt&quot;&gt;-debugcon&lt;/span&gt; file:&lt;span class=&quot;nv&quot;&gt;$(LOG)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-global&lt;/span&gt; isa-debugcon.iobase&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x402 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
		  &lt;span class=&quot;nt&quot;&gt;-serial&lt;/span&gt; stdio &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
		  &lt;span class=&quot;nt&quot;&gt;-nographic&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
		  &lt;span class=&quot;nt&quot;&gt;-nodefaults&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(QEMU)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(QEMUFLAGS)&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(QEMU)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(QEMUFLAGS)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run debug&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実際にデバッグを行う前に&lt;code class=&quot;highlighter-rouge&quot;&gt;debug.log&lt;/code&gt;を取得するため
普通に実行する．&lt;code class=&quot;highlighter-rouge&quot;&gt;startup.nsh&lt;/code&gt;などを用意しておくと便利かもしれない．&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;debug.log&lt;/code&gt;が取得できたこれには以下のようにどのUEFI Imageが
どこにロードされるかが記載されている．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Loading PEIM at 0x00007EA8000 EntryPoint=0x00007EAB0BC DxeCore.efi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次に&lt;code class=&quot;highlighter-rouge&quot;&gt;*.efi&lt;/code&gt;のPEバイナリからテキスト領域(&lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt;)のRVAを取得する．
これはELFであれば&lt;code class=&quot;highlighter-rouge&quot;&gt;readelf&lt;/code&gt;などでできるが，
今回は手前味噌ではあるが，
私が過去に作った&lt;a href=&quot;https://github.com/retrage/peinfo&quot;&gt;retrage/peinfo&lt;/a&gt;[3]
を用いる．&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:retrage/peinfo.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;peinfo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;peinfoでは以下のような情報が取得できる．
ここではVirtualAddressさえ取得できればよい．
なお，この値はRVAである点に注意する必要がある．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name: .text
VirtualSize: 0x000204c0
VirtualAddress: 0x00000240
SizeOfRawData: 0x000204c0
PointerToRawData: 0x00000240
PointerToRelocations: 0x00000000
PointerToLinenumbers: 0x00000000
NumberOfRelocations: 0x0000
NumberOfLinenumbers: 0x0000
Characteristics: 0x60000020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;得られた&lt;code class=&quot;highlighter-rouge&quot;&gt;debug.log&lt;/code&gt;とpeinfoを用いて以下のようなスクリプトを実行する．
これはシンボル情報を追加する&lt;code class=&quot;highlighter-rouge&quot;&gt;add-symbol-file&lt;/code&gt;を出力していくもので，
&lt;code class=&quot;highlighter-rouge&quot;&gt;debug.log&lt;/code&gt;で得られた各UEFI Imageのベースアドレスとpeinfoで得られたVirualAddressを
加算してそのUEFI Imageのテキスト領域がロードされるアドレスを計算するものである．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug.log&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;edk2/Build/OvmfX64/DEBUG_GCC5/X64&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PEINFO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;peinfo/peinfo&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Loading | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; efi | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;LINE&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LINE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f4&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LINE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f6&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[:cntrl:]&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PEINFO&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; 5 text | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;VirtualAddress | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;print(hex(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; + &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;))&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;efi/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;debug/g&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add-symbol-file &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash gen_symbol_offsets.sh &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; gdbscript
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上のようにして生成されたgdb scriptは以下のようになっている．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/PcdPeim.debug 0x82c380
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/ReportStatusCodeRouterPei.debug 0x831080
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/StatusCodeHandlerPei.debug 0x833100
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/PlatformPei.debug 0x835100
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/PeiCore.debug 0x7ee8240
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/DxeIpl.debug 0x7ee3240
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/S3Resume2Pei.debug 0x7edf240
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/CpuMpPei.debug 0x7ed6240
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/DxeCore.debug 0x7ea8240
add-symbol-file edk2/Build/OvmfX64/DEBUG_GCC5/X64/DevicePathDxe.debug 0x7b8f240
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で準備は完了である．通常のデバッグ時同様にデバッグ可能である．&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;BootServices-&amp;gt;HandleProtocol()&lt;/code&gt;にブレークポイントを置いてみる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) source gdbscript
(gdb) b CoreHandleProtocol
(gdb) target remote localhost:1234
(gdb) c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のようにブレークポイントで止まり，ソースコードレベルデバッグが可能になっていることがわかる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;   ┌──/home/akira/src/ovmf-debug/edk2/MdeModulePkg/Core/Dxe/Hand/Handle.c──────┐
   │933     CoreHandleProtocol (                                               │
   │934       IN EFI_HANDLE       UserHandle,                                  │
   │935       IN EFI_GUID         *Protocol,                                   │
   │936       OUT VOID            **Interface                                  │
   │937       )                                                                │
B+&amp;gt;│938     {                                                                  │
   │939       return CoreOpenProtocol (                                        │
   │940               UserHandle,                                              │
   │941               Protocol,                                                │
   │942               Interface,                                               │
   │943               gDxeCoreImageHandle,                                     │
   │944               NULL,                                                    │
   │945               EFI_OPEN_PROTOCOL_BY_HANDLE_PROTOCOL                     │
   └───────────────────────────────────────────────────────────────────────────┘
remote Thread 1 In: CoreHandleProtocol                      L938  PC: 0x7eb6ad4 



(gdb) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;20191205追記&quot;&gt;2019/12/05追記&lt;/h3&gt;

&lt;p&gt;tnishinagaさんから上記のスクリプトを改良して
複数パスに対応したスクリプトを教えていただきました．
ありがとうございます．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug.log&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./Build&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SEARCHPATHS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./Build/OvmfX64/DEBUG_GCC5/X64/ ./Build/Edk2SamplePkgX64/DEBUG_GCC5/X64/&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PEINFO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;peinfo/peinfo&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Loading | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; efi | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;LINE&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LINE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f4&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LINE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f6&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[:cntrl:]&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;EFIFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;find &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SEARCHPATHS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-maxdepth&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PEINFO&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EFIFILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; 5 text | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;VirtualAddress | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;print(hex(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; + &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ADDR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;))&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;efi/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;debug/g&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;SYMFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;find &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SEARCHPATHS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-maxdepth&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add-symbol-file &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SYMFILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;[1] https://jp3bgy.github.io/blog/uefi/2018/12/24/How-to-Source-Debug-OVMF.html&lt;/li&gt;
  &lt;li&gt;[2] https://github.com/tianocore/edk2/commit/15330934dc860c20b2143c802f3b4285e89021e3&lt;/li&gt;
  &lt;li&gt;[3] https://github.com/retrage/peinfo&lt;/li&gt;
  &lt;li&gt;[4] https://github.com/tianocore/tianocore.github.io/wiki/How-to-debug-OVMF-with-QEMU-using-GDB&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">ここではgdbを用いたOVMFのデバッグ方法について説明する． すでにOVMFのデバッグについて書かれた記事[1]が存在するが， ここでは特別なツールなどは使わずに通常のgdbでOVMFをデバッグする．</summary></entry><entry><title type="html">LLVMのEFI Byte Codeバックエンドを作る</title><link href="https://retrage.github.io/2019/07/20/llvm-backend-for-ebc.html" rel="alternate" type="text/html" title="LLVMのEFI Byte Codeバックエンドを作る" /><published>2019-07-20T00:37:42+00:00</published><updated>2019-07-20T00:37:42+00:00</updated><id>https://retrage.github.io/2019/07/20/llvm-backend-for-ebc</id><content type="html" xml:base="https://retrage.github.io/2019/07/20/llvm-backend-for-ebc.html">&lt;p&gt;ここでは開発しているLLVMのEFI Byte Code (EBC)バックエンドの概要と
EBCバックエンド固有の問題などについてみていく．&lt;/p&gt;

&lt;p&gt;ソースコードは以下で公開している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yabits/llvm/tree/retrage/ebc&quot;&gt;yabits/llvm:retrage/ebc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yabits/clang/tree/retrage/ebc&quot;&gt;yabits/clang:retrage/ebc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yabits/lld/tree/retrage/ebc&quot;&gt;yabits/lld:retrage/ebc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;動機&quot;&gt;動機&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://retrage.github.io/2018/11/11/efi-byte-code-myth.html&quot;&gt;過去の記事&lt;/a&gt;[1]
で説明したように，EBCに対応したコンパイラは
有料のIntel C Compiler for EFI Byte Code
のみであり，GCC/ClangではEBC対応がない．
そこで，EBC対応のコンパイラを作成する前段階として
ELVMのEBCバックエンドを作成した．
詳しくは
&lt;a href=&quot;https://retrage.github.io/2019/07/13/elvm-ebc.html&quot;&gt;ELVMのEFI Byte Codeバックエンドを作る&lt;/a&gt;[2]
を参照したい．
しかし，ELVMで生成されるコードは各バックエンドに最適でなく，
生成されるバイナリサイズが大きい傾向にあるという問題がある．
また，ELVMにはリンクという作業が存在せず，
各コンパイル時に指定できるのは1つのファイルのみであり，
実用に向かない．&lt;/p&gt;

&lt;p&gt;そこでLLVMにEBCのバックエンドを追加する．
開発の対象となるのはLLVM CoreとClang，LLDである．&lt;/p&gt;

&lt;p&gt;LLVMにEBCのバックエンドを追加するというアイデアは新しいものではなく，
以下のように過去にGoogle Summer of Codeのテーマとして検討されたこともある[3]．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.llvm.org/pipermail/llvm-dev/2010-April/030814.html&quot;&gt;[LLVMdev] GSoC idea — C Compiler for EFI Byte Code implement in LLVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ebcの現状&quot;&gt;EBCの現状&lt;/h2&gt;

&lt;p&gt;UEFI Specificationで定義されているEBCの仕様は
後述するように表現が曖昧であるという問題がある．
EBCのVMのリファレンス実装は
TianoCore/EDK2に含まれている
&lt;a href=&quot;https://github.com/tianocore/edk2/blob/master/MdeModulePkg/Universal/EbcDxe/EbcExecute.c&quot;&gt;MdeModulePkg/Universal/EbcDxe/EbcExecute.c&lt;/a&gt;[4]
ため，
実際の仕様はソースコードで確認する必要がある．&lt;/p&gt;

&lt;p&gt;Intel C Compiler for EFI Byte Code以外のEBCのツールチェーンには
&lt;a href=&quot;https://github.com/pbatard/fasmg-ebc&quot;&gt;fasmg-ebc&lt;/a&gt;][5]
というアセンブラがあり，
これを利用することで有効なEBCのバイナリを生成できる．
しかしfasmg-ebcにはバグがあり
コーナーケースなオペランドを正しくエンコードできないという問題がある．&lt;/p&gt;

&lt;p&gt;EBCのアセンブリレベルデバッガはUEFI driverとして実装されている．
&lt;a href=&quot;https://github.com/tianocore/edk2/tree/master/MdeModulePkg/Universal/EbcDxe/EbcDebugger&quot;&gt;MdeModulePkg/Universal/EbcDxe/EbcDebugger&lt;/a&gt;[6]
これらはQEMU上のOVMFで動作するが，
UEFIではメモリ保護がなされないためバグのあるEBCのバイナリを実行すると
システムごと巻き込んでハングしたりリセットされたりなど
生成したバイナリのテストが容易ではない．&lt;/p&gt;

&lt;p&gt;そこで先に紹介したELVMのEBCバックエンドをテストできるだけの
ユーザ空間で動作するEBCのVMを開発した．
詳しくは
&lt;a href=&quot;https://retrage.github.io/2018/12/19/introduction-to-ebcvm.html&quot;&gt;ebcvm: A Usermode EFI Byte Code Virtual Machine&lt;/a&gt;[7]
で紹介している．
しかし，この実装も完全な互換性はなく，
現状ではELVMのEBCバックエンドについてebcvmでは全てのテストが通るものの
OVMFではいくつかのテストに失敗する．&lt;/p&gt;

&lt;p&gt;以上のように正しいEBCのVMは容易に利用できず，
また正しいEBCのバイナリも十分に得られないというのが現状である．&lt;/p&gt;

&lt;h2 id=&quot;開発方針&quot;&gt;開発方針&lt;/h2&gt;

&lt;p&gt;LLVMはC++とDSLで書かれた巨大なプロジェクトであり，
その全てを把握するのは難しい．
LLVMバックエンドの追加については
&lt;a href=&quot;https://llvm.org/docs/WritingAnLLVMBackend.html&quot;&gt;Writing an LLVM Backend&lt;/a&gt;[8]
が公式ドキュメントとして存在する．
LLVMバックエンドについて書かれたドキュメントは次の2つがある．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jonathan2251.github.io/lbd/&quot;&gt;Tutorial: Creating an LLVM Backend for the Cpu0 Architecture&lt;/a&gt;[8]&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tatsu-zine.com/books/llvm&quot;&gt;きつねさんでもわかるLLVM&lt;/a&gt;[9]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかし，これらが扱っているLLVMのバージョンは前者は3.1，後者は3.2であり，
2019年7月現在の最新版が8.0.0であることから情報が古いと言う問題がある．
また，後述するようにこれらが対象とするCPUアーキテクチャはRISCであり，
サポートするバイナリフォーマットもELFであるなど，
EBCのバックエンドを作成する上で異なる点も多い．
また，これらはLLVM Coreへのバックエンドの追加を対象としており，
ClangやLLDの開発については言及されていない．&lt;/p&gt;

&lt;p&gt;そこで今回は最近開発が進められているRISC-Vバックエンドを参考にする．
&lt;a href=&quot;https://github.com/lowRISC/riscv-llvm&quot;&gt;lowRISC/riscv-llvm&lt;/a&gt;[10]
には程よい粒度で綺麗にまとめられたRISC-Vバックエンドがパッチ形式で公開されている．
開発の順番もこれに準拠し，インクリメンタルに作成していくこととする．
目標としてはEBCの全ての命令をサポートし，
かつ簡単なCのコードからEBCのバイナリをビルドできるようにする．&lt;/p&gt;

&lt;h2 id=&quot;llvmのバックエンドの概観&quot;&gt;LLVMのバックエンドの概観&lt;/h2&gt;

&lt;p&gt;LLVMのバックエンドはLLVM IRからアセンブリへの変換と
アセンブリからオブジェクトファイルの生成を担当する．
実際にターゲット上で実行されるバイナリはリンカによって生成されるため
LLVM Coreの範囲外であることに注意したい．
LLVMのバックエンドはMCLayerとCodeGenの2つの部分に分けられる．
MCLayerではアセンブリとオブジェクトファイルの相互変換を行う．
CodeGenではLLVM IRを入力としてアセンブリを生成する．&lt;/p&gt;

&lt;h2 id=&quot;mclayerの作成&quot;&gt;MCLayerの作成&lt;/h2&gt;

&lt;p&gt;最初にアセンブラやディスアセンブラを担当するMCLayerを作成する．
具体的には以下のようなことを行う．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tripleの追加とEBC COFFの定義&lt;/li&gt;
  &lt;li&gt;レジスタとinstruction formatsの定義&lt;/li&gt;
  &lt;li&gt;instructionとoperand typeの定義&lt;/li&gt;
  &lt;li&gt;MCTargetDesc/* と InstPrinter/* の追加&lt;/li&gt;
  &lt;li&gt;AsmParserの追加&lt;/li&gt;
  &lt;li&gt;Disassemblerの追加&lt;/li&gt;
  &lt;li&gt;fixupのサポート&lt;/li&gt;
  &lt;li&gt;テストの追加&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実装の全てを紹介することは困難なため詳しくはリポジトリを参照して欲しいが，
ここではEBCバックエンドの固有の問題をみていく．&lt;/p&gt;

&lt;h3 id=&quot;natural-indexing&quot;&gt;Natural Indexing&lt;/h3&gt;

&lt;p&gt;過去の記事でも言及している通り，
EBCはホスト(native)のアーキテクチャに依存しない
64-bit little endianなバイトコードとその仮想マシンとなっている．
EBCは単体では何もできないため，nativeで定義されている関数を
EBCから呼び出すことができるようになっている．&lt;/p&gt;

&lt;p&gt;native向けUEFI imageはentry pointで
以下のような2つの引数を受け取る．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EFI_STATUS&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EFIAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EFI_IMAGE_ENTRY_POINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_HANDLE&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;ImageHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_SYSTEM_TABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SystemTable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ImageHandle&lt;/code&gt;はロードされたUEFI imageを指し，
&lt;code class=&quot;highlighter-rouge&quot;&gt;SystemTable&lt;/code&gt;はUEFIの用意する関数などへのポインタが
含まれた構造体へのポインタである．&lt;/p&gt;

&lt;p&gt;これらの引数がどのように渡されるかはアーキテクチャ依存であるが，
EBCの場合はスタック経由で逆順にプッシュされた状態で渡される．&lt;/p&gt;

&lt;p&gt;ではEBCから&lt;code class=&quot;highlighter-rouge&quot;&gt;SystemTable&lt;/code&gt;にアクセスすることを考えてみる．
&lt;code class=&quot;highlighter-rouge&quot;&gt;SystemTable&lt;/code&gt;は2番目の引数なので最初にプッシュされるため，
&lt;code class=&quot;highlighter-rouge&quot;&gt;ImageHanle&lt;/code&gt;分をオフセットとして計算する必要がある．
しかし，ここで問題がある．
&lt;code class=&quot;highlighter-rouge&quot;&gt;EFI_HANDLE&lt;/code&gt;の大きさはアーキテクチャ依存であり，
32-bitでは4-byte，64-bitでは8-byteとなっている．
しかもEBCではnativeのアーキテクチャは知らされていない．
このようにnativeでのアーキテクチャを考える必要があり，
通常のようにオフセットが既知でないという問題がある．&lt;/p&gt;

&lt;p&gt;そこでEBCではアドレスのオフセットを計算するために
Natural Indexという仕組みを導入している．
Natural Indexはnatural unit&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;とconstant unit&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;の2つの値をとる．
runtimeでこれらの値を以下のように計算して実際のオフセットを計算する．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Offset = c + n * sizeof(void *)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここで&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof(void *)&lt;/code&gt;はnativeでのポインタの大きさであある．
このように&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;でアーキテクチャ依存のオフセットを計算し，
&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;でアーキテクチャ非依存のオフセットを加算する．&lt;/p&gt;

&lt;p&gt;Natural IndexingはEBC内部で完結する操作では
constant unitのみを使い，
nativeとやりとりをする場合のみnatural unitを使うような使い方が考えられる．&lt;/p&gt;

&lt;p&gt;Natural Indexingの仕組みはEBC固有のものであり，
LLVMには対応するものが存在しない．
このため1つのNatural Indexingを2つのImmediateとして扱い，
アセンブリ時とディスアセンブル時にそれぞれ独自に
エンコードとデコードを行うようにした．&lt;/p&gt;

&lt;h3 id=&quot;ebc命令の定義が不明瞭&quot;&gt;EBC命令の定義が不明瞭&lt;/h3&gt;

&lt;p&gt;EBCの命令ではよく次のようなオペランドが定義される．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{@} R {Index}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここで&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;はレジスタを表し，&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;はindirectであることを示しており，
&lt;code class=&quot;highlighter-rouge&quot;&gt;Index&lt;/code&gt;はNatural Indexがあることを示している．
さて，多くのEBCの命令では次のような説明があり，
これはIndexつきのdirectなOperand 1は禁止されていることを示している．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Specifying an index value with Operand 1 direct results in an instruction encoding exception.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;しかし&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;命令のOperand2も同じような定義を持つ一方で
上記のような説明がなく，明確に可能であるとも書かれていない．
EDK2の実装をみると&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;命令に限ってIndexつきdirectなOperand 2が可能となっている．
このようにUEFI SepcificationにあるEBCの定義は不明瞭に場合がある．&lt;/p&gt;

&lt;h3 id=&quot;ebc命令の定義例&quot;&gt;EBC命令の定義例&lt;/h3&gt;

&lt;p&gt;RISCアーキテクチャではエンコードされた命令の長さが固定長であることが多いが，
EBCではx86などのCISCアーキテクチャのように可変長である．
厄介なことににEBCでは同一のオペコードを持った命令でも長さが異なる場合がある．
これはEBCではOptional Immediate/Indexと呼ばれるオペランドを持っているためである．
例として以下に&lt;code class=&quot;highlighter-rouge&quot;&gt;DIV&lt;/code&gt;命令のエンコーディングを示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-div-encoding.png&quot; alt=&quot;EBCのDIV命令のエンコーディング&quot; /&gt;&lt;/p&gt;

&lt;p&gt;0-byte目の7-bit目のビットがセットされていれば
後ろのOptional 16-bit Immediate/Indexが存在することを示す．
さらにImmediate/Indexとあるように同じフィールドでも
別のビットがセットされていればエンコードやデコードの方法が異なる．
この場合，1-byte目の7-bit目のビットがセットされていれば
Natural Indexとして扱い，クリアされていればImmediateとして扱う必要がある．&lt;/p&gt;

&lt;p&gt;また，
表からわかるようにビットの立て方によって計算が32-bit/64-bitに変わり，
Operand 2やOperand 1がdirect/indirectに変わる．
以上のように一つの命令であっても取りうるビットや命令長が異なる．&lt;/p&gt;

&lt;p&gt;以上を踏まえてEBCの命令をLLVMで定義する．
LLVMでは基本的にTableGenと呼ばれるDSLを用いて命令を記述する．
TableGenはC++のようなクラスの概念があり，
複数の命令で共通する部分がある場合などにクラスを定義して
実際の命令の定義でインスタンス化を行う方法をとることができる．
EBCでの&lt;code class=&quot;highlighter-rouge&quot;&gt;DIV&lt;/code&gt;の定義は次の通りである．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defm DIV    : EBCALU&amp;lt;0b010000, &quot;div&quot;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defm&lt;/code&gt;は後述するmulticlassをインスタンス化するものである．
&lt;code class=&quot;highlighter-rouge&quot;&gt;EBCALU&lt;/code&gt;は他の計算操作と共通のmulticlassであり
1番目の引数がオペコード，2番目の引数がニーモニックである．
&lt;code class=&quot;highlighter-rouge&quot;&gt;EBCALU&lt;/code&gt;は次のような定義である．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;multiclass EBCALU&amp;lt;bits&amp;lt;6&amp;gt; opcode, string opcodestr&amp;gt; {
  foreach hasImmIdx = [0b0, 0b1] in {
    foreach is64Bit = [0b0, 0b1] in {
      foreach Op1Indirect = [0b0, 0b1] in {
        foreach Op2Indirect = [0b0, 0b1] in
        def !if(is64Bit, &quot;64&quot;, &quot;32&quot;)
          # !if(Op1Indirect, &quot;Op1I&quot;, &quot;Op1D&quot;)
          # !if(Op2Indirect, &quot;Op2I&quot;, &quot;Op2D&quot;)
          # !cond(!eq(hasImmIdx, 0) : &quot;&quot;,
                  !eq(!and(hasImmIdx, Op2Indirect), 0) : &quot;Imm&quot;,
                  !eq(!and(hasImmIdx, Op2Indirect), 1) : &quot;Idx&quot;)
          : EBCALUBase&amp;lt;opcode, hasImmIdx, is64Bit, Op1Indirect, Op2Indirect,
            (outs GPR:$dst), (ins GPR:$op1, GPR:$op2),
            (ins imm16:$imm), (ins idxn16:$idxn, idxc16:$idxc),
            opcodestr, &quot;$op1&quot;, &quot;$op2&quot;, &quot;$imm&quot;, &quot;(${idxn},${idxc})&quot;&amp;gt;;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;multiclassは複数のclassをまとめて定義するものである．
ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;hasImmIdx&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;is64Bit&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Op1Indirect&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Op2Indirect&lt;/code&gt;をパラメータとして
&lt;code class=&quot;highlighter-rouge&quot;&gt;EBCALUBase&lt;/code&gt;を継承したclassを定義する．
詳細には解説しないが，&lt;code class=&quot;highlighter-rouge&quot;&gt;EBCALUBase&lt;/code&gt;は次のような定義となっている．
命令の大きさを示す&lt;code class=&quot;highlighter-rouge&quot;&gt;CodeSize&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;hasImmIdx&lt;/code&gt;によって定められている．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class EBCALUBase&amp;lt;bits&amp;lt;6&amp;gt; opcode, bit hasImmIdx, bit is64Bit,
          bit Op1Indirect, bit Op2Indirect,
          dag outs, dag ins, dag immins, dag idxins,
          string opcodestr, string op1str, string op2str,
          string immstr, string idxstr&amp;gt;
      : EBCInst2Op&amp;lt;opcode, hasImmIdx, is64Bit, Op1Indirect, Op2Indirect, outs,
        !cond(!eq(hasImmIdx, 0) : ins,
              !eq(!and(hasImmIdx, Op2Indirect), 0) : !con(ins, immins),
              !eq(!and(hasImmIdx, Op2Indirect), 1) : !con(ins, idxins)),
        opcodestr # !if(is64Bit, &quot;64&quot;, &quot;32&quot;),
        !if(Op1Indirect, &quot;@&quot;, &quot;&quot;) # op1str # &quot;, &quot;
      # !if(Op2Indirect, &quot;@&quot;, &quot;&quot;) # op2str # !if(hasImmIdx, &quot; &quot;, &quot;&quot;)
      # !cond(!eq(hasImmIdx, 0) : &quot;&quot;,
              !eq(!and(hasImmIdx, Op2Indirect), 0) : immstr,
              !eq(!and(hasImmIdx, Op2Indirect), 1) : idxstr),
        []&amp;gt; {
  bits&amp;lt;3&amp;gt; dst;
  let CodeSize = !if(hasImmIdx, 4, 2);
  let mayLoad = !if(Op2Indirect, 1, 0);
  let mayStore = !if(Op1Indirect, 1, 0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上のように，EBCの命令をLLVMのTableGenで表現するのは複雑であることがわかる．
しかし，EBCでnativeの関数を呼び出す場合，
後述のCodeGenでは取り扱えないのでinline assemblyをサポートしなければならず，
全てのEBCの命令をサポートする必要がある．
このため，CodeGenでは使われない命令でも正しく定義する必要がある．&lt;/p&gt;

&lt;h3 id=&quot;ディスアセンブラの実装&quot;&gt;ディスアセンブラの実装&lt;/h3&gt;

&lt;p&gt;LLVMでは命令をTableGenで記述するとアセンブラだけでなくディスアセンブラも生成してくれるが，
先のmulticlassを使った命令の定義ではNatural IndexingなどEBC固有の命令も含まれているため，
TableGenの生成するディスアセンブラでは全てを正しくディスアセンブルできない．
このため，EBCバックエンドでは
オペコードのデコードにはTablgeGenで生成されるデコーダを利用し，
かつOptional Immediate/Indexが存在するかどうかを調べるため
TableGenで生成されるデコーダとは別に再度オペコードをデコードし，
フラグの有無を調べた上でOptional Immediate/Indexをデコードするように実装している．&lt;/p&gt;

&lt;h3 id=&quot;fixupの実装&quot;&gt;fixupの実装&lt;/h3&gt;

&lt;p&gt;アセンブラはアセンブリをエンコードするだけでなくシンボルの参照を解決するという役割も担っている．
実際にはこの役割は参照するシンボルがどこにあるかによって誰が解決するかが異なってくるが，
参照するシンボルが同一オブジェクトファイル内にある場合はアセンブラが担当することとなる．
LLVMのMCLayerではアセンブラによるシンボル参照の解決をfixupという．
EBCのバイナリは通常のUEFIのapplicationやdriverのように再配置可能である必要があるため，
シンボル参照は相対的ものでなければならない．
しかし，EBCでは相対アドレスのオフセットが命令ごとに微妙に異なっているという問題がある．&lt;/p&gt;

&lt;h2 id=&quot;codegenの実装&quot;&gt;CodeGenの実装&lt;/h2&gt;

&lt;p&gt;次にLLVM IRからアセンブリへの変換を行うCodeGenについてみていく．
CodeGenではDAGで表現されたコードをターゲットのコードに置き換えていく．
簡単なノードの置き換えで変換できる場合にはTableGenでパターンを書くことで
ターゲットのコードへの変換を記述できる．
一方で関数呼出などの一般にターゲットに依存する部分については
C++で記述する必要がある．&lt;/p&gt;

&lt;p&gt;CodeGenで実装するものは以下の通りである．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ALU operantions&lt;/li&gt;
  &lt;li&gt;Materializing constants&lt;/li&gt;
  &lt;li&gt;Memory operation&lt;/li&gt;
  &lt;li&gt;Global address operation&lt;/li&gt;
  &lt;li&gt;Conditional branches&lt;/li&gt;
  &lt;li&gt;Function calls&lt;/li&gt;
  &lt;li&gt;SELECT/SELECT_CC&lt;/li&gt;
  &lt;li&gt;FrameIndex lowering&lt;/li&gt;
  &lt;li&gt;Prologue/Epilogue insertion&lt;/li&gt;
  &lt;li&gt;dynamic_stackalloc, stacksave, stackrestore&lt;/li&gt;
  &lt;li&gt;Inline assembly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本的に実装を頑張るしかないのだが，
Global address operationでの問題を取り上げる．&lt;/p&gt;

&lt;h3 id=&quot;アドレス計算の仕組みが十分でない&quot;&gt;アドレス計算の仕組みが十分でない&lt;/h3&gt;

&lt;p&gt;EBCのバイナリは他のUEFI application/driver同様に
relocatableである必要がある．
これはUEFIでは対象がどこにロードされるかをUEFI側で決定するためである．
このため，EBCでのアドレスの表現が相対アドレスでの表現でなければならない．&lt;/p&gt;

&lt;p&gt;EBCには相対アドレスから値を取得する&lt;code class=&quot;highlighter-rouge&quot;&gt;MOVREL&lt;/code&gt;命令がある．
これは以下のような操作を行う．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Op1 = [IP + SizeOfThisInstruction + Offset]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;図で表すと次のようになる．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-movrel.png&quot; alt=&quot;MOVREL命令の概略図&quot; /&gt;&lt;/p&gt;

&lt;p&gt;さて，Global Addressを扱いたい場合，
&lt;code class=&quot;highlighter-rouge&quot;&gt;MOVREL&lt;/code&gt;のように相対アドレスの計算を行うが
値の取得まではしない，という命令が欲しくなる．
つまり次のような操作が求められている．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Op1 = IP + SizeOfThisInstruction + Offset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;EBCにはこの操作に相当する1命令は存在しない．
このため，STORESP+MOVI+ADDの3つの命令を組み合わせることで
これを実現する．
具体的には次のような表現になる．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  STORESP R1, IP
  MOVI R2, .Target
  ADD R1, R2
  ...

.Target:
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最初に&lt;code class=&quot;highlighter-rouge&quot;&gt;STORESP&lt;/code&gt;命令で次の命令を指すIPの値をR1に取得する．
次にMOVIで埋め込まれている&lt;code class=&quot;highlighter-rouge&quot;&gt;.Target:&lt;/code&gt;へのオフセットをR2に代入する．
最後にR1とR2を足し合わせることで現在ロードされているアドレスでの
&lt;code class=&quot;highlighter-rouge&quot;&gt;.Target:&lt;/code&gt;の絶対アドレスが計算できる．&lt;/p&gt;

&lt;h2 id=&quot;clangとlld&quot;&gt;ClangとLLD&lt;/h2&gt;

&lt;p&gt;ClangではTripleとTargetInfoの追加，EBC specific driverを追加した．
このdriverのコードの多くはMSVC driverに由来する．
LLDではEBCをtargetに加え，
&lt;code class=&quot;highlighter-rouge&quot;&gt;SectionChunk::applyRelEBC()&lt;/code&gt;という
別オブジェクトファイルのシンボル参照を解決する部分を加えるなどを行った．
なお，UEFIではDLLのサポートやPDBのサポートもないため
これらの実装は行っていない．&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;本記事ではLLVMのEBCバックエンドについて簡単に紹介した．
EBCはあまり洗練された設計になっておらず，
扱いにくいというのが正直な感想である．
UEFIも2.8になりEBC自体がOptionalの扱いとなったため，
今後EBCはより一層使われなくなるものと考えられる．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;[1] https://retrage.github.io/2018/11/11/efi-byte-code-myth.html&lt;/li&gt;
  &lt;li&gt;[2] https://retrage.github.io/2019/07/13/elvm-ebc.html&lt;/li&gt;
  &lt;li&gt;[3] https://lists.llvm.org/pipermail/llvm-dev/2010-April/030814.html&lt;/li&gt;
  &lt;li&gt;[4] https://github.com/tianocore/edk2/blob/master/MdeModulePkg/Universal/EbcDxe/EbcExecute.c&lt;/li&gt;
  &lt;li&gt;[5] https://github.com/pbatard/fasmg-ebc&lt;/li&gt;
  &lt;li&gt;[6] https://github.com/tianocore/edk2/tree/master/MdeModulePkg/Universal/EbcDxe/EbcDebugger&lt;/li&gt;
  &lt;li&gt;[7] https://retrage.github.io/2018/12/19/introduction-to-ebcvm.html&lt;/li&gt;
  &lt;li&gt;[8] https://llvm.org/docs/WritingAnLLVMBackend.html&lt;/li&gt;
  &lt;li&gt;[9] https://tatsu-zine.com/books/llvm&lt;/li&gt;
  &lt;li&gt;[10] https://github.com/lowRISC/riscv-llvm&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">ここでは開発しているLLVMのEFI Byte Code (EBC)バックエンドの概要と EBCバックエンド固有の問題などについてみていく．</summary></entry><entry><title type="html">文鎮化したMinnowboardを復旧させる</title><link href="https://retrage.github.io/2019/07/14/bricked-minnowboard.html" rel="alternate" type="text/html" title="文鎮化したMinnowboardを復旧させる" /><published>2019-07-14T05:24:13+00:00</published><updated>2019-07-14T05:24:13+00:00</updated><id>https://retrage.github.io/2019/07/14/bricked-minnowboard</id><content type="html" xml:base="https://retrage.github.io/2019/07/14/bricked-minnowboard.html">&lt;p&gt;MinnowboardはIntel Atomを搭載した
シングルボードコンピュータである．
Minnowboardを使った実験で誤ったファームウェアを書き込んでしまい
brick (文鎮化) させてしまったので
SPI Flashを外部から書き換えることで復旧させる．&lt;/p&gt;

&lt;p&gt;今回対象とするのは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minnowboard MAX (MAX)&lt;/li&gt;
  &lt;li&gt;Minnowboard Turbot Dual-Core (Turbot)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;である．
基本的にはこれらは同じ仕様であるが，
後述するような差異がSPI Flashに存在する．&lt;/p&gt;

&lt;h3 id=&quot;spi-flash-programmerを使った書き込み&quot;&gt;SPI Flash Programmerを使った書き込み&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://minnowboard.org/tutorials/updating-firmware-via-spi-flash-programmer&quot;&gt;Updating Firmware via SPI Flash Programmer&lt;/a&gt;
を参考にする．
このチュートリアルではDediProg SF100という
書き込み機を用いているが
手元にないため，他の書き込み機を利用する．&lt;/p&gt;

&lt;p&gt;Minnowboardが搭載するSPI Flashには2種類存在する．
&lt;a href=&quot;https://github.com/MinnowBoard-org/bugs-and-help/issues/98&quot;&gt;Issue #98&lt;/a&gt;
によればMAXや一部のTurbotでは1.8VをVccとするが
大多数のTurbotではVccが3.3Vであるとのことである．
これらの見分け方としてある抵抗が実装されているかで
調べることができるとされている．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;抵抗R152があり，抵抗R818がない場合: 3.3V&lt;/li&gt;
  &lt;li&gt;抵抗R152がなく，抵抗R818がある場合: 1.8V&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://minnowboard.org/minnowboard-turbot/documentation&quot;&gt;Minnowboard Turbot Domumentation&lt;/a&gt;
によればそれぞれ次のようなSPI Flashが搭載されている．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3.3V: WINBOND W25Q64BVSSIG, MICRON N25Q064A13&lt;/li&gt;
  &lt;li&gt;1.8V: WINBOND W25Q64FWSSIG, MICRON N25Q064A11&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;minnowboard-max&quot;&gt;Minnowboard MAX&lt;/h3&gt;

&lt;p&gt;MAXは以前にcorebootのバイナリイメージを書き込んだが
失敗したためbrickしていたものである．
このボードでは1.8VのSPI Flashが搭載されていた．
ここではEZP2010を用いて書き込みを行った．&lt;/p&gt;

&lt;h3 id=&quot;minnowboard-turbot-dual-core&quot;&gt;Minnowboard Turbot Dual-Core&lt;/h3&gt;

&lt;p&gt;Turbotに対して
&lt;a href=&quot;https://firmware.intel.com/projects/minnowboard-max&quot;&gt;Intel Architecture Firmware Resource Center&lt;/a&gt;
のrelease noteにあるように
UEFI Shell経由でファームウェアを書き換えた．
これはIntelの配布するバイナリイメージでは問題なく動作した．
一方で手元でビルドしたファームウェアを書き込んだ場合，
UEFI Shellに入る直前に次のようなAssertion Errorにより
ハングするようになってしまった．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OSIndication Variable Value 0

ASSERT_EFI_ERROR (Status = Not Found)
ASSERT [ISPDxe] c:\minnowboard2closesource\Vlv2DeviceRefCodePkg\ValleyView2Soc\NorthCluster\ISPDxe\ISPDxe.c(273): !EFI_ERROR (Status)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここに書かれているソースコードは公開されておらず，
バイナリファイルのみが配布されている．
このため原因の特定は容易ではない．&lt;/p&gt;

&lt;h3 id=&quot;20190805-追記&quot;&gt;2019/08/05 追記&lt;/h3&gt;

&lt;p&gt;以上の記事について公開していたところ，
Brian Delgadoさんから助言をいただき
Assertion Errorについて解決できたので追記する．
問題はファームウェアのビルドに使うiaslである．
新しいiaslでは上記の問題が発生するため，
&lt;a href=&quot;https://acpica.org/node/124&quot;&gt;VERSION 20160527&lt;/a&gt;
を利用してビルドする．
手元ではこれでDebug, Relaseどちらも動作することを確認した．
Brian Delgadoさん，情報をどうもありがとうございました．&lt;/p&gt;</content><author><name></name></author><summary type="html">MinnowboardはIntel Atomを搭載した シングルボードコンピュータである． Minnowboardを使った実験で誤ったファームウェアを書き込んでしまい brick (文鎮化) させてしまったので SPI Flashを外部から書き換えることで復旧させる．</summary></entry><entry><title type="html">ELVMのEFI Byte Codeバックエンドを作る</title><link href="https://retrage.github.io/2019/07/13/elvm-ebc.html" rel="alternate" type="text/html" title="ELVMのEFI Byte Codeバックエンドを作る" /><published>2019-07-13T08:23:26+00:00</published><updated>2019-07-13T08:23:26+00:00</updated><id>https://retrage.github.io/2019/07/13/elvm-ebc</id><content type="html" xml:base="https://retrage.github.io/2019/07/13/elvm-ebc.html">&lt;p&gt;ここでは
&lt;a href=&quot;https://github.com/shinh/elvm&quot;&gt;ELVM&lt;/a&gt;
のEFI Byte Codeバックエンドについて紹介する．
特にELVM IRとEFI Byte Codeのsemantic gapに注目する．&lt;/p&gt;

&lt;h2 id=&quot;efi-byte-codeについて&quot;&gt;EFI Byte Codeについて&lt;/h2&gt;

&lt;p&gt;EFI Byte Code (EBC)はUEFI Specificationで定義されている
アーキテクチャ非依存なUEFI向けデバイスドライバのための仮想マシンである，
EBCの詳細については過去の記事である
&lt;a href=&quot;https://retrage.github.io/2018/11/11/efi-byte-code-myth.html&quot;&gt;EFI Byte Code解説&lt;/a&gt;
を参考にしたい．&lt;/p&gt;

&lt;h2 id=&quot;ebcバックエンドのビルドとテスト&quot;&gt;EBCバックエンドのビルドとテスト&lt;/h2&gt;

&lt;p&gt;コードは以下で公開している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/retrage/elvm/tree/retrage/ebcvm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下でビルドとebcvmによるテストが行える．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/retrage/elvm.git
$ cd elvm &amp;amp;&amp;amp; git checkout retrage/ebcvm
$ make ebc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;バックエンドの概要&quot;&gt;バックエンドの概要&lt;/h2&gt;

&lt;p&gt;EBCは64-bitなlittle endianなアーキテクチャであり，
UEFIの仕様ではEBCのバイナリフォーマットはPE32+である．
ELVMにはLinux向けのx86_32とARMのバックエンドが存在し，これらは直接ELFを出力する．
一方でPEのサポートがないため新たにPEの出力をELVMに追加した．&lt;/p&gt;

&lt;p&gt;EBCバックエンドの構成は既存のx86_32やARMのバックエンドを参考にしている．
出力されるPEは&lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt;セクションと&lt;code class=&quot;highlighter-rouge&quot;&gt;.rodata&lt;/code&gt;セクションの2つのセクションを持つ．
&lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt;セクションにはELVM IRから変換したコードが配置され，
&lt;code class=&quot;highlighter-rouge&quot;&gt;.rodata&lt;/code&gt;セクションには後述のELVM IRでのプログラムカウンタと実アドレスのテーブルが配置される．&lt;/p&gt;

&lt;h2 id=&quot;pc2addrの作成&quot;&gt;pc2addrの作成&lt;/h2&gt;

&lt;p&gt;ELVM IRでは&lt;code class=&quot;highlighter-rouge&quot;&gt;JMP&lt;/code&gt;命令などのターゲットのアドレスを
ELVM IRにおけるプログラムカウンタの値で保持している．
一方でEBCではターゲットのアドレスは実アドレスでなければならない．
このため，ELVM IRでのプログラムカウンタの値と実アドレスの対応表を作成する必要がある．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;// pc_cnt: get program counter count&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pc_cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最初にELVM IRのtextの命令数を&lt;code class=&quot;highlighter-rouge&quot;&gt;pc_cnt&lt;/code&gt;に数え上げる．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;// pc2addr: table from pc to addr&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc2addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev_pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev_pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;pc2addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emit_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prev_pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ebc_emit_inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc2addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次に&lt;code class=&quot;highlighter-rouge&quot;&gt;pc2addr&lt;/code&gt;にプログラムカウンタの値をインデックスとして
実アドレスの値のテーブルを作成する．
ここで&lt;code class=&quot;highlighter-rouge&quot;&gt;ebc_emit_inst()&lt;/code&gt;を呼んでいるが，
実際にEBCの命令を出力しているのではなく出力される命令の大きさ分
&lt;code class=&quot;highlighter-rouge&quot;&gt;g_emit_cnt&lt;/code&gt;をインクリメントしているだけである．&lt;/p&gt;

&lt;h2 id=&quot;ヘッダの生成&quot;&gt;ヘッダの生成&lt;/h2&gt;

&lt;p&gt;ELFやPEなどのバイナリフォーマットでは各セクションの大きさが
正しくヘッダに書き込まれている必要がある．
このため，実際にバイナリを出力する前に必ず先にセクションの大きさを計算して置く必要がある．
既に&lt;code class=&quot;highlighter-rouge&quot;&gt;g_emit_cnt&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;pc_cnt&lt;/code&gt;に必要な値が取得できているので，
これらを元に出力する．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PE_HEADER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PE_SEC_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emit_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PE_HEADER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PE_FILE_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PE_FILE_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PE_FILE_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x60000020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r-x exec&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rodata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.rodata&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rodata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PE_SEC_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rodata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rodata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PE_FILE_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                                    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PE_FILE_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rodata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rodata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PE_FILE_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rodata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x40000040&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r-- inited&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imagesz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PE_SEC_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;imagesz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PE_SEC_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;imagesz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rodata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PE_SEC_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// generate PE header&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;emit_headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imagesz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;elvm-irとebcの対応&quot;&gt;ELVM IRとEBCの対応&lt;/h2&gt;

&lt;p&gt;ELVM IRはA, B, C, D, SP, BPの6個のレジスタを持つ．
一方EBCはR0, R1, R2, R3, R4, R5, R6, R7, IP, FLAGSの10個のレジスタを持つ．
このうちR0はスタックポインタとして予約されているため，
以下のように対応させる．
なお，R7は保存する必要のないレジスタとした．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBCREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// A - R1&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// B - R2&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// C - R3&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// D - R4&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// BP - R5&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// SP - R6&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// R7 - free register&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// R0 - stack pointer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;前述の通り，ELVM IRとEBCにはsemantic gapが存在するため，
これを埋めるように実装を行う．&lt;/p&gt;

&lt;h3 id=&quot;setcc&quot;&gt;setcc&lt;/h3&gt;

&lt;p&gt;ELVM IRにおいてEQ, NE, LT, GT, LE, GEなどのsetcc命令は
srcとdstの2つのオペランドを持ち，
dstとsrcを比較し結果をdstに0, 1で代入するというものである．&lt;/p&gt;

&lt;p&gt;一方EBCではCMP命令が存在するが，
これはOperand1とOperand2の2つオペランドを持ち，
これらを比較して結果をFLAGSの0-bitにあるCフラグを設定するというものである．
ELVM IRのsetccと対応させるためには次の2つの問題がある．&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CMP命令の結果をOperand1に代入する必要がある．&lt;/li&gt;
  &lt;li&gt;ELVM IRにあるLT, GTに相当するものが存在しない．&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1つ目の問題については以下のようなコードを生成することで対応させる．
CMP命令の結果によって設定されたCフラグを元にconditional branchを行い
それぞれ飛んだ先でdstの値を設定する．
なお，CMP命令にはELVM IRのNEに相当するものが存在しないが，
conditional branchの設定を変えることでこれに対応できる．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;    CMP32 dst, src
    JMP8[cc/cs] .L1
.L0:
    MOVIdd dst, 0x01
    JMP8 .L2
.L1:
    MOVIdd dst, 0x00
    JMP8 .L2
.L2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2つ目の問題についてELVM IRでは扱う値が整数のみであるため，
以下のようなコードで対応できる．
まずGTであればGE，LTであればLEで比較を行い
その結果が0であればそのまま0をdstに代入する．
結果が1であればさらにEQで比較を行う．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;    CMP32 dst, src
    JMP8cc .L1
    CMPeq dst, src
    JMP8cs .L1
.L0:
    MOVIdd dst, 0x01
    JMP8 .L2
.L1:
    MOVIdd dst, 0x00
    JMP8 .L2
.L2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;jcc&quot;&gt;jcc&lt;/h3&gt;

&lt;p&gt;ELVM IRのJEQ, JNE, JLT, JGT, GLE, JGEなどのjcc命令についても
setcc命令と同様である．
ただし，ジャンプを行う点で大きく異なり，前述の&lt;code class=&quot;highlighter-rouge&quot;&gt;pc2addr&lt;/code&gt;テーブルを用いる．
&lt;code class=&quot;highlighter-rouge&quot;&gt;pc2addr&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;.rodata&lt;/code&gt;に存在するため&lt;code class=&quot;highlighter-rouge&quot;&gt;.rodata&lt;/code&gt;の先頭アドレスを取得し
ELVM IRのプログラムカウンタの値を添字として目的のアドレスの値を取得する．
以下が該当部分のコードである．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// MOVREL R1, rodata&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;emit_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBCREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;emit_le&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rodata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emit_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;emit_ebc_mov_imm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x04&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;emit_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EBCREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBCREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// MUL64 R7, R2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;emit_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EBCREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBCREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ADD64 R7, R1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;emit_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EBCREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBCREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// MOVdd R7, @R7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;putcgetc&quot;&gt;PUTC/GETC&lt;/h2&gt;

&lt;p&gt;EBCは単体では外部にアクセスすることができない．
そのため，UEFIのnativeの機能を&lt;code class=&quot;highlighter-rouge&quot;&gt;CALLex&lt;/code&gt;により呼び出すことで
文字の読み書きを実現する．ここではPUTCを例に挙げる．&lt;/p&gt;

&lt;p&gt;UEFIでは文字の出力はSystemTableに含まれるConOutがStdErrを利用する．
これらはSimple Text Output Protocolであり，実際に文字の出力を行うのは
&lt;code class=&quot;highlighter-rouge&quot;&gt;OutputString()&lt;/code&gt;である，&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EFI_STATUS&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EFIAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EFI_TEXT_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHAR16&lt;/span&gt;                           &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここに示すように第2引数に出力したい文字列へのポインタを渡すようになっている．
EBCの呼出規約はCDECLであり，
関数の引数は全てスタック経由で渡すように定められている．
この場合，逆順に&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;が先にスタックにプッシュされることとなる，
ここで&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;はCHAR16のポインタであることに注意したい．&lt;/p&gt;

&lt;p&gt;渡される&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;はEBCのバックエンドではスタック上に確保した8-byteの領域となっている．
以下に対応するコードを示す．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;n&quot;&gt;emit_ebc_mov&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;emit_ebc_mov_imm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;emit_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBCREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PUSH64 R2; String&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;emit_ebc_mov_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// MOVbw @R2, R7&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;emit_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EBCREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x08&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBCREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最初にR7に出力したい文字を代入し，R2に0xff00を代入する．
R2をプッシュしスタック上に&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;となる領域を確保する．
R2にスタックポインタR0の値を代入しR7の値を確保した領域にコピーする．
以上の操作でR2の指すスタック上の領域は次のようになる．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00 00 00 00 00 00 ff xx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでxxは出力される文字であり，ff以降の00 00は終端文字として扱われる．
間にffを入れている理由については後述する．&lt;/p&gt;

&lt;p&gt;次に&lt;code class=&quot;highlighter-rouge&quot;&gt;CALLex&lt;/code&gt;を呼ぶためにConOutの&lt;code class=&quot;highlighter-rouge&quot;&gt;OutputString()&lt;/code&gt;のアドレスを計算する．
ここで注意したいのはSystemTableのアドレスはnativeなものであり，
アドレスは環境依存である点である．
EBCにはNatural Indexと呼ばれる環境依存のアドレスに対応するための仕様が存在するため
これを用いてアドレスを計算する．&lt;/p&gt;

&lt;p&gt;UEFIのイメージのエントリポイントからConOutの&lt;code class=&quot;highlighter-rouge&quot;&gt;OutputString()&lt;/code&gt;までは
SystemTable-&amp;gt;ConOut-&amp;gt;OutputStringとたどれるようになっている．&lt;/p&gt;

&lt;p&gt;R1に&lt;code class=&quot;highlighter-rouge&quot;&gt;OutputString()&lt;/code&gt;のアドレス，R2に&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;のアドレスが代入されたので
これらをプッシュして&lt;code class=&quot;highlighter-rouge&quot;&gt;CALLex&lt;/code&gt;を呼ぶ．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;n&quot;&gt;emit_4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// MOVqw R7, R0 (0, +40)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;emit_4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// MOVn R1, @R7(.SystemTable)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;emit_4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x91&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// MOVn R1, @R1(.ConOut)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;emit_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PUSHn R2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;emit_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PUSHn R1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;emit_6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// CALLEX @R1(.OutputString)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;終端文字の扱いについて&quot;&gt;終端文字の扱いについて&lt;/h3&gt;

&lt;p&gt;TianoCoreの実装では&lt;code class=&quot;highlighter-rouge&quot;&gt;CHAR_NULL&lt;/code&gt;=0x0000を終端文字としているが，
ELVMのテストでは標準入出力を用いてバイナリの入出力を行っている．
このため，出力したいCHAR16文字の後半を0x00としてしまうと
期待される出力が0x00だった場合に終端文字として扱われてしまう．
そこで出力されるCHAR16の後半を0xffで埋めることでこれを回避する．
実際に文字を出力する際には0x00ffでマスクをかけて文字を得る．&lt;/p&gt;

&lt;h2 id=&quot;テスト&quot;&gt;テスト&lt;/h2&gt;

&lt;p&gt;以上のように実装したEBCバックエンドだが，
ELVMのテストはUnix-likeな環境を想定しており，UEFI Shellではテストができない．
そこで以前に作成したユーザ空間で動作するEBCの実装である
&lt;a href=&quot;https://github.com/yabits/ebcvm&quot;&gt;ebcvm&lt;/a&gt;
を用いてテストを行った．
ebcvmについては
&lt;a href=&quot;https://retrage.github.io/2018/12/19/introduction-to-ebcvm.html&quot;&gt;ebcvm: A Usermode EFI Byte Code Virtual Machine&lt;/a&gt;
で紹介している．&lt;/p&gt;

&lt;p&gt;ELVMのテストで生成されたバイナリの一部はQEMU上のOVMFで実際に動作する．
以下はCで書かれたfizzbuzzの実行結果の一部である．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FS0:\bin\&amp;gt; fizzbuzz_fast.c.eir.ebc
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
Fizz
22
23
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">ここでは ELVM のEFI Byte Codeバックエンドについて紹介する． 特にELVM IRとEFI Byte Codeのsemantic gapに注目する．</summary></entry><entry><title type="html">Librarizing Linux kernel for Unikernels</title><link href="https://retrage.github.io/2019/06/02/lkl-on-unikraft-en.html" rel="alternate" type="text/html" title="Librarizing Linux kernel for Unikernels" /><published>2019-06-02T10:35:32+00:00</published><updated>2019-06-02T10:35:32+00:00</updated><id>https://retrage.github.io/2019/06/02/lkl-on-unikraft-en</id><content type="html" xml:base="https://retrage.github.io/2019/06/02/lkl-on-unikraft-en.html">&lt;p&gt;I ported the Linux kernel to Unikraft as an external library.
This makes it possible to reuse the rich functions of the Linux kernel
for Unikernel with less functionality.
In this blog post, I describe the overview of the library.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;h3 id=&quot;linux-kernel-library&quot;&gt;Linux Kernel Library&lt;/h3&gt;

&lt;p&gt;The Linux kernel is a well-maintained mature open source OS kernel.
Recently, there have been researches that propose reuse its components.
&lt;a href=&quot;https://github.com/lkl/linux&quot;&gt;The Linux Kernel Library (LKL)&lt;/a&gt;
is one of them, which uses the Linux kernel as a form of Library OS
with minimum modifications.
LKL is not currently official Linux project,
but it is actively being developed (v4.19 is latest).
Below is the architecture of LKL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-architecture.png&quot; alt=&quot;The architecture of LKL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LKL has a host-independent architecture named &lt;code class=&quot;highlighter-rouge&quot;&gt;lkl&lt;/code&gt;,
and actual host-dependent code is separated from the arch.
The independent and dependent code is placed
under &lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl&lt;/code&gt; correspondingly.
For POSIX host environment, &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/lib/posix-host.c&lt;/code&gt; plays the role.&lt;/p&gt;

&lt;h3 id=&quot;unikraft&quot;&gt;Unikraft&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://xenproject.org/developers/teams/unikraft/&quot;&gt;Unikraft&lt;/a&gt;
is an experimental project by Xen Project
which aims to build small and lightweight Unikernel images
by providing divided Unikernel functions.
The following is the architecture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/unikraft-architecture.png&quot; alt=&quot;The architecture of Unikraft&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unikraft itself consists of three parts:
main libs, platform libs, and architecture libs.
main libs contain architecture and platform independent libraries.
platform libs provide platform dependent code as libraries.
It currently supports Xen, KVM, and Linux userspace as platforms.
architecture libs are libraries for architecture; x86, arm, and arm64.
A user has to specify the target architecture and platform by Kconfig
when building Unikraft application.
The Unikraft build system generates a Unikernel image
corresponding to each target.&lt;/p&gt;

&lt;p&gt;Unikraft supports external libraries along with internal libraries.
There are several official external libraries in public
such as newlib, lwip, compiler-rt, eigen,
libcxx, libcxxabi, libunwind, and libuuid.&lt;/p&gt;

&lt;p&gt;For more details about porting external libraries to Unikraft,
see &lt;a href=&quot;http://www.unikraft.org/developers-app.html&quot;&gt;External Library Development&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lkl-on-unikraft&quot;&gt;LKL on Unikraft&lt;/h2&gt;

&lt;p&gt;Since Unikraft is still at an early stage,
it does not have a mature network stack or file system.
To tackle this issue, we ported LKL as an external library for Unikraft.
Here we introduce two types of the port.&lt;/p&gt;

&lt;h3 id=&quot;lkl-on-unikraft-v1&quot;&gt;LKL on Unikraft v1&lt;/h3&gt;

&lt;p&gt;First of all, we integrated LKL to Unikraft build system.
The architecture is shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-on-unikraft-v1.png&quot; alt=&quot;The architecture of LKL on Unikraft v1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this version of the port,
we added new architecture and platform libraries for LKL.
They are just stub and only used when specified in Kconfig.
The disadvantage of this design is that
it is impossible to build LKL for other architectures or platforms.
In addition, it can not cooperate with other Unikraft libraries.&lt;/p&gt;

&lt;p&gt;The code is available at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/unikraft/tree/retrage/lkl&quot;&gt;uk-lkl/unikraft:retrage/lkl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lkl-on-unikraft-v2&quot;&gt;LKL on Unikraft v2&lt;/h3&gt;

&lt;p&gt;Next, we introduce v2 which can be used as an actual library.
Below is the overview.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-on-unikraft-v2.png&quot; alt=&quot;The architecture of LKL on Unikraft v2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By this design, we can choose any architecture and platform in concept
since LKL is separated from architecture and platform.
In addition, other Unikraft libraries can use LKL functions.&lt;/p&gt;

&lt;p&gt;For implementation, we added a new host-dependent code called &lt;code class=&quot;highlighter-rouge&quot;&gt;uk-host.c&lt;/code&gt;
to support Unikraft as a new LKL host environment.
The LKL host-dependent code requires some primitives
such as mutex, semaphore, thread, timer, etc. on the host side,
however, Unikraft main libs cannot satisfy the requirements
because of the lack of functionality.
Therefore, we ported these primitives
from &lt;a href=&quot;https://github.com/littlekernel/lk&quot;&gt;littlekernel&lt;/a&gt;, an embedded kernel to LKL.
The only LKL host has to do is that
calling callback functions periodic time to run the preemptive scheduler.
The port of littlekernel is independent of Unikraft.
Here is the implementation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/retrage/linux/tree/retrage/fiber&quot;&gt;retrage/linux:retrage/fiber&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;implementation&quot;&gt;Implementation&lt;/h4&gt;

&lt;p&gt;The port of LKL supports only x86_64 architecture and KVM platform
for some reasons.&lt;/p&gt;

&lt;p&gt;Unikraft has two types of libc implementation, newlib, and nolibc.
newlib is an official external library that supports full libc functions.
On the other hand, nolibc provides minimal libc functions
so that general libc functions can be used even if newlib does not exist.
This version of LKL port is designed to work with nolibc
to reduce dependencies.
However, since nolibc have enough functions and constants required by LKL,
we added the following functions and constants to nolibc.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;stdbool&lt;/li&gt;
  &lt;li&gt;fputc, putchar&lt;/li&gt;
  &lt;li&gt;STD{IN,OUT,ERR}_FILENO&lt;/li&gt;
  &lt;li&gt;strncat&lt;/li&gt;
  &lt;li&gt;strtok_r&lt;/li&gt;
  &lt;li&gt;setjmp/longjmp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The modified LKL expects the callback function is called periodically
as mentioned above, but Unikraft does not provide an interface
to register a callback function.
Fortunately, it starts a periodic timer at startup,
so we just added the interface.&lt;/p&gt;

&lt;p&gt;In the KVM platform, a final image is generated using the custom linker script.
Since The LKL binary &lt;code class=&quot;highlighter-rouge&quot;&gt;liblkl.o&lt;/code&gt; has symbols
that are not referred explicitly,
they are deleted or hidden by linking using the linker script.
For this reason, the linker script is modified
so that the symbols from LKL are kept correctly.&lt;/p&gt;

&lt;p&gt;The modified Unikraft and the port of LKL is here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/unikraft/tree/retrage/lkl-v2&quot;&gt;uk-lkl/unikraft:retrage/lkl-v2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/lkl&quot;&gt;uk-lkl/lkl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;demonstration&quot;&gt;Demonstration&lt;/h4&gt;

&lt;p&gt;To demonstrate LKL on Unikraft,
we ported &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/tests/boot&lt;/code&gt; from LKL as &lt;a href=&quot;https://github.com/uk-lkl/boot&quot;&gt;uk-lkl/boot&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir unikraft &amp;amp;&amp;amp; cd unikraft
$ git clone git@github.com:uk-lkl/unikraft.git --branch=retrage/lkl-v2
$ mkdir libs &amp;amp;&amp;amp; cd libs
$ git clone --recursive git@github.com:uk-lkl/lkl.git
$ cd ..
$ mkdir apps &amp;amp;&amp;amp; cd apps
$ git clone git@github.com:uk-lkl/boot.git
$ cd boot
$ make menuconfi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Select x86 architecture and KVM guest platform.
Save and exit Kconfig. Then, run make.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To run the final image, run &lt;code class=&quot;highlighter-rouge&quot;&gt;run.sh&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./run.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will output as follow:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[    0.721134] ERR:  [libukboot] boot.c @ 88   : Failed to initialize bus driver 0x56b060: -1
Welcome to  _ __             _____
 __ _____  (_) /__ _______ _/ _/ /_
/ // / _ \/ /  '_// __/ _ `/ _/ __/
\_,_/_//_/_/_/\_\/_/  \_,_/_/ \__/
                  Titan 0.2~ebcb42a
1..33 # boot
* 1 mutex
ok 1 mutex
 ---
 time_us: 0
 log: |
 ...
* 2 semaphore
ok 2 semaphore
 ---
 time_us: 0
 log: |
 ...
* 3 join
ok 3 join
 ---
 time_us: 1
 log: |
  joined 7909384
 ...
* 4 start_kernel
ok 4 start_kernel
 ---
 time_us: 9281
 log: |
  [    0.000000] Linux version 4.19.0+ (akira@akira-Z270) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.11)) #1 Thu May 30 23:10:09 JST 2019
  [    0.000000] bootmem address range: 0x1c001000 - 0x1d000000
  [    0.000000] On node 0 totalpages: 4095
  [    0.000000]   Normal zone: 56 pages used for memmap
  [    0.000000]   Normal zone: 0 pages reserved
  [    0.000000]   Normal zone: 4095 pages, LIFO batch:0
  [    0.000000] pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768
  [    0.000000] pcpu-alloc: [0] 0 
  [    0.000000] Built 1 zonelists, mobility grouping off.  Total pages: 4039
  [    0.000000] Kernel command line: mem=16M loglevel=8
  [    0.000000] Dentry cache hash table entries: 2048 (order: 2, 16384 bytes)
  [    0.000000] Inode-cache hash table entries: 1024 (order: 1, 8192 bytes)
  [    0.000000] Memory available: 16088k/16380k RAM
  [    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
  [    0.000000] NR_IRQS: 4096
  [    0.000000] lkl: irqs initialized
  [    0.000000] clocksource: lkl: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns
  [    0.198000] lkl: time and timers initialized (irq1)
  [    2.093000] pid_max: default: 4096 minimum: 301
  [   15.926000] Mount-cache hash table entries: 512 (order: 0, 4096 bytes)
  [   18.024000] Mountpoint-cache hash table entries: 512 (order: 0, 4096 bytes)
  [ 2722.817000] console [lkl_console0] enabled
  [ 2732.709000] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
  [ 2760.874000] random: get_random_u32 called from bucket_table_alloc.isra.6+0x9b/0x250 with crng_init=0
  [ 2774.823000] NET: Registered protocol family 16
  [ 3121.319000] clocksource: Switched to clocksource lkl
  [ 3181.520000] NET: Registered protocol family 2
  [ 3261.648000] tcp_listen_portaddr_hash hash table entries: 256 (order: 0, 4096 bytes)
  [ 3263.125000] TCP established hash table entries: 512 (order: 0, 4096 bytes)
  [ 3264.198000] TCP bind hash table entries: 512 (order: 0, 4096 bytes)
  [ 3265.141000] TCP: Hash tables configured (established 512 bind 512)
  [ 3286.743000] UDP hash table entries: 128 (order: 0, 4096 bytes)
  [ 3287.830000] UDP-Lite hash table entries: 128 (order: 0, 4096 bytes)
  [ 3456.331000] workingset: timestamp_bits=62 max_order=12 bucket_order=0
  [ 4041.077000] SGI XFS with ACLs, security attributes, no debug enabled
  [ 6032.987000] jitterentropy: Initialization failed with host not compliant with requirements: 2
  [ 6038.248000] io scheduler noop registered
  [ 6038.908000] io scheduler deadline registered
  [ 6067.383000] io scheduler cfq registered (default)
  [ 6068.093000] io scheduler mq-deadline registered
  [ 6068.764000] io scheduler kyber registered
  [ 7894.266000] NET: Registered protocol family 10
  [ 7979.259000] Segment Routing with IPv6
  [ 7988.492000] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
  [ 8097.859000] Warning: unable to open an initial console.
  [ 8106.456000] This architecture does not have kernel memory protection.
  [ 8107.119000] Run /init as init process
  lkl_start_kernel(&amp;amp;lkl_host_ops, &quot;mem=16M loglevel=8&quot;) = 0 
 ...
* 5 getpid
ok 5 getpid
 ---
 time_us: 5
 log: |
  lkl_sys_getpid() = 1 
 ...
* 6 syscall_latency
ok 6 syscall_latency
 ---
 time_us: 126
 log: |
  avg/min/max: lkl:107822000/104000000/450000000 native:6788000/6000000/77000000
 ...
* 7 umask
ok 7 umask
 ---
 time_us: 0
 log: |
  lkl_sys_umask(0777) = 18 
 ...
* 8 umask2
ok 8 umask2
 ---
 time_us: 0
 log: |
  lkl_sys_umask(0) = 511 
 ...
* 9 creat
ok 9 creat
 ---
 time_us: 9
 log: |
  lkl_sys_creat(&quot;/file&quot;, access_rights) = 0 
 ...
* 10 close
ok 10 close
 ---
 time_us: 0
 log: |
  lkl_sys_close(0) = 0 
 ...
* 11 failopen
ok 11 failopen
 ---
 time_us: 9
 log: |
  lkl_sys_open(&quot;/file2&quot;, 0, 0) = -2 No such file or directory
 ...
* 12 open
ok 12 open
 ---
 time_us: 7
 log: |
  lkl_sys_open(&quot;/file&quot;, LKL_O_RDWR, 0) = 0 
 ...
* 13 write
ok 13 write
 ---
 time_us: 4
 log: |
  lkl_sys_write(0, wrbuf, sizeof(wrbuf)) = 5 
 ...
* 14 lseek_cur
ok 14 lseek_cur
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_CUR) = 5 
 ...
* 15 lseek_end
ok 15 lseek_end
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_END) = 5 
 ...
* 16 lseek_set
ok 16 lseek_set
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_SET) = 0 
 ...
* 17 read
ok 17 read
 ---
 time_us: 1
 log: |
  lkl_sys_read=5 buf=test
 ...
* 18 fstat
ok 18 fstat
 ---
 time_us: 1
 log: |
  lkl_sys_fstat=0 mode=100721 size=5
 ...
* 19 mkdir
ok 19 mkdir
 ---
 time_us: 8
 log: |
  lkl_sys_mkdir(&quot;/mnt&quot;, access_rights) = 0 
 ...
* 20 stat
ok 20 stat
 ---
 time_us: 7
 log: |
  lkl_sys_stat(&quot;/mnt&quot;)=0 mode=40721
 ...
* 21 pipe2
ok 21 pipe2
 ---
 time_us: 9
 log: |
 ...
* 22 epoll
ok 22 epoll
 ---
 time_us: 5
 log: |
 ...
* 23 mount_fs_proc
ok 23 mount_fs_proc
 ---
 time_us: 18
 log: |
  lkl_mount_fs(&quot;proc&quot;) = 0 
 ...
* 24 chdir_proc
ok 24 chdir_proc
 ---
 time_us: 7
 log: |
  lkl_sys_chdir(&quot;proc&quot;) = 0 
 ...
* 25 open_cwd
ok 25 open_cwd
 ---
 time_us: 7
 log: |
 ...
* 26 getdents64
ok 26 getdents64
 ---
 time_us: 6
 log: |
  4 . .. fs bus irq net sys tty kmsg maps misc stat iomem crypto driver 
  mounts uptime vmstat cmdline cpuinfo devices ioports loadavg meminfo version 
  consoles kallsyms slabinfo softirqs zoneinfo buddyinfo diskstats interrupts 
  partitions timer_list 
 ...
* 27 close_dir_fd
ok 27 close_dir_fd
 ---
 time_us: 0
 log: |
  lkl_sys_close(dir_fd) = 0 
 ...
* 28 chdir_root
ok 28 chdir_root
 ---
 time_us: 7
 log: |
  lkl_sys_chdir(&quot;/&quot;) = 0 
 ...
* 29 umount_fs_proc
ok 29 umount_fs_proc
 ---
 time_us: 11
 log: |
  lkl_umount_timeout(&quot;proc&quot;, 0, 1000) = 0 
 ...
* 30 lo_ifup
ok 30 lo_ifup
 ---
 time_us: 44
 log: |
  lkl_if_up(1) = 0 
 ...
* 31 gettid
ok 31 gettid
 ---
 time_us: 0
 log: |
  7893000
 ...
* 32 many_syscall_threads
ok 32 many_syscall_threads
 ---
 time_us: 26
 log: |
 ...
* 33 stop_kernel
ok 33 stop_kernel
 ---
 time_us: 531
 log: |
  [145272.871000] reboot: Restarting system
  lkl_sys_halt() = 0 
 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;/h2&gt;

&lt;p&gt;The current LKL on Unikraft has the following issues.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It needs modifications to Unikraft.&lt;/li&gt;
  &lt;li&gt;It does not support disk operations and networks.&lt;/li&gt;
  &lt;li&gt;It hangs under some certain situations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first issue is described above in details.
The second issue is 
because of the lack of file system and network support by Unikraft.
The third issue is not only on Unikraft,
but also with &lt;a href=&quot;https://github.com/retrage/linux/tree/retrage/fiber&quot;&gt;retrage/linux:retrage/fiber&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a design issue,
the use of Linux kernel does not match with Unikraft policy.
Unikraft aims to build ‘slim’ Unikernel images
by building the necessary libraries,
but LKL reuses existing Linux kernel which is ‘fat’.
The size of the final image tends to be large if LKL is integrated.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/document/5541547&quot;&gt;LKL: The Linux kernel library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xenproject.org/developers/teams/unikraft/&quot;&gt;Unikraft - Xen Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/sites/default/files/conference/protected-files/lisa18_slides_kuenzer.pdf&quot;&gt;Unikraft: Unikernels Made Easy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unikraft.org/&quot;&gt;Unikraft’s Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I ported the Linux kernel to Unikraft as an external library. This makes it possible to reuse the rich functions of the Linux kernel for Unikernel with less functionality. In this blog post, I describe the overview of the library.</summary></entry><entry><title type="html">Linux kernelをUnikernelのライブラリ化する</title><link href="https://retrage.github.io/2019/05/30/lkl-on-unikraft.html" rel="alternate" type="text/html" title="Linux kernelをUnikernelのライブラリ化する" /><published>2019-05-30T14:26:23+00:00</published><updated>2019-05-30T14:26:23+00:00</updated><id>https://retrage.github.io/2019/05/30/lkl-on-unikraft</id><content type="html" xml:base="https://retrage.github.io/2019/05/30/lkl-on-unikraft.html">&lt;p&gt;Linux kernelをUnikraftのライブラリ化した．
これにより機能の少ないUnikernelの資源として
Linux kernelの持つ機能を利用することが可能となる．&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;h3 id=&quot;linux-kernel-library&quot;&gt;Linux Kernel Library&lt;/h3&gt;

&lt;p&gt;Linux kernelはよくメンテナンスされている成熟した
オープンソースなOSの代表であるが，
近年その機能を効率よく再利用しようとする動きがある．
&lt;a href=&quot;https://github.com/lkl/linux&quot;&gt;Linux Kernel Library (LKL)&lt;/a&gt;
はその一つであり，
最小限のコストでLinux kernelをanykernelと呼ばれる
形態のLibrary OSとして利用するものである．
LKLは現在公式のLinux kernelには含まれていないが
活発に開発がなされており，
現時点でv4.19がサポートされている．
以下にLKLの構成を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-architecture.png&quot; alt=&quot;LKLの構成&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LKLは&lt;code class=&quot;highlighter-rouge&quot;&gt;lkl&lt;/code&gt;というホスト非依存なアーキテクチャを定義し，
実際に各ホストに依存する部分は分離されている，&lt;/p&gt;

&lt;p&gt;LKLは&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl&lt;/code&gt;以下にホスト非依存のコードを配置し，
&lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/&lt;/code&gt;以下にホスト依存のコードが配置されている．
特に&lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/lib/posix-host.c&lt;/code&gt;には
POSIXなホスト環境で利用されるコードが置かれている．&lt;/p&gt;

&lt;h3 id=&quot;unikraft&quot;&gt;Unikraft&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://xenproject.org/developers/teams/unikraft/&quot;&gt;Unikraft&lt;/a&gt;
はUnikernelを分割し，
アプリケーションが必要とする機能のみを提供することにより
イメージサイズが小さくかつ軽量なUnikernelを実現する
Xen Projectの実験プロジェクトである．
以下にUnikraftの構成を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/unikraft-architecture.png&quot; alt=&quot;Unikraftの構成&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unikraft本体は
main libs，platform libs，architecture libsの
大きく3つに分けることができる．
main libsにはアーキテクチャやプラットフォームに依存しない
ライブラリ群が含まれる．
platform libsには対応するプラットフォーム依存のコードが
ライブラリとして提供されている．
現時点でpaltform libsには
Xen．KVM，Linux userspaceの3つが存在し，
architecture libsには
x86, arm, arm64の3つが存在する．
Unikraftはビルド時にKconfigにより
ターゲットとなるアーキテクチャとプラットフォームを指定し
それぞれのホストに対応したUnikernelのイメージを生成する．&lt;/p&gt;

&lt;p&gt;Unikraftでは本体に含まれるライブラリ以外に
アプリケーションや外部ライブラリが導入できる．
アプリケーションは
&lt;a href=&quot;http://www.unikraft.org/developers-app.html&quot;&gt;Application Development and Porting&lt;/a&gt;
に記述されている通りのMakefileを書くことにより
少ない労力でUnikraft向けのアプリケーションをビルドできる．
Unikraft本体以外の外部ライブラリについても
&lt;a href=&quot;http://www.unikraft.org/developers-app.html&quot;&gt;External Library Development&lt;/a&gt;
の記述通りにMakefile.ukを作成することで
ライブラリを導入できる．&lt;/p&gt;

&lt;p&gt;Unikraftでは現在公式の外部ライブラリとして
newlib, lwip, compiler-rt, eigen, libcxx, libcxxabi, libunwind, libuuidが公開されている．&lt;/p&gt;

&lt;h2 id=&quot;lkl-on-unikraft&quot;&gt;LKL on Unikraft&lt;/h2&gt;

&lt;p&gt;Unikraftは前述の通り本体にライブラリを持っているが，
Linuxのような成熟したネットワークスタックや
ファイルシステムなどを持っていない．
そこで，LKLをUnikraftの外部ライブラリとして移植することにより，
この問題点を解消することを目指す．
ここでは二種類の移植を紹介する．&lt;/p&gt;

&lt;h3 id=&quot;lkl-on-unikraft-v1&quot;&gt;LKL on Unikraft v1&lt;/h3&gt;

&lt;p&gt;最初にUnikraftのビルドシステムのみを利用したLKLの移植を行った．
以下にその構成を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-on-unikraft-v1.png&quot; alt=&quot;LKL on Unikraft v1の構成&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この構成ではLKL向けの
Unikraftのアーキテクチャとプラットフォームを新たに追加した．
このアーキテクチャとプラットフォームはstubであり，
Kconfigで指定する際に利用するのみである．
また，この設計では他のアーキテクチャやプラットフォームを指定して
LKLをビルドすることは不可能となっている．
また，LKLをUnikraftのライブラリと連携させることも不可能となっている．&lt;/p&gt;

&lt;p&gt;この構成のUnikraftは以下で公開している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/unikraft/tree/retrage/lkl&quot;&gt;uk-lkl/unikraft:retrage/lkl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lkl-on-unikraft-v2&quot;&gt;LKL on Unikraft v2&lt;/h2&gt;

&lt;p&gt;次に実際にLKLをUnikraftに移植したv2を紹介する．
以下にその構成を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-on-unikraft-v2.png&quot; alt=&quot;LKL on Unikraft v2の構成&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この構成ではLKLをUnikraftの外部ライブラリとして移植するため，
アーキテクチャやプラットフォームはUnikraft由来のものが利用可能である．
また，v1では不可能だったUnikraftの他のライブラリとの連携も可能となっている．
LKL側から見た場合，Unikraftは新しいホスト環境となるため，
&lt;code class=&quot;highlighter-rouge&quot;&gt;uk-host.c&lt;/code&gt;という新しいホスト依存コードを作成している．&lt;/p&gt;

&lt;p&gt;実装上，LKLのホスト依存コードは
mutex, semaphore, thread, timerなどを
ホスト側でサポートしている必要がある．
一方Unikraftでは現在cooporative schedulerのみ実装されており，
LKLの期待するpreemptive schedulerを持っていない．
また，Unikraftの持っているmutexやsemaphoreなども貧弱なため，
これらを利用することができない．
そこで，&lt;a href=&quot;https://github.com/littlekernel/lk&quot;&gt;littlekernel&lt;/a&gt;
という組み込み向けOSよりこれらの機能を移植することにより
この問題を解決する．
LKLに対してlittlekernelのコードを移植し．
ホスト側では一定時間にコールバック関数を呼び出しさえすれば
preemptive schedulerが動作するようにした．
これについてはUnikraftとは分離し独立した実装となるようにした．
このLKLの実装は以下で公開している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/retrage/linux/tree/retrage/fiber&quot;&gt;retrage/linux:retrage/fiber&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;実装&quot;&gt;実装&lt;/h3&gt;

&lt;p&gt;この実装ではターゲットのアーキテクチャをx86_64のみとし，
プラットフォームはKVMのみとしている．&lt;/p&gt;

&lt;p&gt;Unikraftは外部ライブラリとして
libcの実装の一つであるnewlibを持っている．
一方でUniraftはnewlibを利用しない場合でも
一般的なlibcの機能が利用できるように
&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/nolibc&lt;/code&gt;という内部ライブラリを提供している．
LKL on Unikraft v2でもnewlibに依存しないようにするため，
このnolibcを用いるように設計している．
一方でLKLの期待するlibcの関数や定数をnolibcが持っていなかったため，
Unikraftに対して次のような関数や定数をnolibcに追加している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;stdbool&lt;/li&gt;
  &lt;li&gt;fputc, putchar&lt;/li&gt;
  &lt;li&gt;STD{IN,OUT,ERR}_FILENO&lt;/li&gt;
  &lt;li&gt;strncat&lt;/li&gt;
  &lt;li&gt;strtok_r&lt;/li&gt;
  &lt;li&gt;setjmp/longjmp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また，前述の通りLKLは最低限一定時間ごとに
あるコールバック関数が呼び出される必要があるが，
Unikraftは起動時にperiodic timerを起動するものの，
ライブラリやアプリケーションからはコールバック関数を登録できないため，
コールバック関数を登録するようなインターフェースを追加している．&lt;/p&gt;

&lt;p&gt;またKVMでは独自のリンカスクリプトを用いてリンクを行うが，デフォルトではLinux kernel由来のシンボルが明示的に参照されないために必要なシンボルが削除されてしまう．このためリンカスクリプトに対してLKL向けの記述を追加している．&lt;/p&gt;

&lt;p&gt;以上の修正を行ったUnikraftとUnikraft向けライブラリ化したLKLは以下で公開している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/unikraft/tree/retrage/lkl-v2&quot;&gt;uk-lkl/unikraft:retrage/lkl-v2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/lkl&quot;&gt;uk-lkl/lkl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ビルドと実行&quot;&gt;ビルドと実行&lt;/h3&gt;

&lt;p&gt;Unikraft向けのLKLをビルドしてみる．
ここではLKLの機能を確認するためのテストアプリケーションである
&lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/tests/boot&lt;/code&gt;をUnikraftアプリケーション化した
&lt;a href=&quot;https://github.com/uk-lkl/boot&quot;&gt;uk-lkl/boot&lt;/a&gt;
を用いる．&lt;/p&gt;

&lt;p&gt;以下のようにビルドを行う．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir unikraft &amp;amp;&amp;amp; cd unikraft
$ git clone git@github.com:uk-lkl/unikraft.git --branch=retrage/lkl-v2
$ mkdir libs &amp;amp;&amp;amp; cd libs
$ git clone --recursive git@github.com:uk-lkl/lkl.git
$ cd ..
$ mkdir apps &amp;amp;&amp;amp; cd apps
$ git clone git@github.com:uk-lkl/boot.git
$ cd boot
$ make menuconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでKconfigでアーキテクチャにx86を，
プラットフォームにKVM guestかLinux user spaceを選択する．
最後に保存してKconfigを抜ける．
以下のようにmakeによりビルドを実行する．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ビルドが成功すると&lt;code class=&quot;highlighter-rouge&quot;&gt;build/boot_kvm-x86_64&lt;/code&gt;が生成される．&lt;/p&gt;

&lt;p&gt;KVM guestでは用意された&lt;code class=&quot;highlighter-rouge&quot;&gt;run.sh&lt;/code&gt;により実行できる．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./run.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行結果は以下のようになる．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[    0.721134] ERR:  [libukboot] boot.c @ 88   : Failed to initialize bus driver 0x56b060: -1
Welcome to  _ __             _____
 __ _____  (_) /__ _______ _/ _/ /_
/ // / _ \/ /  '_// __/ _ `/ _/ __/
\_,_/_//_/_/_/\_\/_/  \_,_/_/ \__/
                  Titan 0.2~ebcb42a
1..33 # boot
* 1 mutex
ok 1 mutex
 ---
 time_us: 0
 log: |
 ...
* 2 semaphore
ok 2 semaphore
 ---
 time_us: 0
 log: |
 ...
* 3 join
ok 3 join
 ---
 time_us: 1
 log: |
  joined 7909384
 ...
* 4 start_kernel
ok 4 start_kernel
 ---
 time_us: 9281
 log: |
  [    0.000000] Linux version 4.19.0+ (akira@akira-Z270) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.11)) #1 Thu May 30 23:10:09 JST 2019
  [    0.000000] bootmem address range: 0x1c001000 - 0x1d000000
  [    0.000000] On node 0 totalpages: 4095
  [    0.000000]   Normal zone: 56 pages used for memmap
  [    0.000000]   Normal zone: 0 pages reserved
  [    0.000000]   Normal zone: 4095 pages, LIFO batch:0
  [    0.000000] pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768
  [    0.000000] pcpu-alloc: [0] 0 
  [    0.000000] Built 1 zonelists, mobility grouping off.  Total pages: 4039
  [    0.000000] Kernel command line: mem=16M loglevel=8
  [    0.000000] Dentry cache hash table entries: 2048 (order: 2, 16384 bytes)
  [    0.000000] Inode-cache hash table entries: 1024 (order: 1, 8192 bytes)
  [    0.000000] Memory available: 16088k/16380k RAM
  [    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
  [    0.000000] NR_IRQS: 4096
  [    0.000000] lkl: irqs initialized
  [    0.000000] clocksource: lkl: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns
  [    0.198000] lkl: time and timers initialized (irq1)
  [    2.093000] pid_max: default: 4096 minimum: 301
  [   15.926000] Mount-cache hash table entries: 512 (order: 0, 4096 bytes)
  [   18.024000] Mountpoint-cache hash table entries: 512 (order: 0, 4096 bytes)
  [ 2722.817000] console [lkl_console0] enabled
  [ 2732.709000] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
  [ 2760.874000] random: get_random_u32 called from bucket_table_alloc.isra.6+0x9b/0x250 with crng_init=0
  [ 2774.823000] NET: Registered protocol family 16
  [ 3121.319000] clocksource: Switched to clocksource lkl
  [ 3181.520000] NET: Registered protocol family 2
  [ 3261.648000] tcp_listen_portaddr_hash hash table entries: 256 (order: 0, 4096 bytes)
  [ 3263.125000] TCP established hash table entries: 512 (order: 0, 4096 bytes)
  [ 3264.198000] TCP bind hash table entries: 512 (order: 0, 4096 bytes)
  [ 3265.141000] TCP: Hash tables configured (established 512 bind 512)
  [ 3286.743000] UDP hash table entries: 128 (order: 0, 4096 bytes)
  [ 3287.830000] UDP-Lite hash table entries: 128 (order: 0, 4096 bytes)
  [ 3456.331000] workingset: timestamp_bits=62 max_order=12 bucket_order=0
  [ 4041.077000] SGI XFS with ACLs, security attributes, no debug enabled
  [ 6032.987000] jitterentropy: Initialization failed with host not compliant with requirements: 2
  [ 6038.248000] io scheduler noop registered
  [ 6038.908000] io scheduler deadline registered
  [ 6067.383000] io scheduler cfq registered (default)
  [ 6068.093000] io scheduler mq-deadline registered
  [ 6068.764000] io scheduler kyber registered
  [ 7894.266000] NET: Registered protocol family 10
  [ 7979.259000] Segment Routing with IPv6
  [ 7988.492000] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
  [ 8097.859000] Warning: unable to open an initial console.
  [ 8106.456000] This architecture does not have kernel memory protection.
  [ 8107.119000] Run /init as init process
  lkl_start_kernel(&amp;amp;lkl_host_ops, &quot;mem=16M loglevel=8&quot;) = 0 
 ...
* 5 getpid
ok 5 getpid
 ---
 time_us: 5
 log: |
  lkl_sys_getpid() = 1 
 ...
* 6 syscall_latency
ok 6 syscall_latency
 ---
 time_us: 126
 log: |
  avg/min/max: lkl:107822000/104000000/450000000 native:6788000/6000000/77000000
 ...
* 7 umask
ok 7 umask
 ---
 time_us: 0
 log: |
  lkl_sys_umask(0777) = 18 
 ...
* 8 umask2
ok 8 umask2
 ---
 time_us: 0
 log: |
  lkl_sys_umask(0) = 511 
 ...
* 9 creat
ok 9 creat
 ---
 time_us: 9
 log: |
  lkl_sys_creat(&quot;/file&quot;, access_rights) = 0 
 ...
* 10 close
ok 10 close
 ---
 time_us: 0
 log: |
  lkl_sys_close(0) = 0 
 ...
* 11 failopen
ok 11 failopen
 ---
 time_us: 9
 log: |
  lkl_sys_open(&quot;/file2&quot;, 0, 0) = -2 No such file or directory
 ...
* 12 open
ok 12 open
 ---
 time_us: 7
 log: |
  lkl_sys_open(&quot;/file&quot;, LKL_O_RDWR, 0) = 0 
 ...
* 13 write
ok 13 write
 ---
 time_us: 4
 log: |
  lkl_sys_write(0, wrbuf, sizeof(wrbuf)) = 5 
 ...
* 14 lseek_cur
ok 14 lseek_cur
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_CUR) = 5 
 ...
* 15 lseek_end
ok 15 lseek_end
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_END) = 5 
 ...
* 16 lseek_set
ok 16 lseek_set
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_SET) = 0 
 ...
* 17 read
ok 17 read
 ---
 time_us: 1
 log: |
  lkl_sys_read=5 buf=test
 ...
* 18 fstat
ok 18 fstat
 ---
 time_us: 1
 log: |
  lkl_sys_fstat=0 mode=100721 size=5
 ...
* 19 mkdir
ok 19 mkdir
 ---
 time_us: 8
 log: |
  lkl_sys_mkdir(&quot;/mnt&quot;, access_rights) = 0 
 ...
* 20 stat
ok 20 stat
 ---
 time_us: 7
 log: |
  lkl_sys_stat(&quot;/mnt&quot;)=0 mode=40721
 ...
* 21 pipe2
ok 21 pipe2
 ---
 time_us: 9
 log: |
 ...
* 22 epoll
ok 22 epoll
 ---
 time_us: 5
 log: |
 ...
* 23 mount_fs_proc
ok 23 mount_fs_proc
 ---
 time_us: 18
 log: |
  lkl_mount_fs(&quot;proc&quot;) = 0 
 ...
* 24 chdir_proc
ok 24 chdir_proc
 ---
 time_us: 7
 log: |
  lkl_sys_chdir(&quot;proc&quot;) = 0 
 ...
* 25 open_cwd
ok 25 open_cwd
 ---
 time_us: 7
 log: |
 ...
* 26 getdents64
ok 26 getdents64
 ---
 time_us: 6
 log: |
  4 . .. fs bus irq net sys tty kmsg maps misc stat iomem crypto driver 
  mounts uptime vmstat cmdline cpuinfo devices ioports loadavg meminfo version 
  consoles kallsyms slabinfo softirqs zoneinfo buddyinfo diskstats interrupts 
  partitions timer_list 
 ...
* 27 close_dir_fd
ok 27 close_dir_fd
 ---
 time_us: 0
 log: |
  lkl_sys_close(dir_fd) = 0 
 ...
* 28 chdir_root
ok 28 chdir_root
 ---
 time_us: 7
 log: |
  lkl_sys_chdir(&quot;/&quot;) = 0 
 ...
* 29 umount_fs_proc
ok 29 umount_fs_proc
 ---
 time_us: 11
 log: |
  lkl_umount_timeout(&quot;proc&quot;, 0, 1000) = 0 
 ...
* 30 lo_ifup
ok 30 lo_ifup
 ---
 time_us: 44
 log: |
  lkl_if_up(1) = 0 
 ...
* 31 gettid
ok 31 gettid
 ---
 time_us: 0
 log: |
  7893000
 ...
* 32 many_syscall_threads
ok 32 many_syscall_threads
 ---
 time_us: 26
 log: |
 ...
* 33 stop_kernel
ok 33 stop_kernel
 ---
 time_us: 531
 log: |
  [145272.871000] reboot: Restarting system
  lkl_sys_halt() = 0 
 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;問題点&quot;&gt;問題点&lt;/h2&gt;

&lt;p&gt;現状のLKL on Unikraftには次のような問題点がある．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unikraft本体に対する追加修正が必要&lt;/li&gt;
  &lt;li&gt;ディスクやネットワークのホスト依存コードが存在しない&lt;/li&gt;
  &lt;li&gt;ある条件下においてLKLがハングする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一つ目の問題点は前述の通りの修正についてである．
二つ目の問題点では開発時点においてUnikraft側に
有効なファイルシステムやネットワークのサポートがなかったためである．
三つ目の問題点はLKL on Unikraftのみではなく
&lt;a href=&quot;https://github.com/retrage/linux/tree/retrage/fiber&quot;&gt;retrage/linux:retrage/fiber&lt;/a&gt;
の問題となっている．&lt;/p&gt;

&lt;p&gt;また．設計上の問題点として
UnikraftはUnikernelを複数のライブラリに分割することにより
必要なライブラリのみをビルドするという方向性であるのに対し，
LKLでは既存のLinux kernelを再利用するために
LKLを取り込んだ場合にイメージサイズが大きくなりがちであり
必要な機能のみを取り込むというUnikraftの方向性に反するものである
という点が挙げられる．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/document/5541547&quot;&gt;LKL: The Linux kernel library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xenproject.org/developers/teams/unikraft/&quot;&gt;Unikraft - Xen Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/sites/default/files/conference/protected-files/lisa18_slides_kuenzer.pdf&quot;&gt;Unikraft: Unikernels Made Easy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unikraft.org/&quot;&gt;Unikraft’s Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Linux kernelをUnikraftのライブラリ化した． これにより機能の少ないUnikernelの資源として Linux kernelの持つ機能を利用することが可能となる．</summary></entry><entry><title type="html">正規表現からLLVM IRを生成する</title><link href="https://retrage.github.io/2019/05/12/regex-to-llvm-ir.html" rel="alternate" type="text/html" title="正規表現からLLVM IRを生成する" /><published>2019-05-12T08:47:26+00:00</published><updated>2019-05-12T08:47:26+00:00</updated><id>https://retrage.github.io/2019/05/12/regex-to-llvm-ir</id><content type="html" xml:base="https://retrage.github.io/2019/05/12/regex-to-llvm-ir.html">&lt;h1 id=&quot;正規表現からllvm-irを生成する&quot;&gt;正規表現からLLVM IRを生成する&lt;/h1&gt;

&lt;p&gt;正規表現は文字列マッチングなどに広く用いられている形式言語であるが，
等価な決定性有限オートマトン(DFA)に変換できることが知られている．
&lt;a href=&quot;https://github.com/google/redgrep&quot;&gt;google/redgrep&lt;/a&gt;
は与えられた正規表現から等価なDFAに相当するネイティブコードを
LLVMにより生成する．
ここではredgrepを改造して
正規表現からどのようなLLVM IRが生成されるのかをみてみる．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;redll&lt;/code&gt;というツールを追加した．コードは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/retrage/redgrep/tree/retrage/redll&quot;&gt;https://github.com/retrage/redgrep/tree/retrage/redll&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;に置いてある．&lt;/p&gt;

&lt;h2 id=&quot;使い方&quot;&gt;使い方&lt;/h2&gt;

&lt;p&gt;最初にLLVMのソースコードをダウンロードして
ビルドしてローカルの適当な場所にインストールしておく．
redgrepは新しいLLVMを要求するのでLLVM 8.0.0あたりを入れておく．
redgrepのビルドが通るようにパスを通す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ export LLVM_CONFIG=/path/to/bin/llvm-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とかやってからredgrepをビルドする．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./redll &quot;regex&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;で遊べる．&lt;/p&gt;

&lt;h2 id=&quot;例-a&quot;&gt;例: “a”&lt;/h2&gt;

&lt;p&gt;試しに正規表現パターン”a”がどのようになるのかを以下に示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./redll &quot;a&quot;
; dfa is 3 states
; ModuleID = 'M'
source_filename = &quot;M&quot;
target datalayout = &quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;

; Function Attrs: norecurse nounwind readonly
define i1 @F(i8* nocapture readonly, i64) local_unnamed_addr #0 {
entry:
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %return_true, label %3

return_true:                                      ; preds = %3, %entry
  ret i1 false

; &amp;lt;label&amp;gt;:3:                                      ; preds = %entry
  %4 = load i8, i8* %0, align 1
  %cond = icmp eq i8 %4, 97
  br i1 %cond, label %5, label %return_true

; &amp;lt;label&amp;gt;:5:                                      ; preds = %3
  %6 = icmp eq i64 %1, 1
  ret i1 %6
}

attributes #0 = { norecurse nounwind readonly }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;という関数があり，
入力が0であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;を返し，
そうでなければ入力から1文字取り出し
&lt;code class=&quot;highlighter-rouge&quot;&gt;97&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;を返す，
というような状態機械になっていることがわかる．&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;他にも色々面白く遊べるはずなので試してほしい．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/google/redgrep&lt;/li&gt;
  &lt;li&gt;https://github.com/retrage/redgrep&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">正規表現からLLVM IRを生成する</summary></entry><entry><title type="html">技術書典6で新刊「UEFI読本 GRUB編」を頒布</title><link href="https://retrage.github.io/2019/04/13/efi-book2-ad.html" rel="alternate" type="text/html" title="技術書典6で新刊「UEFI読本 GRUB編」を頒布" /><published>2019-04-13T03:18:33+00:00</published><updated>2019-04-13T03:18:33+00:00</updated><id>https://retrage.github.io/2019/04/13/efi-book2-ad</id><content type="html" xml:base="https://retrage.github.io/2019/04/13/efi-book2-ad.html">&lt;h1 id=&quot;技術書典6で新刊uefi読本-grub編を頒布&quot;&gt;技術書典6で新刊「UEFI読本 GRUB編」を頒布&lt;/h1&gt;

&lt;p&gt;2019年4月14日に池袋サンシャインシティで開催される
技術書典6において「海洋軟件」として
新刊「UEFI読本 GRUB編」を頒布する。
既刊「UEFI読本 基礎編 Linux編」も基礎編を分離し
「UEFI読本 Linux編」として頒布する。
配置先は「う27」である。&lt;/p&gt;

&lt;h2 id=&quot;uefi読本-grub編&quot;&gt;UEFI読本 GRUB編&lt;/h2&gt;

&lt;p&gt;以下、本書「はじめに」より抜粋。&lt;/p&gt;

&lt;p&gt;前回の技術書典5において頒布した「UEFI読本 基礎編 Linux編」（以下、「Linux編」）は
海洋軟件として初の同人誌であったにもかかわらず、
多くの方に読んでいただいたようでこの場で感謝申し上げたい。
「Linux編」ではEFI stubでの起動プロセスをソースコードレベルで追跡した。
しかし、多くのLinuxディストリビューションではGRUB bootloaderを利用することが多く、
一般的なLinux環境での起動プロセスをカバーできていなかった。
そこで本書ではUEFI環境でのGRUBの起動とLinuxの起動をみていく。
ただし、Linuxの起動そのものについては紙面の関係上ここでは対象外とする。&lt;/p&gt;

&lt;h2 id=&quot;uefi読本-linux編&quot;&gt;UEFI読本 Linux編&lt;/h2&gt;

&lt;p&gt;以下、本書「はじめに」より抜粋。&lt;/p&gt;

&lt;p&gt;UEFIが2005年に登場してから10年以上が経過した。
現在のx86系CPUを搭載したコンピュータのほとんどが
UEFIに対応しており、かつOSも当然のように対応している。
しかし、UEFIやそこからの起動を解説をした文書は非常に少なく、
規格書かソースコードを読み解くしかなかった。
本書はそのような現状に応えるべく企画された。&lt;/p&gt;

&lt;p&gt;本書は「UEFI読本 Linux編」というUEFIにおけるLinux kernelの起動についての解説書である。
「技術書典 5」において頒布した「UEFI読本 基礎編 Linux編」を元に
基礎編を分離させて修正を加えた。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://techbookfest.org/event/tbf06/circle/65580001&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">技術書典6で新刊「UEFI読本 GRUB編」を頒布</summary></entry></feed>