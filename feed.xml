<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-06-02T19:36:29+09:00</updated><id>/feed.xml</id><title type="html">retrage.github.io</title><subtitle>Blog posts by @retrage01</subtitle><entry><title type="html">Librarizing Linux kernel for Unikernels</title><link href="/2019/06/02/lkl-on-unikraft-en.html" rel="alternate" type="text/html" title="Librarizing Linux kernel for Unikernels" /><published>2019-06-02T19:35:32+09:00</published><updated>2019-06-02T19:35:32+09:00</updated><id>/2019/06/02/lkl-on-unikraft-en</id><content type="html" xml:base="/2019/06/02/lkl-on-unikraft-en.html">&lt;p&gt;I ported the Linux kernel to Unikraft as an external library.
This makes it possible to reuse the rich functions of the Linux kernel
for Unikernel with less functionality.
In this blog post, I describe the overview of the library.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;h3 id=&quot;linux-kernel-library&quot;&gt;Linux Kernel Library&lt;/h3&gt;

&lt;p&gt;The Linux kernel is a well-maintained mature open source OS kernel.
Recently, there have been researches that propose reuse its components.
&lt;a href=&quot;https://github.com/lkl/linux&quot;&gt;The Linux Kernel Library (LKL)&lt;/a&gt;
is one of them, which uses the Linux kernel as a form of Library OS
with minimum modifications.
LKL is not currently official Linux project,
but it is actively being developed (v4.19 is latest).
Below is the architecture of LKL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-architecture.png&quot; alt=&quot;The architecture of LKL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LKL has a host-independent architecture named &lt;code class=&quot;highlighter-rouge&quot;&gt;lkl&lt;/code&gt;,
and actual host-dependent code is separated from the arch.
The independent and dependent code is placed
under &lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl&lt;/code&gt; correspondingly.
For POSIX host environment, &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/lib/posix-host.c&lt;/code&gt; plays the role.&lt;/p&gt;

&lt;h3 id=&quot;unikraft&quot;&gt;Unikraft&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://xenproject.org/developers/teams/unikraft/&quot;&gt;Unikraft&lt;/a&gt;
is an experimental project by Xen Project
which aims to build small and lightweight Unikernel images
by providing divided Unikernel functions.
The following is the architecture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/unikraft-architecture.png&quot; alt=&quot;The architecture of Unikraft&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unikraft itself consists of three parts:
main libs, platform libs, and architecture libs.
main libs contain architecture and platform independent libraries.
platform libs provide platform dependent code as libraries.
It currently supports Xen, KVM, and Linux userspace as platforms.
architecture libs are libraries for architecture; x86, arm, and arm64.
A user has to specify the target architecture and platform by Kconfig
when building Unikraft application.
The Unikraft build system generates a Unikernel image
corresponding to each target.&lt;/p&gt;

&lt;p&gt;Unikraft supports external libraries along with internal libraries.
There are several official external libraries in public
such as newlib, lwip, compiler-rt, eigen,
libcxx, libcxxabi, libunwind, and libuuid.&lt;/p&gt;

&lt;p&gt;For more details about porting external libraries to Unikraft,
see &lt;a href=&quot;http://www.unikraft.org/developers-app.html&quot;&gt;External Library Development&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lkl-on-unikraft&quot;&gt;LKL on Unikraft&lt;/h2&gt;

&lt;p&gt;Since Unikraft is still at an early stage,
it does not have a mature network stack or file system.
To tackle this issue, we ported LKL as an external library for Unikraft.
Here we introduce two types of the port.&lt;/p&gt;

&lt;h3 id=&quot;lkl-on-unikraft-v1&quot;&gt;LKL on Unikraft v1&lt;/h3&gt;

&lt;p&gt;First of all, we integrated LKL to Unikraft build system.
The architecture is shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-on-unikraft-v1.png&quot; alt=&quot;The architecture of LKL on Unikraft v1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this version of the port,
we added new architecture and platform libraries for LKL.
They are just stub and only used when specified in Kconfig.
The disadvantage of this design is that
it is impossible to build LKL for other architectures or platforms.
In addition, it can not cooperate with other Unikraft libraries.&lt;/p&gt;

&lt;p&gt;The code is available at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/unikraft/tree/retrage/lkl&quot;&gt;uk-lkl/unikraft:retrage/lkl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lkl-on-unikraft-v2&quot;&gt;LKL on Unikraft v2&lt;/h3&gt;

&lt;p&gt;Next, we introduce v2 which can be used as an actual library.
Below is the overview.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-on-unikraft-v2.png&quot; alt=&quot;The architecture of LKL on Unikraft v2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By this design, we can choose any architecture and platform in concept
since LKL is separated from architecture and platform.
In addition, other Unikraft libraries can use LKL functions.&lt;/p&gt;

&lt;p&gt;For implementation, we added a new host-dependent code called &lt;code class=&quot;highlighter-rouge&quot;&gt;uk-host.c&lt;/code&gt;
to support Unikraft as a new LKL host environment.
The LKL host-dependent code requires some primitives
such as mutex, semaphore, thread, timer, etc. on the host side,
however, Unikraft main libs cannot satisfy the requirements
because of the lack of functionality.
Therefore, we ported these primitives
from &lt;a href=&quot;https://github.com/littlekernel/lk&quot;&gt;littlekernel&lt;/a&gt;, an embedded kernel to LKL.
The only LKL host has to do is that
calling callback functions periodic time to run the preemptive scheduler.
The port of littlekernel is independent of Unikraft.
Here is the implementation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/retrage/linux/tree/retrage/fiber&quot;&gt;retrage/linux:retrage/fiber&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;implementation&quot;&gt;Implementation&lt;/h4&gt;

&lt;p&gt;The port of LKL supports only x86_64 architecture and KVM platform
for some reasons.&lt;/p&gt;

&lt;p&gt;Unikraft has two types of libc implementation, newlib, and nolibc.
newlib is an official external library that supports full libc functions.
On the other hand, nolibc provides minimal libc functions
so that general libc functions can be used even if newlib does not exist.
This version of LKL port is designed to work with nolibc
to reduce dependencies.
However, since nolibc have enough functions and constants required by LKL,
we added the following functions and constants to nolibc.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;stdbool&lt;/li&gt;
  &lt;li&gt;fputc, putchar&lt;/li&gt;
  &lt;li&gt;STD{IN,OUT,ERR}_FILENO&lt;/li&gt;
  &lt;li&gt;strncat&lt;/li&gt;
  &lt;li&gt;strtok_r&lt;/li&gt;
  &lt;li&gt;setjmp/longjmp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The modified LKL expects the callback function is called periodically
as mentioned above, but Unikraft does not provide an interface
to register a callback function.
Fortunately, it starts a periodic timer at startup,
so we just added the interface.&lt;/p&gt;

&lt;p&gt;In the KVM platform, a final image is generated using the custom linker script.
Since The LKL binary &lt;code class=&quot;highlighter-rouge&quot;&gt;liblkl.o&lt;/code&gt; has symbols
that are not referred explicitly,
they are deleted or hidden by linking using the linker script.
For this reason, the linker script is modified
so that the symbols from LKL are kept correctly.&lt;/p&gt;

&lt;p&gt;The modified Unikraft and the port of LKL is here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/unikraft/tree/retrage/lkl-v2&quot;&gt;uk-lkl/unikraft:retrage/lkl-v2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/lkl&quot;&gt;uk-lkl/lkl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;demonstration&quot;&gt;Demonstration&lt;/h4&gt;

&lt;p&gt;To demonstrate LKL on Unikraft,
we ported &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/tests/boot&lt;/code&gt; from LKL as &lt;a href=&quot;https://github.com/uk-lkl/boot&quot;&gt;uk-lkl/boot&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir unikraft &amp;amp;&amp;amp; cd unikraft
$ git clone git@github.com:uk-lkl/unikraft.git --branch=retrage/lkl-v2
$ mkdir libs &amp;amp;&amp;amp; cd libs
$ git clone --recursive git@github.com:uk-lkl/lkl.git
$ cd ..
$ mkdir apps &amp;amp;&amp;amp; cd apps
$ git clone git@github.com:uk-lkl/boot.git
$ cd boot
$ make menuconfi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Select x86 architecture and KVM guest platform.
Save and exit Kconfig. Then, run make.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To run the final image, run &lt;code class=&quot;highlighter-rouge&quot;&gt;run.sh&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./run.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will output as follow:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[    0.721134] ERR:  [libukboot] boot.c @ 88   : Failed to initialize bus driver 0x56b060: -1
Welcome to  _ __             _____
 __ _____  (_) /__ _______ _/ _/ /_
/ // / _ \/ /  '_// __/ _ `/ _/ __/
\_,_/_//_/_/_/\_\/_/  \_,_/_/ \__/
                  Titan 0.2~ebcb42a
1..33 # boot
* 1 mutex
ok 1 mutex
 ---
 time_us: 0
 log: |
 ...
* 2 semaphore
ok 2 semaphore
 ---
 time_us: 0
 log: |
 ...
* 3 join
ok 3 join
 ---
 time_us: 1
 log: |
  joined 7909384
 ...
* 4 start_kernel
ok 4 start_kernel
 ---
 time_us: 9281
 log: |
  [    0.000000] Linux version 4.19.0+ (akira@akira-Z270) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.11)) #1 Thu May 30 23:10:09 JST 2019
  [    0.000000] bootmem address range: 0x1c001000 - 0x1d000000
  [    0.000000] On node 0 totalpages: 4095
  [    0.000000]   Normal zone: 56 pages used for memmap
  [    0.000000]   Normal zone: 0 pages reserved
  [    0.000000]   Normal zone: 4095 pages, LIFO batch:0
  [    0.000000] pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768
  [    0.000000] pcpu-alloc: [0] 0 
  [    0.000000] Built 1 zonelists, mobility grouping off.  Total pages: 4039
  [    0.000000] Kernel command line: mem=16M loglevel=8
  [    0.000000] Dentry cache hash table entries: 2048 (order: 2, 16384 bytes)
  [    0.000000] Inode-cache hash table entries: 1024 (order: 1, 8192 bytes)
  [    0.000000] Memory available: 16088k/16380k RAM
  [    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
  [    0.000000] NR_IRQS: 4096
  [    0.000000] lkl: irqs initialized
  [    0.000000] clocksource: lkl: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns
  [    0.198000] lkl: time and timers initialized (irq1)
  [    2.093000] pid_max: default: 4096 minimum: 301
  [   15.926000] Mount-cache hash table entries: 512 (order: 0, 4096 bytes)
  [   18.024000] Mountpoint-cache hash table entries: 512 (order: 0, 4096 bytes)
  [ 2722.817000] console [lkl_console0] enabled
  [ 2732.709000] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
  [ 2760.874000] random: get_random_u32 called from bucket_table_alloc.isra.6+0x9b/0x250 with crng_init=0
  [ 2774.823000] NET: Registered protocol family 16
  [ 3121.319000] clocksource: Switched to clocksource lkl
  [ 3181.520000] NET: Registered protocol family 2
  [ 3261.648000] tcp_listen_portaddr_hash hash table entries: 256 (order: 0, 4096 bytes)
  [ 3263.125000] TCP established hash table entries: 512 (order: 0, 4096 bytes)
  [ 3264.198000] TCP bind hash table entries: 512 (order: 0, 4096 bytes)
  [ 3265.141000] TCP: Hash tables configured (established 512 bind 512)
  [ 3286.743000] UDP hash table entries: 128 (order: 0, 4096 bytes)
  [ 3287.830000] UDP-Lite hash table entries: 128 (order: 0, 4096 bytes)
  [ 3456.331000] workingset: timestamp_bits=62 max_order=12 bucket_order=0
  [ 4041.077000] SGI XFS with ACLs, security attributes, no debug enabled
  [ 6032.987000] jitterentropy: Initialization failed with host not compliant with requirements: 2
  [ 6038.248000] io scheduler noop registered
  [ 6038.908000] io scheduler deadline registered
  [ 6067.383000] io scheduler cfq registered (default)
  [ 6068.093000] io scheduler mq-deadline registered
  [ 6068.764000] io scheduler kyber registered
  [ 7894.266000] NET: Registered protocol family 10
  [ 7979.259000] Segment Routing with IPv6
  [ 7988.492000] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
  [ 8097.859000] Warning: unable to open an initial console.
  [ 8106.456000] This architecture does not have kernel memory protection.
  [ 8107.119000] Run /init as init process
  lkl_start_kernel(&amp;amp;lkl_host_ops, &quot;mem=16M loglevel=8&quot;) = 0 
 ...
* 5 getpid
ok 5 getpid
 ---
 time_us: 5
 log: |
  lkl_sys_getpid() = 1 
 ...
* 6 syscall_latency
ok 6 syscall_latency
 ---
 time_us: 126
 log: |
  avg/min/max: lkl:107822000/104000000/450000000 native:6788000/6000000/77000000
 ...
* 7 umask
ok 7 umask
 ---
 time_us: 0
 log: |
  lkl_sys_umask(0777) = 18 
 ...
* 8 umask2
ok 8 umask2
 ---
 time_us: 0
 log: |
  lkl_sys_umask(0) = 511 
 ...
* 9 creat
ok 9 creat
 ---
 time_us: 9
 log: |
  lkl_sys_creat(&quot;/file&quot;, access_rights) = 0 
 ...
* 10 close
ok 10 close
 ---
 time_us: 0
 log: |
  lkl_sys_close(0) = 0 
 ...
* 11 failopen
ok 11 failopen
 ---
 time_us: 9
 log: |
  lkl_sys_open(&quot;/file2&quot;, 0, 0) = -2 No such file or directory
 ...
* 12 open
ok 12 open
 ---
 time_us: 7
 log: |
  lkl_sys_open(&quot;/file&quot;, LKL_O_RDWR, 0) = 0 
 ...
* 13 write
ok 13 write
 ---
 time_us: 4
 log: |
  lkl_sys_write(0, wrbuf, sizeof(wrbuf)) = 5 
 ...
* 14 lseek_cur
ok 14 lseek_cur
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_CUR) = 5 
 ...
* 15 lseek_end
ok 15 lseek_end
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_END) = 5 
 ...
* 16 lseek_set
ok 16 lseek_set
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_SET) = 0 
 ...
* 17 read
ok 17 read
 ---
 time_us: 1
 log: |
  lkl_sys_read=5 buf=test
 ...
* 18 fstat
ok 18 fstat
 ---
 time_us: 1
 log: |
  lkl_sys_fstat=0 mode=100721 size=5
 ...
* 19 mkdir
ok 19 mkdir
 ---
 time_us: 8
 log: |
  lkl_sys_mkdir(&quot;/mnt&quot;, access_rights) = 0 
 ...
* 20 stat
ok 20 stat
 ---
 time_us: 7
 log: |
  lkl_sys_stat(&quot;/mnt&quot;)=0 mode=40721
 ...
* 21 pipe2
ok 21 pipe2
 ---
 time_us: 9
 log: |
 ...
* 22 epoll
ok 22 epoll
 ---
 time_us: 5
 log: |
 ...
* 23 mount_fs_proc
ok 23 mount_fs_proc
 ---
 time_us: 18
 log: |
  lkl_mount_fs(&quot;proc&quot;) = 0 
 ...
* 24 chdir_proc
ok 24 chdir_proc
 ---
 time_us: 7
 log: |
  lkl_sys_chdir(&quot;proc&quot;) = 0 
 ...
* 25 open_cwd
ok 25 open_cwd
 ---
 time_us: 7
 log: |
 ...
* 26 getdents64
ok 26 getdents64
 ---
 time_us: 6
 log: |
  4 . .. fs bus irq net sys tty kmsg maps misc stat iomem crypto driver 
  mounts uptime vmstat cmdline cpuinfo devices ioports loadavg meminfo version 
  consoles kallsyms slabinfo softirqs zoneinfo buddyinfo diskstats interrupts 
  partitions timer_list 
 ...
* 27 close_dir_fd
ok 27 close_dir_fd
 ---
 time_us: 0
 log: |
  lkl_sys_close(dir_fd) = 0 
 ...
* 28 chdir_root
ok 28 chdir_root
 ---
 time_us: 7
 log: |
  lkl_sys_chdir(&quot;/&quot;) = 0 
 ...
* 29 umount_fs_proc
ok 29 umount_fs_proc
 ---
 time_us: 11
 log: |
  lkl_umount_timeout(&quot;proc&quot;, 0, 1000) = 0 
 ...
* 30 lo_ifup
ok 30 lo_ifup
 ---
 time_us: 44
 log: |
  lkl_if_up(1) = 0 
 ...
* 31 gettid
ok 31 gettid
 ---
 time_us: 0
 log: |
  7893000
 ...
* 32 many_syscall_threads
ok 32 many_syscall_threads
 ---
 time_us: 26
 log: |
 ...
* 33 stop_kernel
ok 33 stop_kernel
 ---
 time_us: 531
 log: |
  [145272.871000] reboot: Restarting system
  lkl_sys_halt() = 0 
 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;/h2&gt;

&lt;p&gt;The current LKL on Unikraft has the following issues.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It needs modifications to Unikraft.&lt;/li&gt;
  &lt;li&gt;It does not support disk operations and networks.&lt;/li&gt;
  &lt;li&gt;It hangs under some certain situations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first issue is described above in details.
The second issue is 
because of the lack of file system and network support by Unikraft.
The third issue is not only on Unikraft,
but also with &lt;a href=&quot;https://github.com/retrage/linux/tree/retrage/fiber&quot;&gt;retrage/linux:retrage/fiber&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a design issue,
the use of Linux kernel does not match with Unikraft policy.
Unikraft aims to build ‘slim’ Unikernel images
by building the necessary libraries,
but LKL reuses existing Linux kernel which is ‘fat’.
The size of the final image tends to be large if LKL is integrated.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/document/5541547&quot;&gt;LKL: The Linux kernel library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xenproject.org/developers/teams/unikraft/&quot;&gt;Unikraft - Xen Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/sites/default/files/conference/protected-files/lisa18_slides_kuenzer.pdf&quot;&gt;Unikraft: Unikernels Made Easy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unikraft.org/&quot;&gt;Unikraft’s Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I ported the Linux kernel to Unikraft as an external library. This makes it possible to reuse the rich functions of the Linux kernel for Unikernel with less functionality. In this blog post, I describe the overview of the library.</summary></entry><entry><title type="html">Linux kernelをUnikernelのライブラリ化する</title><link href="/2019/05/30/lkl-on-unikraft.html" rel="alternate" type="text/html" title="Linux kernelをUnikernelのライブラリ化する" /><published>2019-05-30T23:26:23+09:00</published><updated>2019-05-30T23:26:23+09:00</updated><id>/2019/05/30/lkl-on-unikraft</id><content type="html" xml:base="/2019/05/30/lkl-on-unikraft.html">&lt;p&gt;Linux kernelをUnikraftのライブラリ化した．
これにより機能の少ないUnikernelの資源として
Linux kernelの持つ機能を利用することが可能となる．&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;h3 id=&quot;linux-kernel-library&quot;&gt;Linux Kernel Library&lt;/h3&gt;

&lt;p&gt;Linux kernelはよくメンテナンスされている成熟した
オープンソースなOSの代表であるが，
近年その機能を効率よく再利用しようとする動きがある．
&lt;a href=&quot;https://github.com/lkl/linux&quot;&gt;Linux Kernel Library (LKL)&lt;/a&gt;
はその一つであり，
最小限のコストでLinux kernelをanykernelと呼ばれる
形態のLibrary OSとして利用するものである．
LKLは現在公式のLinux kernelには含まれていないが
活発に開発がなされており，
現時点でv4.19がサポートされている．
以下にLKLの構成を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-architecture.png&quot; alt=&quot;LKLの構成&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LKLは&lt;code class=&quot;highlighter-rouge&quot;&gt;lkl&lt;/code&gt;というホスト非依存なアーキテクチャを定義し，
実際に各ホストに依存する部分は分離されている，&lt;/p&gt;

&lt;p&gt;LKLは&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl&lt;/code&gt;以下にホスト非依存のコードを配置し，
&lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/&lt;/code&gt;以下にホスト依存のコードが配置されている．
特に&lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/lib/posix-host.c&lt;/code&gt;には
POSIXなホスト環境で利用されるコードが置かれている．&lt;/p&gt;

&lt;h3 id=&quot;unikraft&quot;&gt;Unikraft&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://xenproject.org/developers/teams/unikraft/&quot;&gt;Unikraft&lt;/a&gt;
はUnikernelを分割し，
アプリケーションが必要とする機能のみを提供することにより
イメージサイズが小さくかつ軽量なUnikernelを実現する
Xen Projectの実験プロジェクトである．
以下にUnikraftの構成を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/unikraft-architecture.png&quot; alt=&quot;Unikraftの構成&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unikraft本体は
main libs，platform libs，architecture libsの
大きく3つに分けることができる．
main libsにはアーキテクチャやプラットフォームに依存しない
ライブラリ群が含まれる．
platform libsには対応するプラットフォーム依存のコードが
ライブラリとして提供されている．
現時点でpaltform libsには
Xen．KVM，Linux userspaceの3つが存在し，
architecture libsには
x86, arm, arm64の3つが存在する．
Unikraftはビルド時にKconfigにより
ターゲットとなるアーキテクチャとプラットフォームを指定し
それぞれのホストに対応したUnikernelのイメージを生成する．&lt;/p&gt;

&lt;p&gt;Unikraftでは本体に含まれるライブラリ以外に
アプリケーションや外部ライブラリが導入できる．
アプリケーションは
&lt;a href=&quot;http://www.unikraft.org/developers-app.html&quot;&gt;Application Development and Porting&lt;/a&gt;
に記述されている通りのMakefileを書くことにより
少ない労力でUnikraft向けのアプリケーションをビルドできる．
Unikraft本体以外の外部ライブラリについても
&lt;a href=&quot;http://www.unikraft.org/developers-app.html&quot;&gt;External Library Development&lt;/a&gt;
の記述通りにMakefile.ukを作成することで
ライブラリを導入できる．&lt;/p&gt;

&lt;p&gt;Unikraftでは現在公式の外部ライブラリとして
newlib, lwip, compiler-rt, eigen, libcxx, libcxxabi, libunwind, libuuidが公開されている．&lt;/p&gt;

&lt;h2 id=&quot;lkl-on-unikraft&quot;&gt;LKL on Unikraft&lt;/h2&gt;

&lt;p&gt;Unikraftは前述の通り本体にライブラリを持っているが，
Linuxのような成熟したネットワークスタックや
ファイルシステムなどを持っていない．
そこで，LKLをUnikraftの外部ライブラリとして移植することにより，
この問題点を解消することを目指す．
ここでは二種類の移植を紹介する．&lt;/p&gt;

&lt;h3 id=&quot;lkl-on-unikraft-v1&quot;&gt;LKL on Unikraft v1&lt;/h3&gt;

&lt;p&gt;最初にUnikraftのビルドシステムのみを利用したLKLの移植を行った．
以下にその構成を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-on-unikraft-v1.png&quot; alt=&quot;LKL on Unikraft v1の構成&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この構成ではLKL向けの
Unikraftのアーキテクチャとプラットフォームを新たに追加した．
このアーキテクチャとプラットフォームはstubであり，
Kconfigで指定する際に利用するのみである．
また，この設計では他のアーキテクチャやプラットフォームを指定して
LKLをビルドすることは不可能となっている．
また，LKLをUnikraftのライブラリと連携させることも不可能となっている．&lt;/p&gt;

&lt;p&gt;この構成のUnikraftは以下で公開している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/unikraft/tree/retrage/lkl&quot;&gt;uk-lkl/unikraft:retrage/lkl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lkl-on-unikraft-v2&quot;&gt;LKL on Unikraft v2&lt;/h2&gt;

&lt;p&gt;次に実際にLKLをUnikraftに移植したv2を紹介する．
以下にその構成を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-on-unikraft-v2.png&quot; alt=&quot;LKL on Unikraft v2の構成&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この構成ではLKLをUnikraftの外部ライブラリとして移植するため，
アーキテクチャやプラットフォームはUnikraft由来のものが利用可能である．
また，v1では不可能だったUnikraftの他のライブラリとの連携も可能となっている．
LKL側から見た場合，Unikraftは新しいホスト環境となるため，
&lt;code class=&quot;highlighter-rouge&quot;&gt;uk-host.c&lt;/code&gt;という新しいホスト依存コードを作成している．&lt;/p&gt;

&lt;p&gt;実装上，LKLのホスト依存コードは
mutex, semaphore, thread, timerなどを
ホスト側でサポートしている必要がある．
一方Unikraftでは現在cooporative schedulerのみ実装されており，
LKLの期待するpreemptive schedulerを持っていない．
また，Unikraftの持っているmutexやsemaphoreなども貧弱なため，
これらを利用することができない．
そこで，&lt;a href=&quot;https://github.com/littlekernel/lk&quot;&gt;littlekernel&lt;/a&gt;
という組み込み向けOSよりこれらの機能を移植することにより
この問題を解決する．
LKLに対してlittlekernelのコードを移植し．
ホスト側では一定時間にコールバック関数を呼び出しさえすれば
preemptive schedulerが動作するようにした．
これについてはUnikraftとは分離し独立した実装となるようにした．
このLKLの実装は以下で公開している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/retrage/linux/tree/retrage/fiber&quot;&gt;retrage/linux:retrage/fiber&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;実装&quot;&gt;実装&lt;/h3&gt;

&lt;p&gt;この実装ではターゲットのアーキテクチャをx86_64のみとし，
プラットフォームはKVMのみとしている．&lt;/p&gt;

&lt;p&gt;Unikraftは外部ライブラリとして
libcの実装の一つであるnewlibを持っている．
一方でUniraftはnewlibを利用しない場合でも
一般的なlibcの機能が利用できるように
&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/nolibc&lt;/code&gt;という内部ライブラリを提供している．
LKL on Unikraft v2でもnewlibに依存しないようにするため，
このnolibcを用いるように設計している．
一方でLKLの期待するlibcの関数や定数をnolibcが持っていなかったため，
Unikraftに対して次のような関数や定数をnolibcに追加している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;stdbool&lt;/li&gt;
  &lt;li&gt;fputc, putchar&lt;/li&gt;
  &lt;li&gt;STD{IN,OUT,ERR}_FILENO&lt;/li&gt;
  &lt;li&gt;strncat&lt;/li&gt;
  &lt;li&gt;strtok_r&lt;/li&gt;
  &lt;li&gt;setjmp/longjmp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また，前述の通りLKLは最低限一定時間ごとに
あるコールバック関数が呼び出される必要があるが，
Unikraftは起動時にperiodic timerを起動するものの，
ライブラリやアプリケーションからはコールバック関数を登録できないため，
コールバック関数を登録するようなインターフェースを追加している．&lt;/p&gt;

&lt;p&gt;またKVMでは独自のリンカスクリプトを用いてリンクを行うが，デフォルトではLinux kernel由来のシンボルが明示的に参照されないために必要なシンボルが削除されてしまう．このためリンカスクリプトに対してLKL向けの記述を追加している．&lt;/p&gt;

&lt;p&gt;以上の修正を行ったUnikraftとUnikraft向けライブラリ化したLKLは以下で公開している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/unikraft/tree/retrage/lkl-v2&quot;&gt;uk-lkl/unikraft:retrage/lkl-v2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uk-lkl/lkl&quot;&gt;uk-lkl/lkl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ビルドと実行&quot;&gt;ビルドと実行&lt;/h3&gt;

&lt;p&gt;Unikraft向けのLKLをビルドしてみる．
ここではLKLの機能を確認するためのテストアプリケーションである
&lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/tests/boot&lt;/code&gt;をUnikraftアプリケーション化した
&lt;a href=&quot;https://github.com/uk-lkl/boot&quot;&gt;uk-lkl/boot&lt;/a&gt;
を用いる．&lt;/p&gt;

&lt;p&gt;以下のようにビルドを行う．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir unikraft &amp;amp;&amp;amp; cd unikraft
$ git clone git@github.com:uk-lkl/unikraft.git --branch=retrage/lkl-v2
$ mkdir libs &amp;amp;&amp;amp; cd libs
$ git clone --recursive git@github.com:uk-lkl/lkl.git
$ cd ..
$ mkdir apps &amp;amp;&amp;amp; cd apps
$ git clone git@github.com:uk-lkl/boot.git
$ cd boot
$ make menuconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでKconfigでアーキテクチャにx86を，
プラットフォームにKVM guestかLinux user spaceを選択する．
最後に保存してKconfigを抜ける．
以下のようにmakeによりビルドを実行する．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ビルドが成功すると&lt;code class=&quot;highlighter-rouge&quot;&gt;build/boot_kvm-x86_64&lt;/code&gt;が生成される．&lt;/p&gt;

&lt;p&gt;KVM guestでは用意された&lt;code class=&quot;highlighter-rouge&quot;&gt;run.sh&lt;/code&gt;により実行できる．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./run.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行結果は以下のようになる．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[    0.721134] ERR:  [libukboot] boot.c @ 88   : Failed to initialize bus driver 0x56b060: -1
Welcome to  _ __             _____
 __ _____  (_) /__ _______ _/ _/ /_
/ // / _ \/ /  '_// __/ _ `/ _/ __/
\_,_/_//_/_/_/\_\/_/  \_,_/_/ \__/
                  Titan 0.2~ebcb42a
1..33 # boot
* 1 mutex
ok 1 mutex
 ---
 time_us: 0
 log: |
 ...
* 2 semaphore
ok 2 semaphore
 ---
 time_us: 0
 log: |
 ...
* 3 join
ok 3 join
 ---
 time_us: 1
 log: |
  joined 7909384
 ...
* 4 start_kernel
ok 4 start_kernel
 ---
 time_us: 9281
 log: |
  [    0.000000] Linux version 4.19.0+ (akira@akira-Z270) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.11)) #1 Thu May 30 23:10:09 JST 2019
  [    0.000000] bootmem address range: 0x1c001000 - 0x1d000000
  [    0.000000] On node 0 totalpages: 4095
  [    0.000000]   Normal zone: 56 pages used for memmap
  [    0.000000]   Normal zone: 0 pages reserved
  [    0.000000]   Normal zone: 4095 pages, LIFO batch:0
  [    0.000000] pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768
  [    0.000000] pcpu-alloc: [0] 0 
  [    0.000000] Built 1 zonelists, mobility grouping off.  Total pages: 4039
  [    0.000000] Kernel command line: mem=16M loglevel=8
  [    0.000000] Dentry cache hash table entries: 2048 (order: 2, 16384 bytes)
  [    0.000000] Inode-cache hash table entries: 1024 (order: 1, 8192 bytes)
  [    0.000000] Memory available: 16088k/16380k RAM
  [    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
  [    0.000000] NR_IRQS: 4096
  [    0.000000] lkl: irqs initialized
  [    0.000000] clocksource: lkl: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns
  [    0.198000] lkl: time and timers initialized (irq1)
  [    2.093000] pid_max: default: 4096 minimum: 301
  [   15.926000] Mount-cache hash table entries: 512 (order: 0, 4096 bytes)
  [   18.024000] Mountpoint-cache hash table entries: 512 (order: 0, 4096 bytes)
  [ 2722.817000] console [lkl_console0] enabled
  [ 2732.709000] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
  [ 2760.874000] random: get_random_u32 called from bucket_table_alloc.isra.6+0x9b/0x250 with crng_init=0
  [ 2774.823000] NET: Registered protocol family 16
  [ 3121.319000] clocksource: Switched to clocksource lkl
  [ 3181.520000] NET: Registered protocol family 2
  [ 3261.648000] tcp_listen_portaddr_hash hash table entries: 256 (order: 0, 4096 bytes)
  [ 3263.125000] TCP established hash table entries: 512 (order: 0, 4096 bytes)
  [ 3264.198000] TCP bind hash table entries: 512 (order: 0, 4096 bytes)
  [ 3265.141000] TCP: Hash tables configured (established 512 bind 512)
  [ 3286.743000] UDP hash table entries: 128 (order: 0, 4096 bytes)
  [ 3287.830000] UDP-Lite hash table entries: 128 (order: 0, 4096 bytes)
  [ 3456.331000] workingset: timestamp_bits=62 max_order=12 bucket_order=0
  [ 4041.077000] SGI XFS with ACLs, security attributes, no debug enabled
  [ 6032.987000] jitterentropy: Initialization failed with host not compliant with requirements: 2
  [ 6038.248000] io scheduler noop registered
  [ 6038.908000] io scheduler deadline registered
  [ 6067.383000] io scheduler cfq registered (default)
  [ 6068.093000] io scheduler mq-deadline registered
  [ 6068.764000] io scheduler kyber registered
  [ 7894.266000] NET: Registered protocol family 10
  [ 7979.259000] Segment Routing with IPv6
  [ 7988.492000] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
  [ 8097.859000] Warning: unable to open an initial console.
  [ 8106.456000] This architecture does not have kernel memory protection.
  [ 8107.119000] Run /init as init process
  lkl_start_kernel(&amp;amp;lkl_host_ops, &quot;mem=16M loglevel=8&quot;) = 0 
 ...
* 5 getpid
ok 5 getpid
 ---
 time_us: 5
 log: |
  lkl_sys_getpid() = 1 
 ...
* 6 syscall_latency
ok 6 syscall_latency
 ---
 time_us: 126
 log: |
  avg/min/max: lkl:107822000/104000000/450000000 native:6788000/6000000/77000000
 ...
* 7 umask
ok 7 umask
 ---
 time_us: 0
 log: |
  lkl_sys_umask(0777) = 18 
 ...
* 8 umask2
ok 8 umask2
 ---
 time_us: 0
 log: |
  lkl_sys_umask(0) = 511 
 ...
* 9 creat
ok 9 creat
 ---
 time_us: 9
 log: |
  lkl_sys_creat(&quot;/file&quot;, access_rights) = 0 
 ...
* 10 close
ok 10 close
 ---
 time_us: 0
 log: |
  lkl_sys_close(0) = 0 
 ...
* 11 failopen
ok 11 failopen
 ---
 time_us: 9
 log: |
  lkl_sys_open(&quot;/file2&quot;, 0, 0) = -2 No such file or directory
 ...
* 12 open
ok 12 open
 ---
 time_us: 7
 log: |
  lkl_sys_open(&quot;/file&quot;, LKL_O_RDWR, 0) = 0 
 ...
* 13 write
ok 13 write
 ---
 time_us: 4
 log: |
  lkl_sys_write(0, wrbuf, sizeof(wrbuf)) = 5 
 ...
* 14 lseek_cur
ok 14 lseek_cur
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_CUR) = 5 
 ...
* 15 lseek_end
ok 15 lseek_end
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_END) = 5 
 ...
* 16 lseek_set
ok 16 lseek_set
 ---
 time_us: 0
 log: |
  lkl_sys_lseek(0, 0, LKL_SEEK_SET) = 0 
 ...
* 17 read
ok 17 read
 ---
 time_us: 1
 log: |
  lkl_sys_read=5 buf=test
 ...
* 18 fstat
ok 18 fstat
 ---
 time_us: 1
 log: |
  lkl_sys_fstat=0 mode=100721 size=5
 ...
* 19 mkdir
ok 19 mkdir
 ---
 time_us: 8
 log: |
  lkl_sys_mkdir(&quot;/mnt&quot;, access_rights) = 0 
 ...
* 20 stat
ok 20 stat
 ---
 time_us: 7
 log: |
  lkl_sys_stat(&quot;/mnt&quot;)=0 mode=40721
 ...
* 21 pipe2
ok 21 pipe2
 ---
 time_us: 9
 log: |
 ...
* 22 epoll
ok 22 epoll
 ---
 time_us: 5
 log: |
 ...
* 23 mount_fs_proc
ok 23 mount_fs_proc
 ---
 time_us: 18
 log: |
  lkl_mount_fs(&quot;proc&quot;) = 0 
 ...
* 24 chdir_proc
ok 24 chdir_proc
 ---
 time_us: 7
 log: |
  lkl_sys_chdir(&quot;proc&quot;) = 0 
 ...
* 25 open_cwd
ok 25 open_cwd
 ---
 time_us: 7
 log: |
 ...
* 26 getdents64
ok 26 getdents64
 ---
 time_us: 6
 log: |
  4 . .. fs bus irq net sys tty kmsg maps misc stat iomem crypto driver 
  mounts uptime vmstat cmdline cpuinfo devices ioports loadavg meminfo version 
  consoles kallsyms slabinfo softirqs zoneinfo buddyinfo diskstats interrupts 
  partitions timer_list 
 ...
* 27 close_dir_fd
ok 27 close_dir_fd
 ---
 time_us: 0
 log: |
  lkl_sys_close(dir_fd) = 0 
 ...
* 28 chdir_root
ok 28 chdir_root
 ---
 time_us: 7
 log: |
  lkl_sys_chdir(&quot;/&quot;) = 0 
 ...
* 29 umount_fs_proc
ok 29 umount_fs_proc
 ---
 time_us: 11
 log: |
  lkl_umount_timeout(&quot;proc&quot;, 0, 1000) = 0 
 ...
* 30 lo_ifup
ok 30 lo_ifup
 ---
 time_us: 44
 log: |
  lkl_if_up(1) = 0 
 ...
* 31 gettid
ok 31 gettid
 ---
 time_us: 0
 log: |
  7893000
 ...
* 32 many_syscall_threads
ok 32 many_syscall_threads
 ---
 time_us: 26
 log: |
 ...
* 33 stop_kernel
ok 33 stop_kernel
 ---
 time_us: 531
 log: |
  [145272.871000] reboot: Restarting system
  lkl_sys_halt() = 0 
 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;問題点&quot;&gt;問題点&lt;/h2&gt;

&lt;p&gt;現状のLKL on Unikraftには次のような問題点がある．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unikraft本体に対する追加修正が必要&lt;/li&gt;
  &lt;li&gt;ディスクやネットワークのホスト依存コードが存在しない&lt;/li&gt;
  &lt;li&gt;ある条件下においてLKLがハングする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一つ目の問題点は前述の通りの修正についてである．
二つ目の問題点では開発時点においてUnikraft側に
有効なファイルシステムやネットワークのサポートがなかったためである．
三つ目の問題点はLKL on Unikraftのみではなく
&lt;a href=&quot;https://github.com/retrage/linux/tree/retrage/fiber&quot;&gt;retrage/linux:retrage/fiber&lt;/a&gt;
の問題となっている．&lt;/p&gt;

&lt;p&gt;また．設計上の問題点として
UnikraftはUnikernelを複数のライブラリに分割することにより
必要なライブラリのみをビルドするという方向性であるのに対し，
LKLでは既存のLinux kernelを再利用するために
LKLを取り込んだ場合にイメージサイズが大きくなりがちであり
必要な機能のみを取り込むというUnikraftの方向性に反するものである
という点が挙げられる．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/document/5541547&quot;&gt;LKL: The Linux kernel library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xenproject.org/developers/teams/unikraft/&quot;&gt;Unikraft - Xen Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/sites/default/files/conference/protected-files/lisa18_slides_kuenzer.pdf&quot;&gt;Unikraft: Unikernels Made Easy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.unikraft.org/&quot;&gt;Unikraft’s Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Linux kernelをUnikraftのライブラリ化した． これにより機能の少ないUnikernelの資源として Linux kernelの持つ機能を利用することが可能となる．</summary></entry><entry><title type="html">SMMとSTMについて</title><link href="/2019/05/23/smm-and-stm.html" rel="alternate" type="text/html" title="SMMとSTMについて" /><published>2019-05-23T14:55:34+09:00</published><updated>2019-05-23T14:55:34+09:00</updated><id>/2019/05/23/smm-and-stm</id><content type="html" xml:base="/2019/05/23/smm-and-stm.html">&lt;h1 id=&quot;smmとstmについて&quot;&gt;SMMとSTMについて&lt;/h1&gt;

&lt;p&gt;ここではx86のSystem Management Mode(SMM)についてと
SMI Transfer Monitor(STM)について解説する．&lt;/p&gt;

&lt;h2 id=&quot;system-management-mode&quot;&gt;System Management Mode&lt;/h2&gt;

&lt;h3 id=&quot;概要&quot;&gt;概要&lt;/h3&gt;

&lt;p&gt;ここでの話は
&lt;a href=&quot;http://opensecuritytraining.info/IntroBIOS.html&quot;&gt;Advanced x86: Introduction to BIOS &amp;amp; SMM&lt;/a&gt;
を元にしている．
SMMのセキュリティなどについて詳しく知りたい場合は
こちらの資料を参照したい．&lt;/p&gt;

&lt;p&gt;x86には16-bit real modeや32-bit protected mode，
64-bit long modeなど様々なモードが存在する．
System Management Mode(SMM)はそのようなモードの一つである．
次にx86のmodeの遷移図を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/amd64-mode-state.png&quot; alt=&quot;Operating Modes of the AMD64 Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ここで示されているように
プロセッサがどのモードであっても&lt;code class=&quot;highlighter-rouge&quot;&gt;SMI#&lt;/code&gt;によりSMMに移行できることがわかる．
また，後述するようにSMMは&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令により元のモードに復帰する．&lt;/p&gt;

&lt;p&gt;SMMはx86においてもっとも高い権限を持ったモードであり，
通常はOSにも透過的に動作する．
SMMにはSystem Management Interrupt(SMI)という
割り込みが発生することで移行する．
SMMは通常&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令によりSMMから復帰する．&lt;/p&gt;

&lt;p&gt;SMMはOSなどとは隔離された環境を用意し，
主に次のような用途で用いられる．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;電源やバッテリ管理&lt;/li&gt;
  &lt;li&gt;システムハードウェアの制御&lt;/li&gt;
  &lt;li&gt;proprietaryなコードの実行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;system-management-interrupt&quot;&gt;System Management Interrupt&lt;/h3&gt;

&lt;p&gt;SMMにはSMIを受け取ることで移行することは先に述べた．
SMIはプロセッサの&lt;code class=&quot;highlighter-rouge&quot;&gt;SMI#&lt;/code&gt;ピンかAPICバス経由で受け取る．
SMIは通常の割り込みのようにマスクすることができずNMIよりも優先度が高いとされる．
また通常の割り込みや例外処理とは独立した機構となっている．&lt;/p&gt;

&lt;p&gt;SMIを受け取りSMMに移行したプロセッサはSMRAMと呼ばれるメモリ領域に
移行前のプロセッサのコンテキストを保存してから処理を行う．
&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令によりSMMから抜けるとき，
保存していたプロセッサのコンテキストを復帰して元の状態に戻る．
なお，&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令はSMMのみで有効な命令でありSMMでないモードで実行すると
invalid opcode exceptionが発生する．&lt;/p&gt;

&lt;h3 id=&quot;smram&quot;&gt;SMRAM&lt;/h3&gt;

&lt;p&gt;SMRAMはSMMで使われるメモリ領域全体のことであり，
SMIハンドラのコードやデータ，
また前述のプロセッサのコンテキストが保存される．
SMRAMのベースアドレスはSMBASEと呼ばれる
CPU内部に存在するレジスタに保存されている．
コンテキストなどSMBASEからのあるオフセット位置に配置される．&lt;/p&gt;

&lt;p&gt;なお，SMMにより保存されるプロセッサのコンテキストにもSMBASEの値が含まれている．
これによりコンテキストのSMBASEの値を変えることで
SMRAMを再配置することも可能となっている．&lt;/p&gt;

&lt;p&gt;次にSMRAMの配置を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/smram-map.png&quot; alt=&quot;SMRAM Memory Map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SMIハンドラのentry pointは&lt;code class=&quot;highlighter-rouge&quot;&gt;SMBASE + 8000h&lt;/code&gt;と定められている．
64-bitの場合&lt;code class=&quot;highlighter-rouge&quot;&gt;SMBASE + 8000h + 7C00h&lt;/code&gt;以降にはプロセッサのコンテキストが配置される．
これら2つ以外の領域は空き領域としてSMMのコードが自由に使うことができる．&lt;/p&gt;

&lt;p&gt;SMRAMは4GBのメモリアドレス空間であればどこにでも配置することができる．
また，先に説明したようにプロセッサのコンテキストを書き換えることにより
SMRAMを再配置することができるため，SMRAMはシステム起動時に再配置されることが多い．&lt;/p&gt;

&lt;h2 id=&quot;smi-transfer-monitor&quot;&gt;SMI Transfer Monitor&lt;/h2&gt;

&lt;p&gt;SMMは以上で述べたような構成となっているが，
ここでVMXが加わると事情が変わってくる場合がある．
VMXが有効な場合，SMMは次の2つのモードを持つことができる&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Default Treatment&lt;/li&gt;
  &lt;li&gt;Dual-Monitor Treatment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般的に使われるモードはDefault Treatmentであるが，
ここではDual-Monitor Treatmentについてみていく．&lt;/p&gt;

&lt;p&gt;Dual-Monitor Treatmentの場合，
executive monitorと呼ばれる通常のVMMに加えて
SMM Transfer Monitor (STM)と呼ばれるVMMが必要となる．
STMはSMM内部で動作するVMMであり後述するように
通常のVMMではトラップできないSMIをトラップすることが可能である．
なお，STMと言った場合，ドキュメント上想定されるソフトウェアとしてのSTMと
実装としてのSTMの2通りが存在するが，ここでは前者のみを扱うことにする．&lt;/p&gt;

&lt;p&gt;次にDual-Monitor Treatmentの構成を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/stm-architecture.png&quot; alt=&quot;STM Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;右下が通常のVMMであり右上がその上で動くVMである．
VMM VMはVMX non-root modeで動作し，
VMMはVMX root modeで動作する．
ここまでは通常のVMMど同様である．
Dual-Monitor Treatmentではこれらに加えて
STMとSMM VMが追加される．
STMはVMX root modeで動作し，
SMM VMはVMX non-root modeで動作する．
STMはSMM内部で完結しており
コードやデータはSMRAMに配置される．&lt;/p&gt;

&lt;p&gt;ここではVMM VMにおいてSMIが発生した場合の流れをみていく．
VMM VMにおいてSMIが発生すると
SMMに移行するが直接SMIハンドラが実行されるのではなく，
STMにトラップされる．
このとき，VMMで利用するVMCS (executive-VMCS)とは別に
SMI VMCSと呼ばれるコンテキストにVMの状態が保存される．
STMはSMM VMに対してVM Entryを行い，
(なお，ここでSMM VMはもともとExitされており，
SMM VMCSと呼ばれるSMM VMのためのVMCSを用いる)
トラップしたSMIに基づきSMM VM内部でSMIハンドラの処理を行う．
&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令によりSMM VMからVM Exitし
STMは先に保存しておいたSMI VMCSを用いてVM Entryを行う．&lt;/p&gt;

&lt;p&gt;STMの特徴的な点として挙げられるのは
VMMからVMCALLによりSTMを呼び出すことができる点である．
この場合もSMI VMCSによりコンテキストが保存されて，
VMMに戻る際にVM Entryによりコンテキストから状態を復帰させることとなる．&lt;/p&gt;

&lt;p&gt;通常のSMMとDual-Monitor treatmentの違いは
SMIはVM Exit扱いとなり，SMI VMCSを用いる点や
&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令からSMMから復帰するのではなく
VM EntryによりSMMから復帰する点などが挙げられる．&lt;/p&gt;

&lt;h2 id=&quot;20190528-追記&quot;&gt;2019/05/28 追記&lt;/h2&gt;

&lt;h3 id=&quot;out命令によるsmiの発生&quot;&gt;out命令によるSMIの発生&lt;/h3&gt;

&lt;p&gt;SMIはout命令によりユーザランドから発生させることもできる．
SDMによればout命令は以下のようになっている．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;out imm8, al
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;alレジスタ(1-byte)の内容をimm8の示すポート番号に出力
という意味となっている．
SMIのポートは伝統的に0xb2と決まっているようである．
0xb2にはAPMのコントローラが接続されており，
チップセットはここへの書き込みにより
SMIを発生させるように設計されている．&lt;/p&gt;

&lt;h3 id=&quot;smramの再配置&quot;&gt;SMRAMの再配置&lt;/h3&gt;

&lt;p&gt;SeaBIOSではQEMU向けにSMMをサポートしており，
最初のSMIの発生時にSMRAMを再配置する．
これはSMBASEが最初0x30000に設定されている一方で
伝統的には0xa0000 (VGAバッファの裏側)とされていることから
この領域に再配置させる必要があるためと考えられる．&lt;/p&gt;

&lt;h3 id=&quot;stmの利用例&quot;&gt;STMの利用例&lt;/h3&gt;

&lt;p&gt;STMはVMMから起動させる必要があり，
一般的なVMMのユースケースには適用しにくい．
&lt;a href=&quot;https://firmware.intel.com/sites/default/files/A_Tour_Beyond_BIOS_Launching_STM_to_Monitor_SMM_in_EFI_Developer_Kit_II.pdf&quot;&gt;A Tour Beyond BIOS Lanuching a STM to Monitor SMM in EFI Developer Kit II&lt;/a&gt;
ではFirmware Reference Monitor (FRM)を提案している．
以下にFRMの図を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/frm-architecture.png&quot; alt=&quot;FRM Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FRMはVMMとして動作し，VMM VM内部でUEFIを動作させている．&lt;/p&gt;

&lt;h2 id=&quot;stmの実装&quot;&gt;STMの実装&lt;/h2&gt;

&lt;p&gt;STMの実験的な実装は&lt;a href=&quot;https://github.com/jyao1/STM&quot;&gt;jyao1/STM&lt;/a&gt;があり，
&lt;a href=&quot;https://elinux.org/Minnowboard:MinnowMax&quot;&gt;MinnowMax&lt;/a&gt;向けとなっている．
この実装ではSTMに加えて前述のFRMの実装やSTMのテストも含まれている．
また，このコードはEDK2をベースにしている．&lt;/p&gt;

&lt;h3 id=&quot;stmコードリーディング&quot;&gt;STMコードリーディング&lt;/h3&gt;

&lt;p&gt;STMのコードを追ってみる．&lt;/p&gt;

&lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ASM_PFX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModuleEntryPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmpl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STM_API_INITIALIZE_PROTECTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%eax # for BSP
  jz  GoBsp
  cmpl $STM_API_START, %&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# for AP&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GoAp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jmp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeadLoop&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;プロセッサがBSPかAPかで&lt;code class=&quot;highlighter-rouge&quot;&gt;GoBsp&lt;/code&gt;か&lt;code class=&quot;highlighter-rouge&quot;&gt;GoAp&lt;/code&gt;かに飛ぶ．
どちらもスタックの設定を行ってから&lt;code class=&quot;highlighter-rouge&quot;&gt;InitializeSmmMonitor&lt;/code&gt;に飛ぶ．&lt;/p&gt;

&lt;h4 id=&quot;initialization&quot;&gt;Initialization&lt;/h4&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;InitializeSmmMonitor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X86_REGISTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;UINT32&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetIndexFromStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// The build process should make sure &quot;virtual address&quot; is same as &quot;file pointer to raw data&quot;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// in final PE/COFF image, so that we can let StmLoad load binrary to memory directly.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If no, GenStm tool will &quot;load image&quot;. So here, we just need &quot;relocate image&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RelocateStmImage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;BspInit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetIndexFromStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ApInit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;CommonInit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;VmcsInit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;LaunchBack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;setup&quot;&gt;Setup&lt;/h4&gt;

&lt;p&gt;SetupはSTMが&lt;code class=&quot;highlighter-rouge&quot;&gt;STM_API_START&lt;/code&gt;をVMCALL経由で受け取ったときに行われる．
以下にVMCALLで呼ばれるハンドラの一覧を示す．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;STM_VMCALL_HANDLER_STRUCT&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;mSmiVmcallHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STM_API_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                              &lt;span class=&quot;n&quot;&gt;SmiVmcallStartHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STM_API_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                               &lt;span class=&quot;n&quot;&gt;SmiVmcallStopHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STM_API_PROTECT_RESOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;SmiVmcallProtectResourceHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STM_API_UNPROTECT_RESOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;SmiVmcallUnprotectResourceHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STM_API_GET_BIOS_RESOURCES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;SmiVmcallGetBiosResourcesHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STM_API_MANAGE_VMCS_DATABASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;SmiVmcallManageVmcsDatabaseHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STM_API_INITIALIZE_PROTECTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;SmiVmcallInitializeProtectionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STM_API_MANAGE_EVENT_LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;SmiVmcallManageEventLogHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SmiVmcallStartHandler&lt;/code&gt;は内部で&lt;code class=&quot;highlighter-rouge&quot;&gt;SmmSetup&lt;/code&gt;を呼び出し&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amd.com/system/files/TechDocs/24593.pdf&quot;&gt;AMD64 Architecture Programmer’s Manual Volume 2: System Programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensecuritytraining.info/IntroBIOS_files/Day1_07_Advanced%20x86%20-%20BIOS%20and%20SMM%20Internals%20-%20SMM.pdf&quot;&gt;Advanced x86: BIOS and System Management Mode Internals System Management Mode (SMM)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensecuritytraining.info/IntroBIOS_files/Day1_08_Advanced%20x86%20-%20BIOS%20and%20SMM%20Internals%20-%20SMRAM.pdf&quot;&gt;Advanced x86: BIOS and System Management Mode Internals SMRAM (System Management RAM)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">SMMとSTMについて</summary></entry><entry><title type="html">正規表現からLLVM IRを生成する</title><link href="/2019/05/12/regex-to-llvm-ir.html" rel="alternate" type="text/html" title="正規表現からLLVM IRを生成する" /><published>2019-05-12T17:47:26+09:00</published><updated>2019-05-12T17:47:26+09:00</updated><id>/2019/05/12/regex-to-llvm-ir</id><content type="html" xml:base="/2019/05/12/regex-to-llvm-ir.html">&lt;h1 id=&quot;正規表現からllvm-irを生成する&quot;&gt;正規表現からLLVM IRを生成する&lt;/h1&gt;

&lt;p&gt;正規表現は文字列マッチングなどに広く用いられている形式言語であるが，
等価な決定性有限オートマトン(DFA)に変換できることが知られている．
&lt;a href=&quot;https://github.com/google/redgrep&quot;&gt;google/redgrep&lt;/a&gt;
は与えられた正規表現から等価なDFAに相当するネイティブコードを
LLVMにより生成する．
ここではredgrepを改造して
正規表現からどのようなLLVM IRが生成されるのかをみてみる．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;redll&lt;/code&gt;というツールを追加した．コードは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/retrage/redgrep/tree/retrage/redll&quot;&gt;https://github.com/retrage/redgrep/tree/retrage/redll&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;に置いてある．&lt;/p&gt;

&lt;h2 id=&quot;使い方&quot;&gt;使い方&lt;/h2&gt;

&lt;p&gt;最初にLLVMのソースコードをダウンロードして
ビルドしてローカルの適当な場所にインストールしておく．
redgrepは新しいLLVMを要求するのでLLVM 8.0.0あたりを入れておく．
redgrepのビルドが通るようにパスを通す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ export LLVM_CONFIG=/path/to/bin/llvm-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とかやってからredgrepをビルドする．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./redll &quot;regex&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;で遊べる．&lt;/p&gt;

&lt;h2 id=&quot;例-a&quot;&gt;例: “a”&lt;/h2&gt;

&lt;p&gt;試しに正規表現パターン”a”がどのようになるのかを以下に示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./redll &quot;a&quot;
; dfa is 3 states
; ModuleID = 'M'
source_filename = &quot;M&quot;
target datalayout = &quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;

; Function Attrs: norecurse nounwind readonly
define i1 @F(i8* nocapture readonly, i64) local_unnamed_addr #0 {
entry:
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %return_true, label %3

return_true:                                      ; preds = %3, %entry
  ret i1 false

; &amp;lt;label&amp;gt;:3:                                      ; preds = %entry
  %4 = load i8, i8* %0, align 1
  %cond = icmp eq i8 %4, 97
  br i1 %cond, label %5, label %return_true

; &amp;lt;label&amp;gt;:5:                                      ; preds = %3
  %6 = icmp eq i64 %1, 1
  ret i1 %6
}

attributes #0 = { norecurse nounwind readonly }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;という関数があり，
入力が0であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;を返し，
そうでなければ入力から1文字取り出し
&lt;code class=&quot;highlighter-rouge&quot;&gt;97&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;を返す，
というような状態機械になっていることがわかる．&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;他にも色々面白く遊べるはずなので試してほしい．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/google/redgrep&lt;/li&gt;
  &lt;li&gt;https://github.com/retrage/redgrep&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">正規表現からLLVM IRを生成する</summary></entry><entry><title type="html">技術書典6で新刊「UEFI読本 GRUB編」を頒布</title><link href="/2019/04/13/efi-book2-ad.html" rel="alternate" type="text/html" title="技術書典6で新刊「UEFI読本 GRUB編」を頒布" /><published>2019-04-13T12:18:33+09:00</published><updated>2019-04-13T12:18:33+09:00</updated><id>/2019/04/13/efi-book2-ad</id><content type="html" xml:base="/2019/04/13/efi-book2-ad.html">&lt;h1 id=&quot;技術書典6で新刊uefi読本-grub編を頒布&quot;&gt;技術書典6で新刊「UEFI読本 GRUB編」を頒布&lt;/h1&gt;

&lt;p&gt;2019年4月14日に池袋サンシャインシティで開催される
技術書典6において「海洋軟件」として
新刊「UEFI読本 GRUB編」を頒布する。
既刊「UEFI読本 基礎編 Linux編」も基礎編を分離し
「UEFI読本 Linux編」として頒布する。
配置先は「う27」である。&lt;/p&gt;

&lt;h2 id=&quot;uefi読本-grub編&quot;&gt;UEFI読本 GRUB編&lt;/h2&gt;

&lt;p&gt;以下、本書「はじめに」より抜粋。&lt;/p&gt;

&lt;p&gt;前回の技術書典5において頒布した「UEFI読本 基礎編 Linux編」（以下、「Linux編」）は
海洋軟件として初の同人誌であったにもかかわらず、
多くの方に読んでいただいたようでこの場で感謝申し上げたい。
「Linux編」ではEFI stubでの起動プロセスをソースコードレベルで追跡した。
しかし、多くのLinuxディストリビューションではGRUB bootloaderを利用することが多く、
一般的なLinux環境での起動プロセスをカバーできていなかった。
そこで本書ではUEFI環境でのGRUBの起動とLinuxの起動をみていく。
ただし、Linuxの起動そのものについては紙面の関係上ここでは対象外とする。&lt;/p&gt;

&lt;h2 id=&quot;uefi読本-linux編&quot;&gt;UEFI読本 Linux編&lt;/h2&gt;

&lt;p&gt;以下、本書「はじめに」より抜粋。&lt;/p&gt;

&lt;p&gt;UEFIが2005年に登場してから10年以上が経過した。
現在のx86系CPUを搭載したコンピュータのほとんどが
UEFIに対応しており、かつOSも当然のように対応している。
しかし、UEFIやそこからの起動を解説をした文書は非常に少なく、
規格書かソースコードを読み解くしかなかった。
本書はそのような現状に応えるべく企画された。&lt;/p&gt;

&lt;p&gt;本書は「UEFI読本 Linux編」というUEFIにおけるLinux kernelの起動についての解説書である。
「技術書典 5」において頒布した「UEFI読本 基礎編 Linux編」を元に
基礎編を分離させて修正を加えた。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://techbookfest.org/event/tbf06/circle/65580001&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">技術書典6で新刊「UEFI読本 GRUB編」を頒布</summary></entry><entry><title type="html">LinuxにおけるEFI Variableをみてみる</title><link href="/2018/12/20/linux-efivars.html" rel="alternate" type="text/html" title="LinuxにおけるEFI Variableをみてみる" /><published>2018-12-20T10:09:49+09:00</published><updated>2018-12-20T10:09:49+09:00</updated><id>/2018/12/20/linux-efivars</id><content type="html" xml:base="/2018/12/20/linux-efivars.html">&lt;h1 id=&quot;linuxにおけるefi-variableをみてみる&quot;&gt;LinuxにおけるEFI Variableをみてみる&lt;/h1&gt;

&lt;p&gt;この記事は
&lt;a href=&quot;https://qiita.com/advent-calendar/2018/linux&quot;&gt;Linux Advent Calendar 2018&lt;/a&gt;
の20日目の記事として書かれた．
ここではLinux kerenlにおけるEFI Variableのコードをみていく．&lt;/p&gt;

&lt;h2 id=&quot;efi-variableとは&quot;&gt;EFI Variableとは&lt;/h2&gt;

&lt;p&gt;UEFIでは，EFI varibale(EFI変数)というものが存在する．
これは不揮発性メモリ(NVRAM)に値が書き込まれるため，
電源を切っても値が失われることなく保存される．
EFI Variableは起動時の起動の順番などが保存される．&lt;/p&gt;

&lt;p&gt;UEFIにはEFI Variablesへの読み書きを行うための機能が
Runtime Servicesに存在する．
このため後述するように，OSの起動後もEFI Variableが
Runtime Servicesを通して利用可能となっている．
関連する関数は具体的には以下の4つである．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetVariables&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetNextVariablesName&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SetVariables&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QueryVairableInfo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;EFI Variableはkey-valueの形式になっており，
文字列keyを入力として，&lt;code class=&quot;highlighter-rouge&quot;&gt;GetVariables&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;SetVariables&lt;/code&gt;により
valueの読み/書きができる．
Valueを得るために必要なkeyは&lt;code class=&quot;highlighter-rouge&quot;&gt;GetNextVariableName&lt;/code&gt;
により得ることができる．
&lt;code class=&quot;highlighter-rouge&quot;&gt;QueryVairbaleInfo&lt;/code&gt;ではEFI Variable全体のについての情報を得ることができる．&lt;/p&gt;

&lt;h2 id=&quot;linux-kernelにおけるefi-variable&quot;&gt;Linux kernelにおけるEFI Variable&lt;/h2&gt;

&lt;p&gt;Linux kernelでは，EFI Variableは
擬似ファイルシステムとして表現され，
&lt;code class=&quot;highlighter-rouge&quot;&gt;/sys/firmware/efi/efivars&lt;/code&gt;にマウントされる．
(なお，過去には&lt;code class=&quot;highlighter-rouge&quot;&gt;sysfs&lt;/code&gt;経由でのサポートだったようだが，
&lt;code class=&quot;highlighter-rouge&quot;&gt;sysfs&lt;/code&gt;の制限のため，別実装となったようである)&lt;/p&gt;

&lt;p&gt;ここで実際の&lt;code class=&quot;highlighter-rouge&quot;&gt;efivars&lt;/code&gt;を例示してみる．&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /sys/firmware/efi/efivars
&lt;span class=&quot;c&quot;&gt;# snip&lt;/span&gt;
Boot0000-8be4df61-93ca-11d2-aa0d-00e098032b8c
Boot0001-8be4df61-93ca-11d2-aa0d-00e098032b8c
Boot0002-8be4df61-93ca-11d2-aa0d-00e098032b8c
Boot0003-8be4df61-93ca-11d2-aa0d-00e098032b8c
&lt;span class=&quot;c&quot;&gt;# snip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /sys/firmware/efi/efivars/Boot0000-8be4df61-93ca-11d2-aa0d-00e098032b8c
bubuntu??H??yC??Y??ä?4&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;FI&lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;BUNTU&lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;HIMX64.EFI?%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように，0000には現在起動しているUbuntuについてのパスが保存されていることがわかる．&lt;/p&gt;

&lt;h2 id=&quot;efivarsの実装&quot;&gt;efivarsの実装&lt;/h2&gt;

&lt;p&gt;ではここから実際にefivarsの実装をみていく．
トップダウンに&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;の実装から
どのようにEFI Variableがファイルにマップされるかを見て，
次にRuntime Servicesがどのように呼ばれるかを見ていく．
参照するLnux kernelはmainlineのv4.20-rc2(ccda4af0f4b92f7b4c308d3acc262f4a7e3affad)
である．&lt;/p&gt;

&lt;h3 id=&quot;efivarfsの初期化&quot;&gt;efivarfsの初期化&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;の実装は&lt;code class=&quot;highlighter-rouge&quot;&gt;fs/efivarfs/&lt;/code&gt;にある．
最初に&lt;code class=&quot;highlighter-rouge&quot;&gt;fs/efivarfs/super.c&lt;/code&gt;をみる．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivarfs_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EFI_RUNTIME_SERVICES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENODEV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENODEV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;register_filesystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Linux kernel初期化時に&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;の初期化が
&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_init&lt;/code&gt;により行われて&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;がマウントされる．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_system_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THIS_MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;efivarfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kill_sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_kill_sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;efivarfs_mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_system_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mount_single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_fill_super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;辿っていくと，&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_fill_super&lt;/code&gt;が
&lt;code class=&quot;highlighter-rouge&quot;&gt;mount_single&lt;/code&gt;により実行される．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivarfs_fill_super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;efivarfs_sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_maxbytes&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_LFS_FILESIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_blocksize&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PAGE_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_blocksize_bits&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PAGE_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_magic&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFIVARFS_MAGIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_op&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_d_op&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_d_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_time_gran&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_get_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFDIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENOMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_dir_inode_operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_make_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENOMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;INIT_LIST_HEAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__efivar_entry_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでファイルシステムの中身を作成している．
最初に&lt;code class=&quot;highlighter-rouge&quot;&gt;/sys/firmware/efi/efivar&lt;/code&gt;が作成され，
&lt;code class=&quot;highlighter-rouge&quot;&gt;efivar_init&lt;/code&gt;により&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_list&lt;/code&gt;に
EFI Variableのエントリが追加される．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * efivar_init - build the initial list of EFI variables
 * @func: callback function to invoke for every variable
 * @data: function-specific data to pass to @func
 * @atomic: do we need to execute the @func-loop atomically?
 * @duplicates: error if we encounter duplicates on @head?
 * @head: initialised head of variable list
 *
 * Get every EFI variable from the firmware and invoke @func. @func
 * should call efivar_entry_add() to build the list of variables.
 *
 * Returns 0 on success, or a kernel error code on failure.
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivar_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_char16_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_guid_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__efivars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;efi_char16_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_status_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_guid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vendor_guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_next_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vendor_guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_name_strnsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                   &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/*
             * Some firmware implementations return the
             * same variable name on multiple calls to
             * get_next_variable(). Terminate the loop
             * immediately as there is no guarantee that
             * we'll ever see a different variable name,
             * and may end up looping here forever.
             */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplicates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;variable_is_present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vendor_guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dup_variable_bug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vendor_guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_NOT_FOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vendor_guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_NOT_FOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down_interruptible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;efivar_init&lt;/code&gt;では，
&lt;code class=&quot;highlighter-rouge&quot;&gt;ops-&amp;gt;get_next_variable&lt;/code&gt;により
実際にRuntimeServices-&amp;gt;GetNextVariableが呼ばれ，
EFI Variableが読み出される．
なお，コメントにあるように，いくつかのUEFI Firmwareの実装では
複数のGetNextVariableの呼び出しにより同じEFI Variableが得られてしまう
というバグがあるため，重複があった場合，&lt;code class=&quot;highlighter-rouge&quot;&gt;dup_variable_bug&lt;/code&gt;により
これを処理し，do-whileを抜けるようになっているようである．&lt;/p&gt;

&lt;p&gt;さて，問題がない場合は，引数として渡される&lt;code class=&quot;highlighter-rouge&quot;&gt;func&lt;/code&gt;を呼び出す．
これは&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_callback&lt;/code&gt;となっている．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivarfs_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_char16_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_guid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vendor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENOMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_removable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_get_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFREG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0644&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;is_removable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_alloc_dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IS_ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTR_ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;efivar_entry_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_callback&lt;/code&gt;では，
得られたEFI Variableに対応するファイルを作成して追加する．&lt;/p&gt;

&lt;p&gt;以上が&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;の初期化の流れとなっている．&lt;/p&gt;

&lt;h2 id=&quot;efivarfsのreadwrite&quot;&gt;efivarfsのread/write&lt;/h2&gt;

&lt;p&gt;次に&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;でのread/write時の動作をみてみる．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_operations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_file_operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simple_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_file_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_file_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llseek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no_llseek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlocked_ioctl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_file_ioctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;より，&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_file_read&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_file_write&lt;/code&gt;に集約されている．&lt;/p&gt;

&lt;h3 id=&quot;read時&quot;&gt;read時&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivarfs_file_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loff_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datasize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivar_entry_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__efivars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_status_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down_interruptible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VariableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VendorGuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_status_to_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように，
&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_file_read&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;efivar_entry_get&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get_variable&lt;/code&gt;
によりread時にRuntimeServices-&amp;gt;GetVariableを呼び出していることがわかる．&lt;/p&gt;

&lt;h3 id=&quot;write時&quot;&gt;write時&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivarfs_file_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loff_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry_set_get_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datasize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENOENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;drop_nlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d_delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;inode_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i_size_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;inode_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivar_entry_set_get_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__efivars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_char16_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VariableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_guid_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vendor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VendorGuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_status_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vendor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_status_to_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * Writing to the variable may have caused a change in size (which
     * could either be an append or an overwrite), or the variable to be
     * deleted. Perform a GetVariable() so we can tell what actually
     * happened.
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VariableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VendorGuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_NOT_FOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;efivar_entry_list_del_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;write時も同様にして
&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_file_write&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;efivar_entry_set_get_size&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set_variable&lt;/code&gt;
により与えられたデータをEFI Variableとして書き込んでいる．
コメントにあるように，RuntimeServices-&amp;gt;GetVariableを実行し，
データの追加や上書き，削除のどれがなされたかを&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;により判定する．
&lt;code class=&quot;highlighter-rouge&quot;&gt;efivar_entry_set_get_size&lt;/code&gt;の返り値&lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt;により，
ファイルを削除するか，サイズを変更するなどの操作を行う．&lt;/p&gt;

&lt;h3 id=&quot;runtime-servicesの呼び出しに関するtips&quot;&gt;Runtime Servicesの呼び出しに関するTips&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_status_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;virt_efi_get_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_char16_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;efi_guid_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vendor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_status_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down_interruptible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_runtime_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_ABORTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_queue_work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET_VARIABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vendor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_runtime_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Linux kernelにおいて，
UEFI Runtime Servicesを呼び出す場合には，
&lt;code class=&quot;highlighter-rouge&quot;&gt;efi_runtime_lock&lt;/code&gt;セマフォをdownしてから
実行すべきUEFIサービスを&lt;code class=&quot;highlighter-rouge&quot;&gt;efi_queue_work&lt;/code&gt;キューに挿入して
実行させ，最後にセマフォをupさせている．
(例外もあり，nonblockingな呼び出しも存在する)&lt;/p&gt;

&lt;p&gt;OSを自作する際にも参考にしたい工夫である．&lt;/p&gt;</content><author><name></name></author><summary type="html">LinuxにおけるEFI Variableをみてみる</summary></entry><entry><title type="html">ebcvm: A Usermode EFI Byte Code Virtual Machine</title><link href="/2018/12/19/introduction-to-ebcvm.html" rel="alternate" type="text/html" title="ebcvm: A Usermode EFI Byte Code Virtual Machine" /><published>2018-12-19T00:00:00+09:00</published><updated>2018-12-19T00:00:00+09:00</updated><id>/2018/12/19/introduction-to-ebcvm</id><content type="html" xml:base="/2018/12/19/introduction-to-ebcvm.html">&lt;p&gt;この記事は
&lt;a href=&quot;https://adventar.org/calendars/2915&quot;&gt;自作OS Advent Calendar 2018&lt;/a&gt;
の19日目の記事として書かれた．
ここでは，フルスクラッチで開発したEFI Byte Code Virtual Machineである
ebcvm[1]と開発したのELVMのEBCバックエンド[2]について紹介する．&lt;/p&gt;

&lt;h2 id=&quot;efi-byte-codeについて&quot;&gt;EFI Byte Codeについて&lt;/h2&gt;

&lt;p&gt;すでにEFI Bye Codeを解説した記事を書いている[3]ため．
そちらを参考にしていただきたい．&lt;/p&gt;

&lt;h2 id=&quot;ebcvmの概要&quot;&gt;ebcvmの概要&lt;/h2&gt;

&lt;p&gt;ebcvmは*nix向けに開発したEFI Byte Code Virtual Machine実装である．
TianoCore/EDK2にはEBCのVMの実装が既に存在する[4]が，
ここではそちらの実装を使わずにUEFI Specificationとオンラインで公開されている
ごく少数の EBCバイナリを参考に実装を行なった．
ebcvmの開発のモチベーションとしては(ほとんど)規格書のみで実装できるか
ということに興味があったため，という側面が強い．&lt;/p&gt;

&lt;p&gt;ebcvmの概略図を以下に示す．
&lt;img src=&quot;/img/ebcvm-architecture.png&quot; alt=&quot;ebcvm-architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この図から分かるように，ebcvmは以下の部分で構成される．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Virtual Machine
    &lt;ul&gt;
      &lt;li&gt;Memory&lt;/li&gt;
      &lt;li&gt;Registers&lt;/li&gt;
      &lt;li&gt;Decoder&lt;/li&gt;
      &lt;li&gt;Executor&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;EFI Native Code Emulator&lt;/li&gt;
  &lt;li&gt;Loader&lt;/li&gt;
  &lt;li&gt;Debugger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ebcvmでは規格書に記載されている全ての命令が実装されている．&lt;/p&gt;

&lt;p&gt;EBCではほぼ全ての操作がVM内部で閉じている．
しかし，例外としてEFIのNative Codeの呼び出しが可能となっている．
(仕様上，EBCからNative, NativeからEBCどちらも可能となっている．)
このため，EBCからSystemTable以下にあるBootServicesやRuntimeServicesへの
アクセスが可能となっている．
特に，文字の入出力についてはConIn, ConOut, StdErrを使わざるを得ないので，
ebcvmでもNative Codeの呼び出しに対応する必要がある．
このため，EFIの用意するNative CodeのEmulationを行なっている．
現状，ebcvmでは以下のごく一部のNative Codeのみ対応している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BootServices-&amp;gt;AllocatePool&lt;/li&gt;
  &lt;li&gt;ConIn-&amp;gt;ReadKeyStroke&lt;/li&gt;
  &lt;li&gt;ConOut-&amp;gt;OutputString&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UEFIではFirmware側が動的にApplicationをメモリ上に配置できるように
UEFI Application/Driverはrelocatableなものとなっている．
EBCのバイナリでもこれは同様である．
そのため，ebcvmのローダもrelocationに対応しており，
&lt;code class=&quot;highlighter-rouge&quot;&gt;--reloc=1&lt;/code&gt;のオプションを実行時に渡すことで
relocationが行われるようになっている．&lt;/p&gt;

&lt;p&gt;EBCは現状GNU binutils, GCC, LLVM/Clangなど一般的なコンパイラでは
対応されていない．
このため，デバッグを容易にするためにebcvmでは
簡単なデバッガを実装している．
以下に主なebcvmのデバッガの機能を示す．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;continue - continue program&lt;/li&gt;
  &lt;li&gt;reg - show registers&lt;/li&gt;
  &lt;li&gt;examine - show memory&lt;/li&gt;
  &lt;li&gt;disassemble - disassemble memory&lt;/li&gt;
  &lt;li&gt;memmap - show memory map&lt;/li&gt;
  &lt;li&gt;backtrace - show backtrace&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ebcvmのテスト&quot;&gt;ebcvmのテスト&lt;/h3&gt;

&lt;p&gt;ebcvmはCで書かれているが，
できるだけ正確にEBCの動作を再現できるように
DecoderとExecutorについてはテストコードを書いている．
冪等性を確保した設計にし，テストを容易にすることが重要である．
初期の段階ではC++では一般的なGoogle Test[5]の導入も考えたが，
依存するライブラリはできるだけ少なくしたかったため，
Cでベタ書きしたテストケースと
&lt;code class=&quot;highlighter-rouge&quot;&gt;test.sh&lt;/code&gt;というテストを行うシェルスクリプトを置くことで
テストを行えるようにした．&lt;/p&gt;

&lt;p&gt;Decoderでは実装が405行に対してテストコードが2277行，
Executorでは実装が1221行に対してテストコードが8490行
となっている．&lt;/p&gt;

&lt;h2 id=&quot;elvmのebcバックエンド&quot;&gt;ELVMのEBCバックエンド&lt;/h2&gt;

&lt;p&gt;先のEBC解説記事でも言及したように，
EBCにはIntel C Compiler for EFI Byte Code[6]以外に
利用可能なコンパイラが存在しない．
そこで，自由なEBCの開発を行えるようにするため，
ELVMのEBCバックエンドを開発した．．
LEVMはShinichiro Hamaji(@shinh)さんによって開発された
EsoLangVM Compiler Infrastructureである．
ELVMでは内部で使われるELVM IR(EIR)の命令の種類が少ないため，
LLVMと比較して簡単にバックエンドを追加することができる．
ELVMのEBCバックエンドを追加することにより，
Cコンパイラである8cc[7]から出力されるEIRからEBCバイナリが生成可能となる．
これにより(バイナリが非効率などの問題があるにせよ)
自由なEBC向けCコンパイラを入手することができるようになる．&lt;/p&gt;

&lt;h3 id=&quot;デザイン&quot;&gt;デザイン&lt;/h3&gt;

&lt;p&gt;EBCバックエンドのデザインはx86-linuxバックエンドを参考にしている．
EBCバックエンドでは外部のEBCアセンブラを使わずに
直接PEバイナリを出力している．
EBCバックエンドでは，最初にEIR内部のprogram couner(pc)と
バイナリ内部でのアドレスの対応表&lt;code class=&quot;highlighter-rouge&quot;&gt;pc2addr&lt;/code&gt;を作成する．
これによって得られた値を元に各セクションのアドレス，サイズを決定し，
それらの値を埋め込んだPEヘッダを出力する．
次に&lt;code class=&quot;highlighter-rouge&quot;&gt;init_state_ebc&lt;/code&gt;が実行される．
ここでは主に&lt;code class=&quot;highlighter-rouge&quot;&gt;BootServices-&amp;gt;AllocatePool&lt;/code&gt;により
メモリ領域を確保し，その領域を初期化する．
EBCバックエンドでは&lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;.rodata&lt;/code&gt;の2つのセクションが作成される．
&lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt;には実際のEBCのコード，
&lt;code class=&quot;highlighter-rouge&quot;&gt;.rodata&lt;/code&gt;には&lt;code class=&quot;highlighter-rouge&quot;&gt;pc2addr&lt;/code&gt;の対応表が書き込まれる．
以上の流れでEBCバイナリが直接出力される．&lt;/p&gt;

&lt;p&gt;ELVMではA, B, C, D, BP, SPのレジスタが定義されている．
EBCではR0からR7までの64-bit幅のレジスタが用意されており，
このうちR0はスタックポインタとして予約されている．
そのため，EBCバックエンドではR1-R6をそれぞれA-SPに割り当てており，
残りのR7を自由なレジスタとして利用している．
実際の実装では，Native Code呼び出しなどで
R1, R2, R3などを利用せざるを得ない場合があり，
この場合はレジスタの値をスタックにPUSHしておくことで
実行に影響しないようにしている．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;[1] https://github.com/yabits/ebcvm&lt;/li&gt;
  &lt;li&gt;[2] https://github.com/retrage/elvm/tree/retrage/ebc-v2&lt;/li&gt;
  &lt;li&gt;[3] https://retrage.github.io/2018/11/11/efi-byte-code-myth.html&lt;/li&gt;
  &lt;li&gt;[4] https://github.com/tianocore/edk2/tree/master/MdeModulePkg/Universal/EbcDxe&lt;/li&gt;
  &lt;li&gt;[5] https://github.com/google/googletest&lt;/li&gt;
  &lt;li&gt;[6] https://software.intel.com/en-us/articles/intel-c-compiler-for-efi-byte-code-purchase&lt;/li&gt;
  &lt;li&gt;[7] https://github.com/rui314/8cc&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">この記事は 自作OS Advent Calendar 2018 の19日目の記事として書かれた． ここでは，フルスクラッチで開発したEFI Byte Code Virtual Machineである ebcvm[1]と開発したのELVMのEBCバックエンド[2]について紹介する．</summary></entry><entry><title type="html">EFI Byte Code解説</title><link href="/2018/11/11/efi-byte-code-myth.html" rel="alternate" type="text/html" title="EFI Byte Code解説" /><published>2018-11-11T22:30:22+09:00</published><updated>2018-11-11T22:30:22+09:00</updated><id>/2018/11/11/efi-byte-code-myth</id><content type="html" xml:base="/2018/11/11/efi-byte-code-myth.html">&lt;p&gt;本記事は2018年11月10日に開催されたkernelvm 北陸 Part4において
発表した内容[10]をまとめたものである．
ここではUEFIの持つ独自のbyte codeであるEFI Byte CodeとそのVMについてみていく．&lt;/p&gt;

&lt;h2 id=&quot;efi-byte-codeとは&quot;&gt;EFI Byte Codeとは&lt;/h2&gt;

&lt;p&gt;UEFI Specification v2.7によれば，
EFI Byte Code (EBC)について&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;platform- and processor-independent mechanisms for loading and executing EFI device drivers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とある．
つまり，OSなどのplatform非依存かつ，processor非依存な
EFI device driverを読み込み，実行するための仕組み，ということである．&lt;/p&gt;

&lt;p&gt;EBCはPCI Express (PCIe)のOptionROM (OROM)に利用されることが想定されて設計されている．
OROMはPCIeデバイスの内部に存在する記憶領域であり[8]，
UEFI向けのデバイスドライバなどが置かれている．
UEFIはOROMから実行ファイルを読み出し，メモリ上に配置して実行する．
このとき用いられる実行ファイルに含まれるコードは，native codeかEBCのいずれかである．
OROMのにあるUEFI向けデバイスドライバにEBCが利用される理由の一つとして，
複数のアーキテクチャへの対応が挙げられる．
しかし，実際にはx64マシンがほとんどであるためにEBCではなくx64 native codeの
UEFI device driverが内蔵されているという話もある．(未確認)&lt;/p&gt;

&lt;h2 id=&quot;ebc向けのドキュメントとツール&quot;&gt;EBC向けのドキュメントとツール&lt;/h2&gt;

&lt;p&gt;EBCはマイナーなため，EBCについての情報はあまり存在しない．
強いて挙げるとすれば，以下のものがある．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UEFI Specification[2]&lt;/li&gt;
  &lt;li&gt;TianoCore/EDK2 source code[3]&lt;/li&gt;
  &lt;li&gt;いくつかのブログ記事[4][5]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうち最も詳しいのがUEFI Specificationである．&lt;/p&gt;

&lt;p&gt;また，EBC関連のツールとしては以下のようなものがある．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intel C Compiler for EFI Byte Code[6]&lt;/li&gt;
  &lt;li&gt;fasmg-ebc[7]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intel C Compiler for EFI Byte Codeは$995で有料であるため，
簡単に入手することができない．(そもそも個人向けに販売しているのか怪しい)
fasmg-ebcはオープンソースなFlat Assembler (fasm)をベースにしたEBCのアセンブラである．
fasmg-ebcは部分的に後述するEBCからのnative codeの呼び出しに対応している．&lt;/p&gt;

&lt;p&gt;なお，一般的なGCC/ClangなどではEBC対応がなされていない．
また，EBCの逆アセンブラも存在しない．&lt;/p&gt;

&lt;h2 id=&quot;ebc-vmの構成&quot;&gt;EBC VMの構成&lt;/h2&gt;

&lt;p&gt;EBCのVMは64-bit little endianとなっている．
EBCのVMのレジスタの構成を以下に示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-registers.png&quot; alt=&quot;EBC VM Registers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IP (Instruction Pointer)，FLAGS，R0からR7までの
合計10の64-bit長のレジスタを持っている．
FLAGSは比較演算の結果の入るCフラグとsingle-stepを示すSフラグの2つがある．
汎用レジスタであるR0-R7では，
R0はスタックポインタを保持し，
R7は関数からの返り値が代入される．&lt;/p&gt;

&lt;h2 id=&quot;ebcのバイナリ形式と関数呼び出し規約&quot;&gt;EBCのバイナリ形式と関数呼び出し規約&lt;/h2&gt;

&lt;p&gt;EBCではWindowsやUEFIで利用されているPortable Executable (PE)のPE32+を採用している．
また，UEFI側が自由にメモリ上に配置できるように，relocatable imageなっている．
面白いことに，PEヘッダにあるFileHeader-&amp;gt;Machineは&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0ebc&lt;/code&gt;となっている．
以下のfasmg-ebcで作成したEBCバイナリのヘッダ情報を
自作のpeheader[9]の出力として以下に示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Machine: ebc
Number of Section: 2
Time Stamp: 1541744287
Size of Optional Header: 240
32-bit Architecture
This file is DLL.
PE+
AddressOfEntryPoint: 1000
ImageBase: 400000
SectionAlignment: 1000
FileAlignment: 200
SizeOfImage: 3000
SizeOfHeaders: 200
Section 0
	Name: .text
	VirtualSize: 1c
	VirtualAddress: 1000
	SizeOfRawData: 200
	PointerToRawData: 200
	PointerToRelocations: 0
	PointerToLinenumbers: 0
	NumberOfRelocations: 0
	NumberOfLinenumbers: 0
	Characteristics: 60000020 r-x exec
Section 1
	Name: .data
	VirtualSize: 26
	VirtualAddress: 2000
	SizeOfRawData: 200
	PointerToRawData: 400
	PointerToRelocations: 0
	PointerToLinenumbers: 0
	NumberOfRelocations: 0
	NumberOfLinenumbers: 0
	Characteristics: c0000040 rw- inited
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;EBCの関数呼び出し規約はCDECLを採用している．
これはx64 UEFIのnative codeではMicrosoft x64 Calling Conventionを
採用している点で大きく異なる．
&lt;code class=&quot;highlighter-rouge&quot;&gt;func(arg0, arg1, arg2)&lt;/code&gt;のような関数があった場合，
以下の図に示すように引数を逆順にスタックにプッシュし，
最後に呼び出し元のアドレスをプッシュして&lt;code class=&quot;highlighter-rouge&quot;&gt;func&lt;/code&gt;が実行される．
なお，スタックにプッシュされた引数については呼び出し元が責任を持つ．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-stack.png&quot; alt=&quot;EBC Stack Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一般にUEFIでは起動時に，UEFI本体より&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IN EFI_HANDLE ImageHandle,
IN EFI_SYSTEM_TABLE *SystemTable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;の2つの引数が渡される．
EBCのVMでも同様にこれらの値が渡されることとなっており，
VMの起動時にはあたかもNative codeから起動されたかのように
これらの引数と呼び出し元のアドレスがEBC上のスタックにプッシュされた状態になる．&lt;/p&gt;

&lt;h2 id=&quot;natural-indexing&quot;&gt;Natural Indexing&lt;/h2&gt;

&lt;p&gt;32-bitと64-bitの複数のアーキテクチャに対応するため，
EBCではNatural Indexingという仕組みを持っている．
これはあるアドレスに対するオフセットの値である符号付整数について，
アーキテクチャによって異なる値となるように設計されたオフセットの表し方である．
Natural Indexingは以下の図に示すようにエンコードされる．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-natural-indexing.png&quot; alt=&quot;EBC Natural Indexing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ここで，Nはエンコード後の値の長さ(16, 32, 64-bitのいずれか)である．
MSBであるN bit目&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;は符号を表し，0であれば正，1であれば負を表す．
次にN-1からN-3bitまで&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt;は後述する&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;の長さを表す．
ただし，&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt;はデコード時に&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A = w * N / 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;より&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;が計算される．
次にN-4から&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; bitまで&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;はConstant unitsを表し，
&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;-1から0 bitまで&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;はNatural unitsを表す．
以上で得られた&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;を用いて次のようにデコードされたオフセットが表される．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Offset = (c + n * sizeof(VOID *)) * b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ここで，&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof(VOID *)&lt;/code&gt;はアーキテクチャ依存であり，
32-bitであれば4となり，64-bitであれば8となる．&lt;/p&gt;

&lt;h2 id=&quot;natural-indexingの例&quot;&gt;Natural Indexingの例&lt;/h2&gt;

&lt;p&gt;では実際にエンコードされたNatural Indexを計算してみる．
値はUEFI Specificationに挙げられている例と同一である．
&lt;code class=&quot;highlighter-rouge&quot;&gt;0xa048&lt;/code&gt;という16-bitのIndexを考える．
これは2進数で表すを以下のようになる．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-natural-indexing-example.png&quot; alt=&quot;EBC Natural Indexing Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先の説明を当てはめると&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;N = 16
b = 1,
w = 2, A = 2 * 16 / 8 = 4
c = 4
n = 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;となる．
32-bit，64-bitそれぞれのアーキテクチャではデコードされた値は&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;32-bit: Offset = (4 + 8 * 4) * -1 = -36
64-bit: Offset = (4 + 8 * 8) * -1 = -68
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;となり，確かに同じNatural Indexでも異なる値にデコードされることがわかる．&lt;/p&gt;

&lt;h2 id=&quot;ebcの命令セット&quot;&gt;EBCの命令セット&lt;/h2&gt;

&lt;p&gt;EBCの命令セットは可変長なCISC-likeな命令となっている．
全体では56種類の命令が存在する．
以下にEBCの命令の一覧を示す．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BREAK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x00 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;JMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x01 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;JMP8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x02 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x03 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;RET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x04 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPeq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x05 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPlte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x06 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPgte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x07 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPulte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 0x08 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPugte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 0x09 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x0a */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NEG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x0b */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x0c */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SUB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x0d */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MUL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x0e */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MULU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x0f */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DIV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x10 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DIVU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x11 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x12 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x13 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x14 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;OR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* 0x15 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;XOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x16 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SHL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x17 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x18 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ASHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x19 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EXTNDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x1a */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EXTNDW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x1b */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EXTNDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x1c */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVbw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x1d */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVww&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x1e */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVdw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x1f */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVqw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x20 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVbd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x21 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x22 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x23 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVqd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x24 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVsnw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x25 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x26 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x27 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVqq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x28 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LOADSP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x29 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;STORESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 0x2a */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PUSH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x2b */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;POP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x2c */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPIeq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x2d */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPIlte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 0x2e */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPIgte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 0x2f */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPIulte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* 0x30 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPIugte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* 0x31 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVnw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x32 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x33 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x34 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PUSHn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x35 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;POPn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x36 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x37 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x38 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVREL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x39 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3a */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3b */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3c */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3d */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3e */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3f */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ebcの命令のoperand&quot;&gt;EBCの命令のOperand&lt;/h3&gt;

&lt;p&gt;EBCの命令は基本的に以下のような形式をとる．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSTRUCTION Operand1, Operand2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;各Operandは
Direct, Indirect, Indirect with Index，Immediate
の4種類の形式をとる．&lt;/p&gt;

&lt;p&gt;Directは&lt;code class=&quot;highlighter-rouge&quot;&gt;R2&lt;/code&gt;などと表し，Operandで指定されているレジスタの値を指す．
Indirectは&lt;code class=&quot;highlighter-rouge&quot;&gt;@R2&lt;/code&gt;などと表し，
Operandで指定されているレジスタの値のアドレスにあるメモリ上の値を指す．
Indirect with Indexでは
Operandで指定されているレジスタの値と
他にNatural Indexingによって指定されているオフセットの値を
足した値のアドレスにあるメモリ上の値を指す．
これは&lt;code class=&quot;highlighter-rouge&quot;&gt;@R1(+n, +c)&lt;/code&gt;の形式で表される．
Immediateは即値であり，指定された値そのままを指し，
&lt;code class=&quot;highlighter-rouge&quot;&gt;0x1234&lt;/code&gt;の形式で表される．&lt;/p&gt;

&lt;h3 id=&quot;ebc命令の例-xor&quot;&gt;EBC命令の例: XOR&lt;/h3&gt;

&lt;p&gt;EBCの命令&lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt;は以下の形式で表される．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XOR[32|64] {@}R1, {@}R2 {Index16|Immed16}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;XORは次のようにエンコードされる．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-xor-encoding.png&quot; alt=&quot;EBC XOR Encoding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Byte0-Bit7ではOperand2のImmediate/Indexの存在を表す．
もし1であればByte2からByte3には16-bitのImmediate/Indexの値が存在する．
Byte0-Bit6では操作が32/64-bitのどちらかであることを示す．
Byte0-Bit0からBit5はOpecodeを表し，&lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt;では&lt;code class=&quot;highlighter-rouge&quot;&gt;0x16&lt;/code&gt;となっている．
Byte1-Bit7ではOperand2がDirectとIndirectのどちらであることを示す．
Byte1-Bit4からBit6ではOperand2のレジスタを表す．
Byte1-Bit3ではOperand1がDirectとIndirectのどちらであることを示す．
Byte1-Bit0からBit2ではOperand1のレジスタを表す．&lt;/p&gt;

&lt;h2 id=&quot;native-codeの呼び出し&quot;&gt;Native codeの呼び出し&lt;/h2&gt;

&lt;p&gt;EBCには&lt;code class=&quot;highlighter-rouge&quot;&gt;CALL&lt;/code&gt;という命令があるが，
これはEBCの呼び出しとnative codeの呼び出し(&lt;code class=&quot;highlighter-rouge&quot;&gt;EXCALL&lt;/code&gt;)の2種類がサポートされている．
EBCは&lt;code class=&quot;highlighter-rouge&quot;&gt;EXCALL&lt;/code&gt;をサポートするための命令をいくつか持っている．
以下にその命令を列挙する．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MOVn, MOVIn, MOVsn, POPn, PUSHn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXCALL&lt;/code&gt;は各アーキテクチャ依存の処理を行うため，
あるいはUEFIの容易するランタイムを呼び出すために用いられる．&lt;/p&gt;

&lt;h2 id=&quot;ebc-vmの例外&quot;&gt;EBC VMの例外&lt;/h2&gt;

&lt;p&gt;EBCのVMはEBCを実行した場合に発生する例外をハンドルできる必要がある．
EBCの実行により発生する可能性のある例外を以下に示す．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Divide By 0
Debug Break
Invalid Opcode
Stack Fault
Alignment
Instruction Encoding
Bad Break
Undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;各例外の詳細はUEFI Specificationを参考にしてほしい．&lt;/p&gt;

&lt;p&gt;EBCのVMはEFI Debug Support Protocolをサポートする必要があり，
このProtocol経由でデバッガをVMにattachすることができる．
もしデバッガがattachされている場合，
例外はデバッガによって捕捉される．
もし，デバッガがattachされていない場合は以下のいずれかの動作となるが，
どの動作になるかは実装依存となっている．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;エラーメッセージを表示しシステムを停止&lt;/li&gt;
  &lt;li&gt;システムをハング&lt;/li&gt;
  &lt;li&gt;例外を無視し，処理を続行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ebcアセンブリの例&quot;&gt;EBCアセンブリの例&lt;/h2&gt;

&lt;p&gt;以下にfasmg-ebcよりEBCアセンブリによるHello, worldの例を示す．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;section '.text' code executable readable
EfiMain:
  MOVn   R1, @R0(EFI_MAIN_PARAMETERS.SystemTable)
  MOVn   R1, @R1(EFI_SYSTEM_TABLE.ConOut)
  MOVREL R2, Hello
  PUSHn  R2 ; Push Pointer to Hello
  PUSHn  R1 ; Push Pointer to SystemTable-&amp;gt;ConOut
  CALLEX @R1(SIMPLE_TEXT_OUTPUT_INTERFACE.OutputString)
  MOV R0, R0(+2,0)
  RET 

section '.data' data readable writeable
  Hello:    du &quot;Hello EBC World!&quot;, 0x0D, 0x0A, 0x00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;このアセンブリではエントリポイントは&lt;code class=&quot;highlighter-rouge&quot;&gt;EfiMain&lt;/code&gt;である．
最初にR0レジスタにあるスタックポインタの値から
SystemTableへのアドレスをR1に代入する．
次にR1の値からConOutへのアドレスのR1に代入する．
R2に文字列&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;へのアドレスを代入する．
次にこれらのR2，R1の順にレジスタの値をスタックにプッシュする．
これはSimple Text Output ProtocolのOutputStringの
引数，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IN EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *This,
IN CHAR16 *String
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;に相当する．
最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;CALLEX&lt;/code&gt;によりConOut-&amp;gt;OutputStringを呼び出している．&lt;/p&gt;

&lt;h2 id=&quot;ebcvm-ユーザ空間で動作するebc-vm&quot;&gt;ebcvm: ユーザ空間で動作するEBC VM&lt;/h2&gt;

&lt;p&gt;EBCの仕様の概要は以上のようなものとなっている．
EBCはUEFIの規格で定められているものの，
少なくともオープンソースで用いられている事例が全く存在しない．
また，EBCのVMはOVMFなどで実装されているが，
ユーザ空間で簡単に利用することが難しい．
そこで，UEFI SpecificationにあるEBCの仕様と
fasmg-ebcの生成するEBCバイナリのみを元にしてEBCのVMを作成することにした．
ebcvmのソースコードは以下GitHub上で公開している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/yabits/ebcvm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ebcvmは現在以下ものをサポートしている．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EBCの全ての命令&lt;/li&gt;
  &lt;li&gt;いくつかのnative code実行のエミュレーション&lt;/li&gt;
  &lt;li&gt;簡単なデバッガ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ebcvmの概観&quot;&gt;ebcvmの概観&lt;/h3&gt;

&lt;p&gt;ebcvmは以下の図のような構成となっている．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebcvm-architecture.png&quot; alt=&quot;ebcvm Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最初にVMが起動し，レジスタの初期化とメモリの初期化がなされる．
LoaderがEBCバイナリを読み込みメモリ上に展開する．
また，UEFIのランタイムもメモリ上に配置される．
初期化が完了すると，Decoderがバイトコードをデコードし，
Executorがデコードされた命令を実行する．
VMはEXCALLが発行されるとこれをトラップし，
EFI Native Codeに処理を渡す．
EFI Native CodeはエミュレートされてVMに処理が戻され，
処理が続行される．
VMはまた例外をトラップし，Simple debuggerがattachされていれば
これに処理を受け渡す．&lt;/p&gt;

&lt;h3 id=&quot;ebcvmの実行例&quot;&gt;ebcvmの実行例&lt;/h3&gt;

&lt;p&gt;先に示したEBCによるHello, worldの例のバイナリを
ebcvmにより実行した例を以下に示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./ebcvm sample/print.efi 
Hello EBC World!
exception ENCODE: MOV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;のエンコードで例外が発行されているものの，
確かに実行できていることがわかる．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;[1] https://uefi.org/&lt;/li&gt;
  &lt;li&gt;[2] https://uefi.org/specifications&lt;/li&gt;
  &lt;li&gt;[3] https://github.com/tianocore/edk2&lt;/li&gt;
  &lt;li&gt;[4] http://vzimmer.blogspot.com/2015/08/efi-byte-code.html&lt;/li&gt;
  &lt;li&gt;[5] https://habr.com/post/201954/&lt;/li&gt;
  &lt;li&gt;[6] https://software.intel.com/en-us/articles/intel-c-compiler-for-efi-byte-code-purchase/?_ga=2.177917472.440178022.1541746062-392223130.1541746062&lt;/li&gt;
  &lt;li&gt;[7] https://github.com/pbatard/fasmg-ebc&lt;/li&gt;
  &lt;li&gt;[8] http://opensecuritytraining.info/IntroBIOS_files/Day1_06_Advanced%20x86%20-%20BIOS%20and%20SMM%20Internals%20-%20PCI%20XROMs.pdf&lt;/li&gt;
  &lt;li&gt;[9] https://github.com/retrage/peheader&lt;/li&gt;
  &lt;li&gt;[10] https://speakerdeck.com/retrage/efi-byte-code-virtual-machine-for-fun-and-profit&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">本記事は2018年11月10日に開催されたkernelvm 北陸 Part4において 発表した内容[10]をまとめたものである． ここではUEFIの持つ独自のbyte codeであるEFI Byte CodeとそのVMについてみていく．</summary></entry><entry><title type="html">EFI stubなArch Linuxのインストール</title><link href="/2018/10/13/efi-stub-install.html" rel="alternate" type="text/html" title="EFI stubなArch Linuxのインストール" /><published>2018-10-13T00:20:31+09:00</published><updated>2018-10-13T00:20:31+09:00</updated><id>/2018/10/13/efi-stub-install</id><content type="html" xml:base="/2018/10/13/efi-stub-install.html">&lt;p&gt;QEMU上の仮想マシンにEFI stubなArch Linuxをインストールする。
ここでのホストはUbuntu 16.04.4 TLSとする。
なお[1][2][3][4]を参考にした。&lt;/p&gt;

&lt;h2 id=&quot;ovmfのダウンロードとarch-linuxのインストールディスクのダウンロード&quot;&gt;OVMFのダウンロードとArch Linuxのインストールディスクのダウンロード&lt;/h2&gt;

&lt;p&gt;最初にOVMFをダウンロードして解凍する。
OVMFはTianoCoreをベースにした仮想マシン向けのUEFI実装である。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://www.kraxel.org/repos/jenkins/edk2/edk2.git-ovmf-x64-0-20180508.84.g7cd8a57599.noarch.rpm
$ rpm2cpio edk2.git-ovmf-x64-0-20180508.84.g7cd8a57599.noarch.rpm | cpio -idmv
$ cp usr/share/edk2.git/ovmf-x64/OVMF_CODE-pure-efi.fd .
$ cp usr/share/edk2.git/ovmf-x64/OVMF_VARS-pure-efi.fd .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Arch Linuxのインストールディスクをダウンロードする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget http://ftp.jaist.ac.jp/pub/Linux/ArchLinux/iso/2018.05.01/archlinux-2018.05.01-x86_64.iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;インストール先のディスクイメージを作成する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ qemu-img create -f raw arch-amd64.img 32G
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;仮想マシンの起動と設定&quot;&gt;仮想マシンの起動と設定&lt;/h2&gt;

&lt;p&gt;インストールディスクから起動する。
これ以降は仮想マシンでの操作となる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ qemu-system-x86_64 -enable-kvm -k ja -m 2048 -localtime -drive if=pflash,format=raw,readonly,file=OVMF_CODE-pure-efi.fd -drive if=pflash,format=raw,file=OVMF_VARS-pure-efi.fd -hda arch-amd64.img -net nic,model=e1000 -net user -cdrom archlinux-2018.05.01-x86_64.iso -boot d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;キーボードレイアウトを設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# loadkeys jp106
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gdisk&lt;/code&gt;でパーティションを作成。
ここでは/dev/sda1を512MBのEFIパーティション、
/dev/sda2を残りのすべての容量としたLinuxパーティションとした。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# gdisk /dev/sda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command (? for help):o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command (? for help):n
Permission number: 1
First sector     : 
Last sector      : +512M
Hex code or GUID : ef00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command (? for help):n
Permission number: 2
First sector     : 
Last sector      :  
Hex code or GUID : 8300
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後に書き込みを行う。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command (? for help):w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;各パーティションをフォーマット&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# mkfs.vfat -F32 /dev/sda1
# mkfs.ext4 /dev/sda2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;それぞれをマウント。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# mount /dev/sda2
# mkdir -p /mnt/boot
# mount /dev/sda1 /mnt/boot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ダウンロードのミラーサイトを設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# nano /etc/pacman.d/mirrorlist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;システムのインストール。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pacstrap -i /mnt base base-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;fstabの生成。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# genfstab -U -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;localeの設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# locale-gen
# echo LANG=en_US.UTF-8 &amp;gt; /etc/locale.conf
# export LANG=en_US.UTF-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;キーボードマップの設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# echo KEYMAP=jp106 &amp;gt; /etc/vconsole.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;localtimeの設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# rm /etc/localtime
# ln -s /usr/share/zoneinfo/Asia/Tokyo /etc/localtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# hwclock -u -w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ホスト名の設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# echo &quot;arch-vm&quot; &amp;gt; /etc/hostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DHCPクライアントの設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# systemctl enable dhcpcd.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;パスワードの設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;GRUB2の代わりに&lt;code class=&quot;highlighter-rouge&quot;&gt;efibootmgr&lt;/code&gt;でEFI Variableを設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# efibootmgr -d /dev/sda -p 1 -c -L &quot;Arch Linux&quot; -l /vmlinuz-linux -u &quot;root=dev/sda2 rw initrd=initramfs-linux.img&quot;
# efibootmgr -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;exitしてhalt。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# exit
# halt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以下で正しく起動することを確認。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ qemu-system-x86_64 -enable-kvm -k ja -m 2048 -localtime -drive if=pflash,format=raw,readonly,file=OVMF_CODE-pure-efi.fd -drive if=pflash,format=raw,file=OVMF_VARS-pure-efi.fd -hda arch-amd64.img -net nic,model=e1000 -net user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;efi-stubなlinux-kernelのビルド&quot;&gt;EFI stubなLinux kernelのビルド&lt;/h2&gt;

&lt;p&gt;先の説明でインストールしたArch LinuxはEFI stubとなっている。
ここでは、ホストでLinux kernelをビルドしそれを仮想マシンにインストールしてみる。&lt;/p&gt;

&lt;h3 id=&quot;linuxカーネルのビルド&quot;&gt;Linuxカーネルのビルド&lt;/h3&gt;

&lt;p&gt;カーネルをダウンロードする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux.git --branch v4.17 --depth 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ホストのconfigをコピーして多少の修正を行い、ホスト上でビルドする。
&lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;CONFIG_EFI_STUB=y&lt;/code&gt;となっていることを確認する。
&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;するときのjob数はホストのCPUのコア数に応じて変更する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp /boot/config-4.15.0-33-generic .config
$ make menuconfig
$ make -j9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;linux-kernelの仮想マシンへのインストール&quot;&gt;Linux kernelの仮想マシンへのインストール&lt;/h3&gt;

&lt;p&gt;仮想マシンのディスクイメージをマウントする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# /sbin/kpartx -av arch-amd64.img
# mount /dev/mapper/loop0p2 /mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ホストでビルドしたカーネルを仮想マシンにインストールする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# make INSTALL_MOD_PATH=/mnt modules_install
# mkdir -p /mnt/var/tmp
# cp System.map /mnt/var/tmp
# cp arch/x86_64/boot/bzImage /mnt/var/tmp
# umount /mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後に仮想マシン上でホストでビルドしたbzImageとSystem.mapをコピーし、
initramfsを生成する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cp -f /var/tmp/bzImage /boot/vmlinuz-linux
# cp -f /var/tmp/System.map /boot/System.map
# mkinitcpio -c /etc/mkinitcpio.conf -g /boot/initramfs-linux.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後に再起動し、ビルドしたバージョンのカーネルであることを確認する。&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;[1] https://wiki.archlinux.org/index.php/Installation_guide&lt;/li&gt;
  &lt;li&gt;[2] https://wiki.archlinux.org/index.php/EFISTUB&lt;/li&gt;
  &lt;li&gt;[3] http://note.kurodigi.com/archlinux-uefi-install/&lt;/li&gt;
  &lt;li&gt;[4] https://kernhack.hatenablog.com/entry/2013/11/01/083558&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">QEMU上の仮想マシンにEFI stubなArch Linuxをインストールする。 ここでのホストはUbuntu 16.04.4 TLSとする。 なお[1][2][3][4]を参考にした。</summary></entry><entry><title type="html">技術書典5で「UEFI読本 基礎編 Linux編」を頒布</title><link href="/2018/10/01/efi-book-ad.html" rel="alternate" type="text/html" title="技術書典5で「UEFI読本 基礎編 Linux編」を頒布" /><published>2018-10-01T03:28:10+09:00</published><updated>2018-10-01T03:28:10+09:00</updated><id>/2018/10/01/efi-book-ad</id><content type="html" xml:base="/2018/10/01/efi-book-ad.html">&lt;p&gt;2018年10月8日に池袋サンシャインシティで開催される
技術書典5において「海洋軟件」として
「UEFI読本 基礎編 Linux編」を頒布する．
配置先は「お09」である．&lt;/p&gt;

&lt;h2 id=&quot;uefi読本-基礎編-linux編&quot;&gt;UEFI読本 基礎編 Linux編&lt;/h2&gt;

&lt;p&gt;以下，本書「はじめに」より抜粋．&lt;/p&gt;

&lt;p&gt;UEFIが2005年に登場してから10年以上が経過した。
現在のx86系CPUを搭載したコンピュータのほとんどが
UEFIに対応しており、かつOSも当然のように対応している。
しかし、UEFIやそこからの起動を解説をした文書は非常に少なく、
規格書かソースコードを読み解くしかなかった。
本書はそのような現状に応えるべく企画された。&lt;/p&gt;

&lt;p&gt;本書は「UEFI読本 基礎編 Linux編」というUEFIについての解説書である。
「基礎編」と「Linux編」の2部構成となっており、
「基礎編」ではUEFIでのOSの起動を知るためのUEFIの基礎について解説を行い、
「Linux編」ではLinux kernelのソースコードを実際に追跡してみていく。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://techbookfest.org/event/tbf05/circle/45190001&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">2018年10月8日に池袋サンシャインシティで開催される 技術書典5において「海洋軟件」として 「UEFI読本 基礎編 Linux編」を頒布する． 配置先は「お09」である．</summary></entry></feed>