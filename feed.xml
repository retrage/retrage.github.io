<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-05-23T14:55:53+09:00</updated><id>/feed.xml</id><title type="html">retrage.github.io</title><subtitle>Blog posts by @retrage01</subtitle><entry><title type="html">SMMとSTMについて</title><link href="/2019/05/23/smm-and-stm.html" rel="alternate" type="text/html" title="SMMとSTMについて" /><published>2019-05-23T14:55:34+09:00</published><updated>2019-05-23T14:55:34+09:00</updated><id>/2019/05/23/smm-and-stm</id><content type="html" xml:base="/2019/05/23/smm-and-stm.html">&lt;h1 id=&quot;smmとstmについて&quot;&gt;SMMとSTMについて&lt;/h1&gt;

&lt;p&gt;ここではx86のSystem Management Mode(SMM)についてと
SMI Transfer Monitor(STM)について解説する．&lt;/p&gt;

&lt;h2 id=&quot;system-management-mode&quot;&gt;System Management Mode&lt;/h2&gt;

&lt;h3 id=&quot;概要&quot;&gt;概要&lt;/h3&gt;

&lt;p&gt;ここでの話は
&lt;a href=&quot;http://opensecuritytraining.info/IntroBIOS.html&quot;&gt;Advanced x86: Introduction to BIOS &amp;amp; SMM&lt;/a&gt;
を元にしている．
SMMのセキュリティなどについて詳しく知りたい場合は
こちらの資料を参照したい．&lt;/p&gt;

&lt;p&gt;x86には16-bit real modeや32-bit protected mode，
64-bit long modeなど様々なモードが存在する．
System Management Mode(SMM)はそのようなモードの一つである．
次にx86のmodeの遷移図を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/amd64-mode-state.png&quot; alt=&quot;Operating Modes of the AMD64 Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ここで示されているように
プロセッサがどのモードであっても&lt;code class=&quot;highlighter-rouge&quot;&gt;SMI#&lt;/code&gt;によりSMMに移行できることがわかる．
また，後述するようにSMMは&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令により元のモードに復帰する．&lt;/p&gt;

&lt;p&gt;SMMはx86においてもっとも高い権限を持ったモードであり，
通常はOSにも透過的に動作する．
SMMにはSystem Management Interrupt(SMI)という
割り込みが発生することで移行する．
SMMは通常&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令によりSMMから復帰する．&lt;/p&gt;

&lt;p&gt;SMMはOSなどとは隔離された環境を用意し，
主に次のような用途で用いられる．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;電源やバッテリ管理&lt;/li&gt;
  &lt;li&gt;システムハードウェアの制御&lt;/li&gt;
  &lt;li&gt;proprietaryなコードの実行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;system-management-interrupt&quot;&gt;System Management Interrupt&lt;/h3&gt;

&lt;p&gt;SMMにはSMIを受け取ることで移行することは先に述べた．
SMIはプロセッサの&lt;code class=&quot;highlighter-rouge&quot;&gt;SMI#&lt;/code&gt;ピンかAPICバス経由で受け取る．
SMIは通常の割り込みのようにマスクすることができずNMIよりも優先度が高いとされる．
また通常の割り込みや例外処理とは独立した機構となっている．&lt;/p&gt;

&lt;p&gt;SMIを受け取りSMMに移行したプロセッサはSMRAMと呼ばれるメモリ領域に
移行前のプロセッサのコンテキストを保存してから処理を行う．
&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令によりSMMから抜けるとき，
保存していたプロセッサのコンテキストを復帰して元の状態に戻る．
なお，&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令はSMMのみで有効な命令でありSMMでないモードで実行すると
invalid opcode exceptionが発生する．&lt;/p&gt;

&lt;h3 id=&quot;smram&quot;&gt;SMRAM&lt;/h3&gt;

&lt;p&gt;SMRAMはSMMで使われるメモリ領域全体のことであり，
SMIハンドラのコードやデータ，
また前述のプロセッサのコンテキストが保存される．
SMRAMのベースアドレスはSMBASEと呼ばれる
CPU内部に存在するレジスタに保存されている．
コンテキストなどSMBASEからのあるオフセット位置に配置される．&lt;/p&gt;

&lt;p&gt;なお，SMMにより保存されるプロセッサのコンテキストにもSMBASEの値が含まれている．
これによりコンテキストのSMBASEの値を変えることで
SMRAMを再配置することも可能となっている．&lt;/p&gt;

&lt;p&gt;次にSMRAMの配置を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/smram-map.png&quot; alt=&quot;SMRAM Memory Map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SMIハンドラのentry pointは&lt;code class=&quot;highlighter-rouge&quot;&gt;SMBASE + 8000h&lt;/code&gt;と定められている．
64-bitの場合&lt;code class=&quot;highlighter-rouge&quot;&gt;SMBASE + 8000h + 7C00h&lt;/code&gt;以降にはプロセッサのコンテキストが配置される．
これら2つ以外の領域は空き領域としてSMMのコードが自由に使うことができる．&lt;/p&gt;

&lt;p&gt;SMRAMは4GBのメモリアドレス空間であればどこにでも配置することができる．
また，先に説明したようにプロセッサのコンテキストを書き換えることにより
SMRAMを再配置することができるため，SMRAMはシステム起動時に再配置されることが多い．&lt;/p&gt;

&lt;h2 id=&quot;smi-transfer-monitor&quot;&gt;SMI Transfer Monitor&lt;/h2&gt;

&lt;p&gt;SMMは以上で述べたような構成となっているが，
ここでVMXが加わると事情が変わってくる場合がある．
VMXが有効な場合，SMMは次の2つのモードを持つことができる&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Default Treatment&lt;/li&gt;
  &lt;li&gt;Dual-Monitor Treatment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般的に使われるモードはDefault Treatmentであるが，
ここではDual-Monitor Treatmentについてみていく．&lt;/p&gt;

&lt;p&gt;Dual-Monitor Treatmentの場合，
executive monitorと呼ばれる通常のVMMに加えて
SMM Transfer Monitor (STM)と呼ばれるVMMが必要となる．
STMはSMM内部で動作するVMMであり後述するように
通常のVMMではトラップできないSMIをトラップすることが可能である．
なお，STMと言った場合，ドキュメント上想定されるソフトウェアとしてのSTMと
実装としてのSTMの2通りが存在するが，ここでは前者のみを扱うことにする．&lt;/p&gt;

&lt;p&gt;次にDual-Monitor Treatmentの構成を示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/stm-architecture.png&quot; alt=&quot;STM Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;右下が通常のVMMであり右上がその上で動くVMである．
VMM VMはVMX non-root modeで動作し，
VMMはVMX root modeで動作する．
ここまでは通常のVMMど同様である．
Dual-Monitor Treatmentではこれらに加えて
STMとSMM VMが追加される．
STMはVMX root modeで動作し，
SMM VMはVMX non-root modeで動作する．
STMはSMM内部で完結しており
コードやデータはSMRAMに配置される．&lt;/p&gt;

&lt;p&gt;ここではVMM VMにおいてSMIが発生した場合の流れをみていく．
VMM VMにおいてSMIが発生すると
SMMに移行するが直接SMIハンドラが実行されるのではなく，
STMにトラップされる．
このとき，VMMで利用するVMCS (executive-VMCS)とは別に
SMI VMCSと呼ばれるコンテキストにVMの状態が保存される．
STMはSMM VMに対してVM Entryを行い，
(なお，ここでSMM VMはもともとExitされており，
SMM VMCSと呼ばれるSMM VMのためのVMCSを用いる)
トラップしたSMIに基づきSMM VM内部でSMIハンドラの処理を行う．
&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令によりSMM VMからVM Exitし
STMは先に保存しておいたSMI VMCSを用いてVM Entryを行う．&lt;/p&gt;

&lt;p&gt;STMの特徴的な点として挙げられるのは
VMMからVMCALLによりSTMを呼び出すことができる点である．
この場合もSMI VMCSによりコンテキストが保存されて，
VMMに戻る際にVM Entryによりコンテキストから状態を復帰させることとなる．&lt;/p&gt;

&lt;p&gt;通常のSMMとDual-Monitor treatmentの違いは
SMIはVM Exit扱いとなり，SMI VMCSを用いる点や
&lt;code class=&quot;highlighter-rouge&quot;&gt;RSM&lt;/code&gt;命令からSMMから復帰するのではなく
VM EntryによりSMMから復帰する点などが挙げられる．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amd.com/system/files/TechDocs/24593.pdf&quot;&gt;AMD64 Architecture Programmer’s Manual Volume 2: System Programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensecuritytraining.info/IntroBIOS_files/Day1_07_Advanced%20x86%20-%20BIOS%20and%20SMM%20Internals%20-%20SMM.pdf&quot;&gt;Advanced x86: BIOS and System Management Mode Internals System Management Mode (SMM)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensecuritytraining.info/IntroBIOS_files/Day1_08_Advanced%20x86%20-%20BIOS%20and%20SMM%20Internals%20-%20SMRAM.pdf&quot;&gt;Advanced x86: BIOS and System Management Mode Internals SMRAM (System Management RAM)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">SMMとSTMについて</summary></entry><entry><title type="html">正規表現からLLVM IRを生成する</title><link href="/2019/05/12/regex-to-llvm-ir.html" rel="alternate" type="text/html" title="正規表現からLLVM IRを生成する" /><published>2019-05-12T17:47:26+09:00</published><updated>2019-05-12T17:47:26+09:00</updated><id>/2019/05/12/regex-to-llvm-ir</id><content type="html" xml:base="/2019/05/12/regex-to-llvm-ir.html">&lt;h1 id=&quot;正規表現からllvm-irを生成する&quot;&gt;正規表現からLLVM IRを生成する&lt;/h1&gt;

&lt;p&gt;正規表現は文字列マッチングなどに広く用いられている形式言語であるが，
等価な決定性有限オートマトン(DFA)に変換できることが知られている．
&lt;a href=&quot;https://github.com/google/redgrep&quot;&gt;google/redgrep&lt;/a&gt;
は与えられた正規表現から等価なDFAに相当するネイティブコードを
LLVMにより生成する．
ここではredgrepを改造して
正規表現からどのようなLLVM IRが生成されるのかをみてみる．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;redll&lt;/code&gt;というツールを追加した．コードは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/retrage/redgrep/tree/retrage/redll&quot;&gt;https://github.com/retrage/redgrep/tree/retrage/redll&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;に置いてある．&lt;/p&gt;

&lt;h2 id=&quot;使い方&quot;&gt;使い方&lt;/h2&gt;

&lt;p&gt;最初にLLVMのソースコードをダウンロードして
ビルドしてローカルの適当な場所にインストールしておく．
redgrepは新しいLLVMを要求するのでLLVM 8.0.0あたりを入れておく．
redgrepのビルドが通るようにパスを通す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ export LLVM_CONFIG=/path/to/bin/llvm-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とかやってからredgrepをビルドする．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./redll &quot;regex&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;で遊べる．&lt;/p&gt;

&lt;h2 id=&quot;例-a&quot;&gt;例: “a”&lt;/h2&gt;

&lt;p&gt;試しに正規表現パターン”a”がどのようになるのかを以下に示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./redll &quot;a&quot;
; dfa is 3 states
; ModuleID = 'M'
source_filename = &quot;M&quot;
target datalayout = &quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;

; Function Attrs: norecurse nounwind readonly
define i1 @F(i8* nocapture readonly, i64) local_unnamed_addr #0 {
entry:
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %return_true, label %3

return_true:                                      ; preds = %3, %entry
  ret i1 false

; &amp;lt;label&amp;gt;:3:                                      ; preds = %entry
  %4 = load i8, i8* %0, align 1
  %cond = icmp eq i8 %4, 97
  br i1 %cond, label %5, label %return_true

; &amp;lt;label&amp;gt;:5:                                      ; preds = %3
  %6 = icmp eq i64 %1, 1
  ret i1 %6
}

attributes #0 = { norecurse nounwind readonly }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;という関数があり，
入力が0であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;を返し，
そうでなければ入力から1文字取り出し
&lt;code class=&quot;highlighter-rouge&quot;&gt;97&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;=&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;を返す，
というような状態機械になっていることがわかる．&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;他にも色々面白く遊べるはずなので試してほしい．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/google/redgrep&lt;/li&gt;
  &lt;li&gt;https://github.com/retrage/redgrep&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">正規表現からLLVM IRを生成する</summary></entry><entry><title type="html">技術書典6で新刊「UEFI読本 GRUB編」を頒布</title><link href="/2019/04/13/efi-book2-ad.html" rel="alternate" type="text/html" title="技術書典6で新刊「UEFI読本 GRUB編」を頒布" /><published>2019-04-13T12:18:33+09:00</published><updated>2019-04-13T12:18:33+09:00</updated><id>/2019/04/13/efi-book2-ad</id><content type="html" xml:base="/2019/04/13/efi-book2-ad.html">&lt;h1 id=&quot;技術書典6で新刊uefi読本-grub編を頒布&quot;&gt;技術書典6で新刊「UEFI読本 GRUB編」を頒布&lt;/h1&gt;

&lt;p&gt;2019年4月14日に池袋サンシャインシティで開催される
技術書典6において「海洋軟件」として
新刊「UEFI読本 GRUB編」を頒布する。
既刊「UEFI読本 基礎編 Linux編」も基礎編を分離し
「UEFI読本 Linux編」として頒布する。
配置先は「う27」である。&lt;/p&gt;

&lt;h2 id=&quot;uefi読本-grub編&quot;&gt;UEFI読本 GRUB編&lt;/h2&gt;

&lt;p&gt;以下、本書「はじめに」より抜粋。&lt;/p&gt;

&lt;p&gt;前回の技術書典5において頒布した「UEFI読本 基礎編 Linux編」（以下、「Linux編」）は
海洋軟件として初の同人誌であったにもかかわらず、
多くの方に読んでいただいたようでこの場で感謝申し上げたい。
「Linux編」ではEFI stubでの起動プロセスをソースコードレベルで追跡した。
しかし、多くのLinuxディストリビューションではGRUB bootloaderを利用することが多く、
一般的なLinux環境での起動プロセスをカバーできていなかった。
そこで本書ではUEFI環境でのGRUBの起動とLinuxの起動をみていく。
ただし、Linuxの起動そのものについては紙面の関係上ここでは対象外とする。&lt;/p&gt;

&lt;h2 id=&quot;uefi読本-linux編&quot;&gt;UEFI読本 Linux編&lt;/h2&gt;

&lt;p&gt;以下、本書「はじめに」より抜粋。&lt;/p&gt;

&lt;p&gt;UEFIが2005年に登場してから10年以上が経過した。
現在のx86系CPUを搭載したコンピュータのほとんどが
UEFIに対応しており、かつOSも当然のように対応している。
しかし、UEFIやそこからの起動を解説をした文書は非常に少なく、
規格書かソースコードを読み解くしかなかった。
本書はそのような現状に応えるべく企画された。&lt;/p&gt;

&lt;p&gt;本書は「UEFI読本 Linux編」というUEFIにおけるLinux kernelの起動についての解説書である。
「技術書典 5」において頒布した「UEFI読本 基礎編 Linux編」を元に
基礎編を分離させて修正を加えた。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://techbookfest.org/event/tbf06/circle/65580001&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">技術書典6で新刊「UEFI読本 GRUB編」を頒布</summary></entry><entry><title type="html">LinuxにおけるEFI Variableをみてみる</title><link href="/2018/12/20/linux-efivars.html" rel="alternate" type="text/html" title="LinuxにおけるEFI Variableをみてみる" /><published>2018-12-20T10:09:49+09:00</published><updated>2018-12-20T10:09:49+09:00</updated><id>/2018/12/20/linux-efivars</id><content type="html" xml:base="/2018/12/20/linux-efivars.html">&lt;h1 id=&quot;linuxにおけるefi-variableをみてみる&quot;&gt;LinuxにおけるEFI Variableをみてみる&lt;/h1&gt;

&lt;p&gt;この記事は
&lt;a href=&quot;https://qiita.com/advent-calendar/2018/linux&quot;&gt;Linux Advent Calendar 2018&lt;/a&gt;
の20日目の記事として書かれた．
ここではLinux kerenlにおけるEFI Variableのコードをみていく．&lt;/p&gt;

&lt;h2 id=&quot;efi-variableとは&quot;&gt;EFI Variableとは&lt;/h2&gt;

&lt;p&gt;UEFIでは，EFI varibale(EFI変数)というものが存在する．
これは不揮発性メモリ(NVRAM)に値が書き込まれるため，
電源を切っても値が失われることなく保存される．
EFI Variableは起動時の起動の順番などが保存される．&lt;/p&gt;

&lt;p&gt;UEFIにはEFI Variablesへの読み書きを行うための機能が
Runtime Servicesに存在する．
このため後述するように，OSの起動後もEFI Variableが
Runtime Servicesを通して利用可能となっている．
関連する関数は具体的には以下の4つである．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetVariables&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetNextVariablesName&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SetVariables&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QueryVairableInfo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;EFI Variableはkey-valueの形式になっており，
文字列keyを入力として，&lt;code class=&quot;highlighter-rouge&quot;&gt;GetVariables&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;SetVariables&lt;/code&gt;により
valueの読み/書きができる．
Valueを得るために必要なkeyは&lt;code class=&quot;highlighter-rouge&quot;&gt;GetNextVariableName&lt;/code&gt;
により得ることができる．
&lt;code class=&quot;highlighter-rouge&quot;&gt;QueryVairbaleInfo&lt;/code&gt;ではEFI Variable全体のについての情報を得ることができる．&lt;/p&gt;

&lt;h2 id=&quot;linux-kernelにおけるefi-variable&quot;&gt;Linux kernelにおけるEFI Variable&lt;/h2&gt;

&lt;p&gt;Linux kernelでは，EFI Variableは
擬似ファイルシステムとして表現され，
&lt;code class=&quot;highlighter-rouge&quot;&gt;/sys/firmware/efi/efivars&lt;/code&gt;にマウントされる．
(なお，過去には&lt;code class=&quot;highlighter-rouge&quot;&gt;sysfs&lt;/code&gt;経由でのサポートだったようだが，
&lt;code class=&quot;highlighter-rouge&quot;&gt;sysfs&lt;/code&gt;の制限のため，別実装となったようである)&lt;/p&gt;

&lt;p&gt;ここで実際の&lt;code class=&quot;highlighter-rouge&quot;&gt;efivars&lt;/code&gt;を例示してみる．&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /sys/firmware/efi/efivars
&lt;span class=&quot;c&quot;&gt;# snip&lt;/span&gt;
Boot0000-8be4df61-93ca-11d2-aa0d-00e098032b8c
Boot0001-8be4df61-93ca-11d2-aa0d-00e098032b8c
Boot0002-8be4df61-93ca-11d2-aa0d-00e098032b8c
Boot0003-8be4df61-93ca-11d2-aa0d-00e098032b8c
&lt;span class=&quot;c&quot;&gt;# snip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /sys/firmware/efi/efivars/Boot0000-8be4df61-93ca-11d2-aa0d-00e098032b8c
bubuntu??H??yC??Y??ä?4&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;FI&lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;BUNTU&lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;HIMX64.EFI?%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように，0000には現在起動しているUbuntuについてのパスが保存されていることがわかる．&lt;/p&gt;

&lt;h2 id=&quot;efivarsの実装&quot;&gt;efivarsの実装&lt;/h2&gt;

&lt;p&gt;ではここから実際にefivarsの実装をみていく．
トップダウンに&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;の実装から
どのようにEFI Variableがファイルにマップされるかを見て，
次にRuntime Servicesがどのように呼ばれるかを見ていく．
参照するLnux kernelはmainlineのv4.20-rc2(ccda4af0f4b92f7b4c308d3acc262f4a7e3affad)
である．&lt;/p&gt;

&lt;h3 id=&quot;efivarfsの初期化&quot;&gt;efivarfsの初期化&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;の実装は&lt;code class=&quot;highlighter-rouge&quot;&gt;fs/efivarfs/&lt;/code&gt;にある．
最初に&lt;code class=&quot;highlighter-rouge&quot;&gt;fs/efivarfs/super.c&lt;/code&gt;をみる．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivarfs_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EFI_RUNTIME_SERVICES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENODEV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_kobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENODEV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;register_filesystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Linux kernel初期化時に&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;の初期化が
&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_init&lt;/code&gt;により行われて&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;がマウントされる．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_system_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THIS_MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;efivarfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kill_sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_kill_sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;efivarfs_mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_system_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mount_single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_fill_super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;辿っていくと，&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_fill_super&lt;/code&gt;が
&lt;code class=&quot;highlighter-rouge&quot;&gt;mount_single&lt;/code&gt;により実行される．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivarfs_fill_super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;efivarfs_sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_maxbytes&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_LFS_FILESIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_blocksize&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PAGE_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_blocksize_bits&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PAGE_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_magic&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFIVARFS_MAGIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_op&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_d_op&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_d_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_time_gran&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_get_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFDIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENOMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_dir_inode_operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_make_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENOMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;INIT_LIST_HEAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__efivar_entry_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでファイルシステムの中身を作成している．
最初に&lt;code class=&quot;highlighter-rouge&quot;&gt;/sys/firmware/efi/efivar&lt;/code&gt;が作成され，
&lt;code class=&quot;highlighter-rouge&quot;&gt;efivar_init&lt;/code&gt;により&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_list&lt;/code&gt;に
EFI Variableのエントリが追加される．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * efivar_init - build the initial list of EFI variables
 * @func: callback function to invoke for every variable
 * @data: function-specific data to pass to @func
 * @atomic: do we need to execute the @func-loop atomically?
 * @duplicates: error if we encounter duplicates on @head?
 * @head: initialised head of variable list
 *
 * Get every EFI variable from the firmware and invoke @func. @func
 * should call efivar_entry_add() to build the list of variables.
 *
 * Returns 0 on success, or a kernel error code on failure.
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivar_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_char16_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_guid_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__efivars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;efi_char16_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_status_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_guid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vendor_guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_next_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vendor_guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_name_strnsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                   &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/*
             * Some firmware implementations return the
             * same variable name on multiple calls to
             * get_next_variable(). Terminate the loop
             * immediately as there is no guarantee that
             * we'll ever see a different variable name,
             * and may end up looping here forever.
             */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplicates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;variable_is_present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vendor_guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dup_variable_bug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vendor_guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_NOT_FOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vendor_guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;variable_name_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_NOT_FOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down_interruptible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;efivar_init&lt;/code&gt;では，
&lt;code class=&quot;highlighter-rouge&quot;&gt;ops-&amp;gt;get_next_variable&lt;/code&gt;により
実際にRuntimeServices-&amp;gt;GetNextVariableが呼ばれ，
EFI Variableが読み出される．
なお，コメントにあるように，いくつかのUEFI Firmwareの実装では
複数のGetNextVariableの呼び出しにより同じEFI Variableが得られてしまう
というバグがあるため，重複があった場合，&lt;code class=&quot;highlighter-rouge&quot;&gt;dup_variable_bug&lt;/code&gt;により
これを処理し，do-whileを抜けるようになっているようである．&lt;/p&gt;

&lt;p&gt;さて，問題がない場合は，引数として渡される&lt;code class=&quot;highlighter-rouge&quot;&gt;func&lt;/code&gt;を呼び出す．
これは&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_callback&lt;/code&gt;となっている．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivarfs_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_char16_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_guid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vendor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENOMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_removable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_get_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFREG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0644&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;is_removable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_alloc_dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IS_ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTR_ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;efivar_entry_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivarfs_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_callback&lt;/code&gt;では，
得られたEFI Variableに対応するファイルを作成して追加する．&lt;/p&gt;

&lt;p&gt;以上が&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;の初期化の流れとなっている．&lt;/p&gt;

&lt;h2 id=&quot;efivarfsのreadwrite&quot;&gt;efivarfsのread/write&lt;/h2&gt;

&lt;p&gt;次に&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs&lt;/code&gt;でのread/write時の動作をみてみる．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_operations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_file_operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simple_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_file_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_file_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llseek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no_llseek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlocked_ioctl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivarfs_file_ioctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;より，&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_file_read&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_file_write&lt;/code&gt;に集約されている．&lt;/p&gt;

&lt;h3 id=&quot;read時&quot;&gt;read時&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivarfs_file_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loff_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datasize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivar_entry_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__efivars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_status_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down_interruptible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VariableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VendorGuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_status_to_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように，
&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_file_read&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;efivar_entry_get&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get_variable&lt;/code&gt;
によりread時にRuntimeServices-&amp;gt;GetVariableを呼び出していることがわかる．&lt;/p&gt;

&lt;h3 id=&quot;write時&quot;&gt;write時&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivarfs_file_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loff_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry_set_get_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datasize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENOENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;drop_nlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d_delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;inode_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i_size_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;inode_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;efivar_entry_set_get_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efivar_operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__efivars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_char16_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VariableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_guid_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vendor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VendorGuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_status_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vendor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_status_to_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * Writing to the variable may have caused a change in size (which
     * could either be an append or an overwrite), or the variable to be
     * deleted. Perform a GetVariable() so we can tell what actually
     * happened.
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VariableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VendorGuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_NOT_FOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;efivar_entry_list_del_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efivars_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;write時も同様にして
&lt;code class=&quot;highlighter-rouge&quot;&gt;efivarfs_file_write&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;efivar_entry_set_get_size&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set_variable&lt;/code&gt;
により与えられたデータをEFI Variableとして書き込んでいる．
コメントにあるように，RuntimeServices-&amp;gt;GetVariableを実行し，
データの追加や上書き，削除のどれがなされたかを&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;により判定する．
&lt;code class=&quot;highlighter-rouge&quot;&gt;efivar_entry_set_get_size&lt;/code&gt;の返り値&lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt;により，
ファイルを削除するか，サイズを変更するなどの操作を行う．&lt;/p&gt;

&lt;h3 id=&quot;runtime-servicesの呼び出しに関するtips&quot;&gt;Runtime Servicesの呼び出しに関するTips&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_status_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;virt_efi_get_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_char16_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;efi_guid_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vendor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;efi_status_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down_interruptible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_runtime_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EFI_ABORTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;efi_queue_work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET_VARIABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vendor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;efi_runtime_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Linux kernelにおいて，
UEFI Runtime Servicesを呼び出す場合には，
&lt;code class=&quot;highlighter-rouge&quot;&gt;efi_runtime_lock&lt;/code&gt;セマフォをdownしてから
実行すべきUEFIサービスを&lt;code class=&quot;highlighter-rouge&quot;&gt;efi_queue_work&lt;/code&gt;キューに挿入して
実行させ，最後にセマフォをupさせている．
(例外もあり，nonblockingな呼び出しも存在する)&lt;/p&gt;

&lt;p&gt;OSを自作する際にも参考にしたい工夫である．&lt;/p&gt;</content><author><name></name></author><summary type="html">LinuxにおけるEFI Variableをみてみる</summary></entry><entry><title type="html">ebcvm: A Usermode EFI Byte Code Virtual Machine</title><link href="/2018/12/19/introduction-to-ebcvm.html" rel="alternate" type="text/html" title="ebcvm: A Usermode EFI Byte Code Virtual Machine" /><published>2018-12-19T00:00:00+09:00</published><updated>2018-12-19T00:00:00+09:00</updated><id>/2018/12/19/introduction-to-ebcvm</id><content type="html" xml:base="/2018/12/19/introduction-to-ebcvm.html">&lt;p&gt;この記事は
&lt;a href=&quot;https://adventar.org/calendars/2915&quot;&gt;自作OS Advent Calendar 2018&lt;/a&gt;
の19日目の記事として書かれた．
ここでは，フルスクラッチで開発したEFI Byte Code Virtual Machineである
ebcvm[1]と開発したのELVMのEBCバックエンド[2]について紹介する．&lt;/p&gt;

&lt;h2 id=&quot;efi-byte-codeについて&quot;&gt;EFI Byte Codeについて&lt;/h2&gt;

&lt;p&gt;すでにEFI Bye Codeを解説した記事を書いている[3]ため．
そちらを参考にしていただきたい．&lt;/p&gt;

&lt;h2 id=&quot;ebcvmの概要&quot;&gt;ebcvmの概要&lt;/h2&gt;

&lt;p&gt;ebcvmは*nix向けに開発したEFI Byte Code Virtual Machine実装である．
TianoCore/EDK2にはEBCのVMの実装が既に存在する[4]が，
ここではそちらの実装を使わずにUEFI Specificationとオンラインで公開されている
ごく少数の EBCバイナリを参考に実装を行なった．
ebcvmの開発のモチベーションとしては(ほとんど)規格書のみで実装できるか
ということに興味があったため，という側面が強い．&lt;/p&gt;

&lt;p&gt;ebcvmの概略図を以下に示す．
&lt;img src=&quot;/img/ebcvm-architecture.png&quot; alt=&quot;ebcvm-architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この図から分かるように，ebcvmは以下の部分で構成される．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Virtual Machine
    &lt;ul&gt;
      &lt;li&gt;Memory&lt;/li&gt;
      &lt;li&gt;Registers&lt;/li&gt;
      &lt;li&gt;Decoder&lt;/li&gt;
      &lt;li&gt;Executor&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;EFI Native Code Emulator&lt;/li&gt;
  &lt;li&gt;Loader&lt;/li&gt;
  &lt;li&gt;Debugger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ebcvmでは規格書に記載されている全ての命令が実装されている．&lt;/p&gt;

&lt;p&gt;EBCではほぼ全ての操作がVM内部で閉じている．
しかし，例外としてEFIのNative Codeの呼び出しが可能となっている．
(仕様上，EBCからNative, NativeからEBCどちらも可能となっている．)
このため，EBCからSystemTable以下にあるBootServicesやRuntimeServicesへの
アクセスが可能となっている．
特に，文字の入出力についてはConIn, ConOut, StdErrを使わざるを得ないので，
ebcvmでもNative Codeの呼び出しに対応する必要がある．
このため，EFIの用意するNative CodeのEmulationを行なっている．
現状，ebcvmでは以下のごく一部のNative Codeのみ対応している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BootServices-&amp;gt;AllocatePool&lt;/li&gt;
  &lt;li&gt;ConIn-&amp;gt;ReadKeyStroke&lt;/li&gt;
  &lt;li&gt;ConOut-&amp;gt;OutputString&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UEFIではFirmware側が動的にApplicationをメモリ上に配置できるように
UEFI Application/Driverはrelocatableなものとなっている．
EBCのバイナリでもこれは同様である．
そのため，ebcvmのローダもrelocationに対応しており，
&lt;code class=&quot;highlighter-rouge&quot;&gt;--reloc=1&lt;/code&gt;のオプションを実行時に渡すことで
relocationが行われるようになっている．&lt;/p&gt;

&lt;p&gt;EBCは現状GNU binutils, GCC, LLVM/Clangなど一般的なコンパイラでは
対応されていない．
このため，デバッグを容易にするためにebcvmでは
簡単なデバッガを実装している．
以下に主なebcvmのデバッガの機能を示す．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;continue - continue program&lt;/li&gt;
  &lt;li&gt;reg - show registers&lt;/li&gt;
  &lt;li&gt;examine - show memory&lt;/li&gt;
  &lt;li&gt;disassemble - disassemble memory&lt;/li&gt;
  &lt;li&gt;memmap - show memory map&lt;/li&gt;
  &lt;li&gt;backtrace - show backtrace&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ebcvmのテスト&quot;&gt;ebcvmのテスト&lt;/h3&gt;

&lt;p&gt;ebcvmはCで書かれているが，
できるだけ正確にEBCの動作を再現できるように
DecoderとExecutorについてはテストコードを書いている．
冪等性を確保した設計にし，テストを容易にすることが重要である．
初期の段階ではC++では一般的なGoogle Test[5]の導入も考えたが，
依存するライブラリはできるだけ少なくしたかったため，
Cでベタ書きしたテストケースと
&lt;code class=&quot;highlighter-rouge&quot;&gt;test.sh&lt;/code&gt;というテストを行うシェルスクリプトを置くことで
テストを行えるようにした．&lt;/p&gt;

&lt;p&gt;Decoderでは実装が405行に対してテストコードが2277行，
Executorでは実装が1221行に対してテストコードが8490行
となっている．&lt;/p&gt;

&lt;h2 id=&quot;elvmのebcバックエンド&quot;&gt;ELVMのEBCバックエンド&lt;/h2&gt;

&lt;p&gt;先のEBC解説記事でも言及したように，
EBCにはIntel C Compiler for EFI Byte Code[6]以外に
利用可能なコンパイラが存在しない．
そこで，自由なEBCの開発を行えるようにするため，
ELVMのEBCバックエンドを開発した．．
LEVMはShinichiro Hamaji(@shinh)さんによって開発された
EsoLangVM Compiler Infrastructureである．
ELVMでは内部で使われるELVM IR(EIR)の命令の種類が少ないため，
LLVMと比較して簡単にバックエンドを追加することができる．
ELVMのEBCバックエンドを追加することにより，
Cコンパイラである8cc[7]から出力されるEIRからEBCバイナリが生成可能となる．
これにより(バイナリが非効率などの問題があるにせよ)
自由なEBC向けCコンパイラを入手することができるようになる．&lt;/p&gt;

&lt;h3 id=&quot;デザイン&quot;&gt;デザイン&lt;/h3&gt;

&lt;p&gt;EBCバックエンドのデザインはx86-linuxバックエンドを参考にしている．
EBCバックエンドでは外部のEBCアセンブラを使わずに
直接PEバイナリを出力している．
EBCバックエンドでは，最初にEIR内部のprogram couner(pc)と
バイナリ内部でのアドレスの対応表&lt;code class=&quot;highlighter-rouge&quot;&gt;pc2addr&lt;/code&gt;を作成する．
これによって得られた値を元に各セクションのアドレス，サイズを決定し，
それらの値を埋め込んだPEヘッダを出力する．
次に&lt;code class=&quot;highlighter-rouge&quot;&gt;init_state_ebc&lt;/code&gt;が実行される．
ここでは主に&lt;code class=&quot;highlighter-rouge&quot;&gt;BootServices-&amp;gt;AllocatePool&lt;/code&gt;により
メモリ領域を確保し，その領域を初期化する．
EBCバックエンドでは&lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;.rodata&lt;/code&gt;の2つのセクションが作成される．
&lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt;には実際のEBCのコード，
&lt;code class=&quot;highlighter-rouge&quot;&gt;.rodata&lt;/code&gt;には&lt;code class=&quot;highlighter-rouge&quot;&gt;pc2addr&lt;/code&gt;の対応表が書き込まれる．
以上の流れでEBCバイナリが直接出力される．&lt;/p&gt;

&lt;p&gt;ELVMではA, B, C, D, BP, SPのレジスタが定義されている．
EBCではR0からR7までの64-bit幅のレジスタが用意されており，
このうちR0はスタックポインタとして予約されている．
そのため，EBCバックエンドではR1-R6をそれぞれA-SPに割り当てており，
残りのR7を自由なレジスタとして利用している．
実際の実装では，Native Code呼び出しなどで
R1, R2, R3などを利用せざるを得ない場合があり，
この場合はレジスタの値をスタックにPUSHしておくことで
実行に影響しないようにしている．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;[1] https://github.com/yabits/ebcvm&lt;/li&gt;
  &lt;li&gt;[2] https://github.com/retrage/elvm/tree/retrage/ebc-v2&lt;/li&gt;
  &lt;li&gt;[3] https://retrage.github.io/2018/11/11/efi-byte-code-myth.html&lt;/li&gt;
  &lt;li&gt;[4] https://github.com/tianocore/edk2/tree/master/MdeModulePkg/Universal/EbcDxe&lt;/li&gt;
  &lt;li&gt;[5] https://github.com/google/googletest&lt;/li&gt;
  &lt;li&gt;[6] https://software.intel.com/en-us/articles/intel-c-compiler-for-efi-byte-code-purchase&lt;/li&gt;
  &lt;li&gt;[7] https://github.com/rui314/8cc&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">この記事は 自作OS Advent Calendar 2018 の19日目の記事として書かれた． ここでは，フルスクラッチで開発したEFI Byte Code Virtual Machineである ebcvm[1]と開発したのELVMのEBCバックエンド[2]について紹介する．</summary></entry><entry><title type="html">EFI Byte Code解説</title><link href="/2018/11/11/efi-byte-code-myth.html" rel="alternate" type="text/html" title="EFI Byte Code解説" /><published>2018-11-11T22:30:22+09:00</published><updated>2018-11-11T22:30:22+09:00</updated><id>/2018/11/11/efi-byte-code-myth</id><content type="html" xml:base="/2018/11/11/efi-byte-code-myth.html">&lt;p&gt;本記事は2018年11月10日に開催されたkernelvm 北陸 Part4において
発表した内容[10]をまとめたものである．
ここではUEFIの持つ独自のbyte codeであるEFI Byte CodeとそのVMについてみていく．&lt;/p&gt;

&lt;h2 id=&quot;efi-byte-codeとは&quot;&gt;EFI Byte Codeとは&lt;/h2&gt;

&lt;p&gt;UEFI Specification v2.7によれば，
EFI Byte Code (EBC)について&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;platform- and processor-independent mechanisms for loading and executing EFI device drivers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とある．
つまり，OSなどのplatform非依存かつ，processor非依存な
EFI device driverを読み込み，実行するための仕組み，ということである．&lt;/p&gt;

&lt;p&gt;EBCはPCI Express (PCIe)のOptionROM (OROM)に利用されることが想定されて設計されている．
OROMはPCIeデバイスの内部に存在する記憶領域であり[8]，
UEFI向けのデバイスドライバなどが置かれている．
UEFIはOROMから実行ファイルを読み出し，メモリ上に配置して実行する．
このとき用いられる実行ファイルに含まれるコードは，native codeかEBCのいずれかである．
OROMのにあるUEFI向けデバイスドライバにEBCが利用される理由の一つとして，
複数のアーキテクチャへの対応が挙げられる．
しかし，実際にはx64マシンがほとんどであるためにEBCではなくx64 native codeの
UEFI device driverが内蔵されているという話もある．(未確認)&lt;/p&gt;

&lt;h2 id=&quot;ebc向けのドキュメントとツール&quot;&gt;EBC向けのドキュメントとツール&lt;/h2&gt;

&lt;p&gt;EBCはマイナーなため，EBCについての情報はあまり存在しない．
強いて挙げるとすれば，以下のものがある．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UEFI Specification[2]&lt;/li&gt;
  &lt;li&gt;TianoCore/EDK2 source code[3]&lt;/li&gt;
  &lt;li&gt;いくつかのブログ記事[4][5]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうち最も詳しいのがUEFI Specificationである．&lt;/p&gt;

&lt;p&gt;また，EBC関連のツールとしては以下のようなものがある．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intel C Compiler for EFI Byte Code[6]&lt;/li&gt;
  &lt;li&gt;fasmg-ebc[7]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intel C Compiler for EFI Byte Codeは$995で有料であるため，
簡単に入手することができない．(そもそも個人向けに販売しているのか怪しい)
fasmg-ebcはオープンソースなFlat Assembler (fasm)をベースにしたEBCのアセンブラである．
fasmg-ebcは部分的に後述するEBCからのnative codeの呼び出しに対応している．&lt;/p&gt;

&lt;p&gt;なお，一般的なGCC/ClangなどではEBC対応がなされていない．
また，EBCの逆アセンブラも存在しない．&lt;/p&gt;

&lt;h2 id=&quot;ebc-vmの構成&quot;&gt;EBC VMの構成&lt;/h2&gt;

&lt;p&gt;EBCのVMは64-bit little endianとなっている．
EBCのVMのレジスタの構成を以下に示す．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-registers.png&quot; alt=&quot;EBC VM Registers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IP (Instruction Pointer)，FLAGS，R0からR7までの
合計10の64-bit長のレジスタを持っている．
FLAGSは比較演算の結果の入るCフラグとsingle-stepを示すSフラグの2つがある．
汎用レジスタであるR0-R7では，
R0はスタックポインタを保持し，
R7は関数からの返り値が代入される．&lt;/p&gt;

&lt;h2 id=&quot;ebcのバイナリ形式と関数呼び出し規約&quot;&gt;EBCのバイナリ形式と関数呼び出し規約&lt;/h2&gt;

&lt;p&gt;EBCではWindowsやUEFIで利用されているPortable Executable (PE)のPE32+を採用している．
また，UEFI側が自由にメモリ上に配置できるように，relocatable imageなっている．
面白いことに，PEヘッダにあるFileHeader-&amp;gt;Machineは&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0ebc&lt;/code&gt;となっている．
以下のfasmg-ebcで作成したEBCバイナリのヘッダ情報を
自作のpeheader[9]の出力として以下に示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Machine: ebc
Number of Section: 2
Time Stamp: 1541744287
Size of Optional Header: 240
32-bit Architecture
This file is DLL.
PE+
AddressOfEntryPoint: 1000
ImageBase: 400000
SectionAlignment: 1000
FileAlignment: 200
SizeOfImage: 3000
SizeOfHeaders: 200
Section 0
	Name: .text
	VirtualSize: 1c
	VirtualAddress: 1000
	SizeOfRawData: 200
	PointerToRawData: 200
	PointerToRelocations: 0
	PointerToLinenumbers: 0
	NumberOfRelocations: 0
	NumberOfLinenumbers: 0
	Characteristics: 60000020 r-x exec
Section 1
	Name: .data
	VirtualSize: 26
	VirtualAddress: 2000
	SizeOfRawData: 200
	PointerToRawData: 400
	PointerToRelocations: 0
	PointerToLinenumbers: 0
	NumberOfRelocations: 0
	NumberOfLinenumbers: 0
	Characteristics: c0000040 rw- inited
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;EBCの関数呼び出し規約はCDECLを採用している．
これはx64 UEFIのnative codeではMicrosoft x64 Calling Conventionを
採用している点で大きく異なる．
&lt;code class=&quot;highlighter-rouge&quot;&gt;func(arg0, arg1, arg2)&lt;/code&gt;のような関数があった場合，
以下の図に示すように引数を逆順にスタックにプッシュし，
最後に呼び出し元のアドレスをプッシュして&lt;code class=&quot;highlighter-rouge&quot;&gt;func&lt;/code&gt;が実行される．
なお，スタックにプッシュされた引数については呼び出し元が責任を持つ．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-stack.png&quot; alt=&quot;EBC Stack Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一般にUEFIでは起動時に，UEFI本体より&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IN EFI_HANDLE ImageHandle,
IN EFI_SYSTEM_TABLE *SystemTable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;の2つの引数が渡される．
EBCのVMでも同様にこれらの値が渡されることとなっており，
VMの起動時にはあたかもNative codeから起動されたかのように
これらの引数と呼び出し元のアドレスがEBC上のスタックにプッシュされた状態になる．&lt;/p&gt;

&lt;h2 id=&quot;natural-indexing&quot;&gt;Natural Indexing&lt;/h2&gt;

&lt;p&gt;32-bitと64-bitの複数のアーキテクチャに対応するため，
EBCではNatural Indexingという仕組みを持っている．
これはあるアドレスに対するオフセットの値である符号付整数について，
アーキテクチャによって異なる値となるように設計されたオフセットの表し方である．
Natural Indexingは以下の図に示すようにエンコードされる．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-natural-indexing.png&quot; alt=&quot;EBC Natural Indexing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ここで，Nはエンコード後の値の長さ(16, 32, 64-bitのいずれか)である．
MSBであるN bit目&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;は符号を表し，0であれば正，1であれば負を表す．
次にN-1からN-3bitまで&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt;は後述する&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;の長さを表す．
ただし，&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt;はデコード時に&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A = w * N / 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;より&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;が計算される．
次にN-4から&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; bitまで&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;はConstant unitsを表し，
&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;-1から0 bitまで&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;はNatural unitsを表す．
以上で得られた&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;を用いて次のようにデコードされたオフセットが表される．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Offset = (c + n * sizeof(VOID *)) * b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ここで，&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof(VOID *)&lt;/code&gt;はアーキテクチャ依存であり，
32-bitであれば4となり，64-bitであれば8となる．&lt;/p&gt;

&lt;h2 id=&quot;natural-indexingの例&quot;&gt;Natural Indexingの例&lt;/h2&gt;

&lt;p&gt;では実際にエンコードされたNatural Indexを計算してみる．
値はUEFI Specificationに挙げられている例と同一である．
&lt;code class=&quot;highlighter-rouge&quot;&gt;0xa048&lt;/code&gt;という16-bitのIndexを考える．
これは2進数で表すを以下のようになる．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-natural-indexing-example.png&quot; alt=&quot;EBC Natural Indexing Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先の説明を当てはめると&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;N = 16
b = 1,
w = 2, A = 2 * 16 / 8 = 4
c = 4
n = 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;となる．
32-bit，64-bitそれぞれのアーキテクチャではデコードされた値は&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;32-bit: Offset = (4 + 8 * 4) * -1 = -36
64-bit: Offset = (4 + 8 * 8) * -1 = -68
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;となり，確かに同じNatural Indexでも異なる値にデコードされることがわかる．&lt;/p&gt;

&lt;h2 id=&quot;ebcの命令セット&quot;&gt;EBCの命令セット&lt;/h2&gt;

&lt;p&gt;EBCの命令セットは可変長なCISC-likeな命令となっている．
全体では56種類の命令が存在する．
以下にEBCの命令の一覧を示す．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BREAK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x00 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;JMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x01 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;JMP8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x02 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x03 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;RET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x04 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPeq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x05 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPlte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x06 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPgte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x07 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPulte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 0x08 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPugte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 0x09 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x0a */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NEG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x0b */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x0c */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SUB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x0d */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MUL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x0e */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MULU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x0f */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DIV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x10 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DIVU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x11 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x12 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x13 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x14 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;OR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/* 0x15 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;XOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x16 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SHL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x17 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x18 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ASHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x19 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EXTNDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x1a */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EXTNDW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x1b */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EXTNDD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x1c */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVbw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x1d */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVww&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x1e */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVdw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x1f */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVqw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x20 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVbd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x21 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x22 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x23 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVqd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x24 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVsnw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x25 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVsnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x26 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x27 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVqq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x28 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LOADSP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x29 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;STORESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 0x2a */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PUSH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x2b */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;POP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x2c */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPIeq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x2d */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPIlte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 0x2e */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPIgte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 0x2f */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPIulte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* 0x30 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CMPIugte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* 0x31 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVnw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x32 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x33 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x34 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PUSHn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x35 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;POPn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x36 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* 0x37 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* 0x38 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVREL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* 0x39 */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3a */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3b */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3c */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3d */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3e */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* 0x3f */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ebcの命令のoperand&quot;&gt;EBCの命令のOperand&lt;/h3&gt;

&lt;p&gt;EBCの命令は基本的に以下のような形式をとる．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSTRUCTION Operand1, Operand2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;各Operandは
Direct, Indirect, Indirect with Index，Immediate
の4種類の形式をとる．&lt;/p&gt;

&lt;p&gt;Directは&lt;code class=&quot;highlighter-rouge&quot;&gt;R2&lt;/code&gt;などと表し，Operandで指定されているレジスタの値を指す．
Indirectは&lt;code class=&quot;highlighter-rouge&quot;&gt;@R2&lt;/code&gt;などと表し，
Operandで指定されているレジスタの値のアドレスにあるメモリ上の値を指す．
Indirect with Indexでは
Operandで指定されているレジスタの値と
他にNatural Indexingによって指定されているオフセットの値を
足した値のアドレスにあるメモリ上の値を指す．
これは&lt;code class=&quot;highlighter-rouge&quot;&gt;@R1(+n, +c)&lt;/code&gt;の形式で表される．
Immediateは即値であり，指定された値そのままを指し，
&lt;code class=&quot;highlighter-rouge&quot;&gt;0x1234&lt;/code&gt;の形式で表される．&lt;/p&gt;

&lt;h3 id=&quot;ebc命令の例-xor&quot;&gt;EBC命令の例: XOR&lt;/h3&gt;

&lt;p&gt;EBCの命令&lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt;は以下の形式で表される．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XOR[32|64] {@}R1, {@}R2 {Index16|Immed16}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;XORは次のようにエンコードされる．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebc-xor-encoding.png&quot; alt=&quot;EBC XOR Encoding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Byte0-Bit7ではOperand2のImmediate/Indexの存在を表す．
もし1であればByte2からByte3には16-bitのImmediate/Indexの値が存在する．
Byte0-Bit6では操作が32/64-bitのどちらかであることを示す．
Byte0-Bit0からBit5はOpecodeを表し，&lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt;では&lt;code class=&quot;highlighter-rouge&quot;&gt;0x16&lt;/code&gt;となっている．
Byte1-Bit7ではOperand2がDirectとIndirectのどちらであることを示す．
Byte1-Bit4からBit6ではOperand2のレジスタを表す．
Byte1-Bit3ではOperand1がDirectとIndirectのどちらであることを示す．
Byte1-Bit0からBit2ではOperand1のレジスタを表す．&lt;/p&gt;

&lt;h2 id=&quot;native-codeの呼び出し&quot;&gt;Native codeの呼び出し&lt;/h2&gt;

&lt;p&gt;EBCには&lt;code class=&quot;highlighter-rouge&quot;&gt;CALL&lt;/code&gt;という命令があるが，
これはEBCの呼び出しとnative codeの呼び出し(&lt;code class=&quot;highlighter-rouge&quot;&gt;EXCALL&lt;/code&gt;)の2種類がサポートされている．
EBCは&lt;code class=&quot;highlighter-rouge&quot;&gt;EXCALL&lt;/code&gt;をサポートするための命令をいくつか持っている．
以下にその命令を列挙する．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MOVn, MOVIn, MOVsn, POPn, PUSHn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXCALL&lt;/code&gt;は各アーキテクチャ依存の処理を行うため，
あるいはUEFIの容易するランタイムを呼び出すために用いられる．&lt;/p&gt;

&lt;h2 id=&quot;ebc-vmの例外&quot;&gt;EBC VMの例外&lt;/h2&gt;

&lt;p&gt;EBCのVMはEBCを実行した場合に発生する例外をハンドルできる必要がある．
EBCの実行により発生する可能性のある例外を以下に示す．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Divide By 0
Debug Break
Invalid Opcode
Stack Fault
Alignment
Instruction Encoding
Bad Break
Undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;各例外の詳細はUEFI Specificationを参考にしてほしい．&lt;/p&gt;

&lt;p&gt;EBCのVMはEFI Debug Support Protocolをサポートする必要があり，
このProtocol経由でデバッガをVMにattachすることができる．
もしデバッガがattachされている場合，
例外はデバッガによって捕捉される．
もし，デバッガがattachされていない場合は以下のいずれかの動作となるが，
どの動作になるかは実装依存となっている．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;エラーメッセージを表示しシステムを停止&lt;/li&gt;
  &lt;li&gt;システムをハング&lt;/li&gt;
  &lt;li&gt;例外を無視し，処理を続行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ebcアセンブリの例&quot;&gt;EBCアセンブリの例&lt;/h2&gt;

&lt;p&gt;以下にfasmg-ebcよりEBCアセンブリによるHello, worldの例を示す．&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;section '.text' code executable readable
EfiMain:
  MOVn   R1, @R0(EFI_MAIN_PARAMETERS.SystemTable)
  MOVn   R1, @R1(EFI_SYSTEM_TABLE.ConOut)
  MOVREL R2, Hello
  PUSHn  R2 ; Push Pointer to Hello
  PUSHn  R1 ; Push Pointer to SystemTable-&amp;gt;ConOut
  CALLEX @R1(SIMPLE_TEXT_OUTPUT_INTERFACE.OutputString)
  MOV R0, R0(+2,0)
  RET 

section '.data' data readable writeable
  Hello:    du &quot;Hello EBC World!&quot;, 0x0D, 0x0A, 0x00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;このアセンブリではエントリポイントは&lt;code class=&quot;highlighter-rouge&quot;&gt;EfiMain&lt;/code&gt;である．
最初にR0レジスタにあるスタックポインタの値から
SystemTableへのアドレスをR1に代入する．
次にR1の値からConOutへのアドレスのR1に代入する．
R2に文字列&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;へのアドレスを代入する．
次にこれらのR2，R1の順にレジスタの値をスタックにプッシュする．
これはSimple Text Output ProtocolのOutputStringの
引数，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IN EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *This,
IN CHAR16 *String
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;に相当する．
最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;CALLEX&lt;/code&gt;によりConOut-&amp;gt;OutputStringを呼び出している．&lt;/p&gt;

&lt;h2 id=&quot;ebcvm-ユーザ空間で動作するebc-vm&quot;&gt;ebcvm: ユーザ空間で動作するEBC VM&lt;/h2&gt;

&lt;p&gt;EBCの仕様の概要は以上のようなものとなっている．
EBCはUEFIの規格で定められているものの，
少なくともオープンソースで用いられている事例が全く存在しない．
また，EBCのVMはOVMFなどで実装されているが，
ユーザ空間で簡単に利用することが難しい．
そこで，UEFI SpecificationにあるEBCの仕様と
fasmg-ebcの生成するEBCバイナリのみを元にしてEBCのVMを作成することにした．
ebcvmのソースコードは以下GitHub上で公開している．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/yabits/ebcvm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ebcvmは現在以下ものをサポートしている．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EBCの全ての命令&lt;/li&gt;
  &lt;li&gt;いくつかのnative code実行のエミュレーション&lt;/li&gt;
  &lt;li&gt;簡単なデバッガ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ebcvmの概観&quot;&gt;ebcvmの概観&lt;/h3&gt;

&lt;p&gt;ebcvmは以下の図のような構成となっている．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ebcvm-architecture.png&quot; alt=&quot;ebcvm Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最初にVMが起動し，レジスタの初期化とメモリの初期化がなされる．
LoaderがEBCバイナリを読み込みメモリ上に展開する．
また，UEFIのランタイムもメモリ上に配置される．
初期化が完了すると，Decoderがバイトコードをデコードし，
Executorがデコードされた命令を実行する．
VMはEXCALLが発行されるとこれをトラップし，
EFI Native Codeに処理を渡す．
EFI Native CodeはエミュレートされてVMに処理が戻され，
処理が続行される．
VMはまた例外をトラップし，Simple debuggerがattachされていれば
これに処理を受け渡す．&lt;/p&gt;

&lt;h3 id=&quot;ebcvmの実行例&quot;&gt;ebcvmの実行例&lt;/h3&gt;

&lt;p&gt;先に示したEBCによるHello, worldの例のバイナリを
ebcvmにより実行した例を以下に示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./ebcvm sample/print.efi 
Hello EBC World!
exception ENCODE: MOV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;のエンコードで例外が発行されているものの，
確かに実行できていることがわかる．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;[1] https://uefi.org/&lt;/li&gt;
  &lt;li&gt;[2] https://uefi.org/specifications&lt;/li&gt;
  &lt;li&gt;[3] https://github.com/tianocore/edk2&lt;/li&gt;
  &lt;li&gt;[4] http://vzimmer.blogspot.com/2015/08/efi-byte-code.html&lt;/li&gt;
  &lt;li&gt;[5] https://habr.com/post/201954/&lt;/li&gt;
  &lt;li&gt;[6] https://software.intel.com/en-us/articles/intel-c-compiler-for-efi-byte-code-purchase/?_ga=2.177917472.440178022.1541746062-392223130.1541746062&lt;/li&gt;
  &lt;li&gt;[7] https://github.com/pbatard/fasmg-ebc&lt;/li&gt;
  &lt;li&gt;[8] http://opensecuritytraining.info/IntroBIOS_files/Day1_06_Advanced%20x86%20-%20BIOS%20and%20SMM%20Internals%20-%20PCI%20XROMs.pdf&lt;/li&gt;
  &lt;li&gt;[9] https://github.com/retrage/peheader&lt;/li&gt;
  &lt;li&gt;[10] https://speakerdeck.com/retrage/efi-byte-code-virtual-machine-for-fun-and-profit&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">本記事は2018年11月10日に開催されたkernelvm 北陸 Part4において 発表した内容[10]をまとめたものである． ここではUEFIの持つ独自のbyte codeであるEFI Byte CodeとそのVMについてみていく．</summary></entry><entry><title type="html">EFI stubなArch Linuxのインストール</title><link href="/2018/10/13/efi-stub-install.html" rel="alternate" type="text/html" title="EFI stubなArch Linuxのインストール" /><published>2018-10-13T00:20:31+09:00</published><updated>2018-10-13T00:20:31+09:00</updated><id>/2018/10/13/efi-stub-install</id><content type="html" xml:base="/2018/10/13/efi-stub-install.html">&lt;p&gt;QEMU上の仮想マシンにEFI stubなArch Linuxをインストールする。
ここでのホストはUbuntu 16.04.4 TLSとする。
なお[1][2][3][4]を参考にした。&lt;/p&gt;

&lt;h2 id=&quot;ovmfのダウンロードとarch-linuxのインストールディスクのダウンロード&quot;&gt;OVMFのダウンロードとArch Linuxのインストールディスクのダウンロード&lt;/h2&gt;

&lt;p&gt;最初にOVMFをダウンロードして解凍する。
OVMFはTianoCoreをベースにした仮想マシン向けのUEFI実装である。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://www.kraxel.org/repos/jenkins/edk2/edk2.git-ovmf-x64-0-20180508.84.g7cd8a57599.noarch.rpm
$ rpm2cpio edk2.git-ovmf-x64-0-20180508.84.g7cd8a57599.noarch.rpm | cpio -idmv
$ cp usr/share/edk2.git/ovmf-x64/OVMF_CODE-pure-efi.fd .
$ cp usr/share/edk2.git/ovmf-x64/OVMF_VARS-pure-efi.fd .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Arch Linuxのインストールディスクをダウンロードする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget http://ftp.jaist.ac.jp/pub/Linux/ArchLinux/iso/2018.05.01/archlinux-2018.05.01-x86_64.iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;インストール先のディスクイメージを作成する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ qemu-img create -f raw arch-amd64.img 32G
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;仮想マシンの起動と設定&quot;&gt;仮想マシンの起動と設定&lt;/h2&gt;

&lt;p&gt;インストールディスクから起動する。
これ以降は仮想マシンでの操作となる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ qemu-system-x86_64 -enable-kvm -k ja -m 2048 -localtime -drive if=pflash,format=raw,readonly,file=OVMF_CODE-pure-efi.fd -drive if=pflash,format=raw,file=OVMF_VARS-pure-efi.fd -hda arch-amd64.img -net nic,model=e1000 -net user -cdrom archlinux-2018.05.01-x86_64.iso -boot d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;キーボードレイアウトを設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# loadkeys jp106
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gdisk&lt;/code&gt;でパーティションを作成。
ここでは/dev/sda1を512MBのEFIパーティション、
/dev/sda2を残りのすべての容量としたLinuxパーティションとした。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# gdisk /dev/sda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command (? for help):o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command (? for help):n
Permission number: 1
First sector     : 
Last sector      : +512M
Hex code or GUID : ef00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command (? for help):n
Permission number: 2
First sector     : 
Last sector      :  
Hex code or GUID : 8300
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後に書き込みを行う。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command (? for help):w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;各パーティションをフォーマット&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# mkfs.vfat -F32 /dev/sda1
# mkfs.ext4 /dev/sda2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;それぞれをマウント。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# mount /dev/sda2
# mkdir -p /mnt/boot
# mount /dev/sda1 /mnt/boot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ダウンロードのミラーサイトを設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# nano /etc/pacman.d/mirrorlist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;システムのインストール。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pacstrap -i /mnt base base-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;fstabの生成。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# genfstab -U -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;localeの設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# locale-gen
# echo LANG=en_US.UTF-8 &amp;gt; /etc/locale.conf
# export LANG=en_US.UTF-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;キーボードマップの設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# echo KEYMAP=jp106 &amp;gt; /etc/vconsole.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;localtimeの設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# rm /etc/localtime
# ln -s /usr/share/zoneinfo/Asia/Tokyo /etc/localtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# hwclock -u -w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ホスト名の設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# echo &quot;arch-vm&quot; &amp;gt; /etc/hostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DHCPクライアントの設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# systemctl enable dhcpcd.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;パスワードの設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;GRUB2の代わりに&lt;code class=&quot;highlighter-rouge&quot;&gt;efibootmgr&lt;/code&gt;でEFI Variableを設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# efibootmgr -d /dev/sda -p 1 -c -L &quot;Arch Linux&quot; -l /vmlinuz-linux -u &quot;root=dev/sda2 rw initrd=initramfs-linux.img&quot;
# efibootmgr -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;exitしてhalt。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# exit
# halt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以下で正しく起動することを確認。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ qemu-system-x86_64 -enable-kvm -k ja -m 2048 -localtime -drive if=pflash,format=raw,readonly,file=OVMF_CODE-pure-efi.fd -drive if=pflash,format=raw,file=OVMF_VARS-pure-efi.fd -hda arch-amd64.img -net nic,model=e1000 -net user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;efi-stubなlinux-kernelのビルド&quot;&gt;EFI stubなLinux kernelのビルド&lt;/h2&gt;

&lt;p&gt;先の説明でインストールしたArch LinuxはEFI stubとなっている。
ここでは、ホストでLinux kernelをビルドしそれを仮想マシンにインストールしてみる。&lt;/p&gt;

&lt;h3 id=&quot;linuxカーネルのビルド&quot;&gt;Linuxカーネルのビルド&lt;/h3&gt;

&lt;p&gt;カーネルをダウンロードする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux.git --branch v4.17 --depth 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ホストのconfigをコピーして多少の修正を行い、ホスト上でビルドする。
&lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;CONFIG_EFI_STUB=y&lt;/code&gt;となっていることを確認する。
&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;するときのjob数はホストのCPUのコア数に応じて変更する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp /boot/config-4.15.0-33-generic .config
$ make menuconfig
$ make -j9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;linux-kernelの仮想マシンへのインストール&quot;&gt;Linux kernelの仮想マシンへのインストール&lt;/h3&gt;

&lt;p&gt;仮想マシンのディスクイメージをマウントする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# /sbin/kpartx -av arch-amd64.img
# mount /dev/mapper/loop0p2 /mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ホストでビルドしたカーネルを仮想マシンにインストールする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# make INSTALL_MOD_PATH=/mnt modules_install
# mkdir -p /mnt/var/tmp
# cp System.map /mnt/var/tmp
# cp arch/x86_64/boot/bzImage /mnt/var/tmp
# umount /mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後に仮想マシン上でホストでビルドしたbzImageとSystem.mapをコピーし、
initramfsを生成する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cp -f /var/tmp/bzImage /boot/vmlinuz-linux
# cp -f /var/tmp/System.map /boot/System.map
# mkinitcpio -c /etc/mkinitcpio.conf -g /boot/initramfs-linux.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後に再起動し、ビルドしたバージョンのカーネルであることを確認する。&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;[1] https://wiki.archlinux.org/index.php/Installation_guide&lt;/li&gt;
  &lt;li&gt;[2] https://wiki.archlinux.org/index.php/EFISTUB&lt;/li&gt;
  &lt;li&gt;[3] http://note.kurodigi.com/archlinux-uefi-install/&lt;/li&gt;
  &lt;li&gt;[4] https://kernhack.hatenablog.com/entry/2013/11/01/083558&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">QEMU上の仮想マシンにEFI stubなArch Linuxをインストールする。 ここでのホストはUbuntu 16.04.4 TLSとする。 なお[1][2][3][4]を参考にした。</summary></entry><entry><title type="html">技術書典5で「UEFI読本 基礎編 Linux編」を頒布</title><link href="/2018/10/01/efi-book-ad.html" rel="alternate" type="text/html" title="技術書典5で「UEFI読本 基礎編 Linux編」を頒布" /><published>2018-10-01T03:28:10+09:00</published><updated>2018-10-01T03:28:10+09:00</updated><id>/2018/10/01/efi-book-ad</id><content type="html" xml:base="/2018/10/01/efi-book-ad.html">&lt;p&gt;2018年10月8日に池袋サンシャインシティで開催される
技術書典5において「海洋軟件」として
「UEFI読本 基礎編 Linux編」を頒布する．
配置先は「お09」である．&lt;/p&gt;

&lt;h2 id=&quot;uefi読本-基礎編-linux編&quot;&gt;UEFI読本 基礎編 Linux編&lt;/h2&gt;

&lt;p&gt;以下，本書「はじめに」より抜粋．&lt;/p&gt;

&lt;p&gt;UEFIが2005年に登場してから10年以上が経過した。
現在のx86系CPUを搭載したコンピュータのほとんどが
UEFIに対応しており、かつOSも当然のように対応している。
しかし、UEFIやそこからの起動を解説をした文書は非常に少なく、
規格書かソースコードを読み解くしかなかった。
本書はそのような現状に応えるべく企画された。&lt;/p&gt;

&lt;p&gt;本書は「UEFI読本 基礎編 Linux編」というUEFIについての解説書である。
「基礎編」と「Linux編」の2部構成となっており、
「基礎編」ではUEFIでのOSの起動を知るためのUEFIの基礎について解説を行い、
「Linux編」ではLinux kernelのソースコードを実際に追跡してみていく。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://techbookfest.org/event/tbf05/circle/45190001&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">2018年10月8日に池袋サンシャインシティで開催される 技術書典5において「海洋軟件」として 「UEFI読本 基礎編 Linux編」を頒布する． 配置先は「お09」である．</summary></entry><entry><title type="html">LKL.js: Running Linux Kernel on JavaScript *Directly*</title><link href="/2018/07/25/lkl-js-en.html" rel="alternate" type="text/html" title="LKL.js: Running Linux Kernel on JavaScript *Directly*" /><published>2018-07-25T20:29:00+09:00</published><updated>2018-07-25T20:29:00+09:00</updated><id>/2018/07/25/lkl-js-en</id><content type="html" xml:base="/2018/07/25/lkl-js-en.html">&lt;p&gt;I ported Linux kernel directly on JavaScript.
In other words, I translated the Linux kernel to JavaScript using Emscripten,
and Unlike JSLinux, it runs without emulators.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-js-architecture.png&quot; alt=&quot;LKL.js Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following is the working repository.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/retrage/linux/tree/retrage/em-v2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I published a demonstration site for LKL.js.
Please enable SharedArrayBuffer and try it out&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://retrage.github.io/lkl-js&quot;&gt;LKL.js Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also published slides about LKL.js.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://speakerdeck.com/retrage/lkl-dot-js-running-linux-kernel-on-javascript-star-directly-star&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux-kernel-library-lkl&quot;&gt;Linux Kernel Library (LKL)&lt;/h2&gt;

&lt;p&gt;We use Linux Kernel Library (LKL) which makes the Linux kernel an anykernel.
LKL is a fork of torvalds/linux.
It is designed to put LKL specific code only in
&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl&lt;/code&gt; and runs without modifications of other code.
By this design, it makes easy to follow the mainline. (Currently v4.16)
Since LKL is anykernel, it runs on user space of
various OS such as Linux, FreeBSD, and Windows etc.&lt;/p&gt;

&lt;h2 id=&quot;emscripten&quot;&gt;Emscripten&lt;/h2&gt;

&lt;p&gt;Emscripten is LLVM based C/C++ to 
JavaScript/WebAssembly transpiler.
It also provides a Unix-like environment to run translated software
on web browsers.&lt;/p&gt;

&lt;h2 id=&quot;can-we-port-lkl-to-javascript-with-emscripten&quot;&gt;Can we port LKL to JavaScript with Emscripten?&lt;/h2&gt;

&lt;p&gt;LKL runs on various OSes, Emscripten provides Unix-like
environment. So can LKL be ported to JavaScript with Emscripten?&lt;/p&gt;

&lt;h3 id=&quot;current-status-of-linux-kernel-build-with-clang&quot;&gt;Current Status of Linux Kernel Build with Clang&lt;/h3&gt;

&lt;p&gt;First of all, the Linux kernel is deeply dependent on 
gcc-extension, and there is a doubt that Clang can not compile it.
Once upon the time, there was LLVMLinux project that aims to compile
Linux kernel with Clang.
However, through the efforts of the Google Android team, two LTS (4.4 and 4.9)
can be built with Clang.
Now, LKL can be built with Clang.&lt;/p&gt;

&lt;h3 id=&quot;lkl-build-flow-101&quot;&gt;LKL Build Flow 101&lt;/h3&gt;

&lt;p&gt;Let’s look at the build flow of LKL.
First, when&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; tools/lkl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is performed, the build system determines which source code (*.c/*.S)
to be built from the Kconfig settings and compiles them.
Object files (*.o) generated by compiling are once archived by &lt;code class=&quot;highlighter-rouge&quot;&gt;ar&lt;/code&gt;
to &lt;code class=&quot;highlighter-rouge&quot;&gt;built-in.o&lt;/code&gt;.
Next, it links all &lt;code class=&quot;highlighter-rouge&quot;&gt;built-in.o&lt;/code&gt; files into &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt; at once.
For host side code, files under &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/lib&lt;/code&gt; compiled and linked
to &lt;code class=&quot;highlighter-rouge&quot;&gt;liblkl.o&lt;/code&gt;.
Finally, link all files (&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;liblkl.o&lt;/code&gt;) to &lt;code class=&quot;highlighter-rouge&quot;&gt;liblkl.so&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a simple build flow of LKL.&lt;/p&gt;

&lt;h2 id=&quot;porting-lkl-with-emscripten&quot;&gt;Porting LKL with Emscripten&lt;/h2&gt;

&lt;p&gt;Next, we will take a look at how to port LKL with Emscripten.&lt;/p&gt;

&lt;p&gt;Not limited to Emscripten, when using LLVM infrastructures,
the compiler compiles source to target with the following flow.&lt;/p&gt;

&lt;p&gt;Soruce -&amp;gt; LLVM IR -&amp;gt; Target&lt;/p&gt;

&lt;p&gt;In this way, the source is once converted to LLVM IR (*.bc/*.ll)
and then converted to the target.
In Emscripten, the “linking” is the conversion from LLVM IR to JavaScript.
Therefore, it is necessary to first convert all
(including libc etc. provided by Emscripten) to LLVM IR.&lt;/p&gt;

&lt;h3 id=&quot;generating-vmlinuxbc&quot;&gt;Generating vmlinux.bc&lt;/h3&gt;

&lt;p&gt;The build using &lt;code class=&quot;highlighter-rouge&quot;&gt;emcc&lt;/code&gt; (An Emscripten Clang wrapper) is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; tools/lkl &lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;AR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/ar.py&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The two important things here are &lt;code class=&quot;highlighter-rouge&quot;&gt;$FCFLAS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;.
I will explain each one.
(Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;C=&quot;$CC $CFLAGS&quot;&lt;/code&gt; is forced to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;$CFLAGS&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$CFLAGS&lt;/code&gt; is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s WASM=0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s ASYNCIFY=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s EMULATE_FUNCTION_POINTER_CASTS=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s USE_PTHREADS=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s PTHREAD_POOL_SIZE=4&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s TOTAL_MEMORY=1342177280&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The options are to pass to Emscripten.
Please refer to the Emscripten manual for details.&lt;/p&gt;

&lt;p&gt;Furthermore, the following definitions are specified.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DMAX_NR_ZONES=2&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DNR_PAGEFLAGS=20&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DSPINLOCK_SIZE=0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_GETLK64=12&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_SETLK64=13&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_SETLKW64=14&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These values are originally obtained by compiling an empty file
at the time of Linux kernel build. However, this time they can not be
obtained directly. Therefore, we have to specify these values
which come from when building with the x86_64 environment.&lt;/p&gt;

&lt;p&gt;Next, I will explain &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;. The following is a snippet of &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;objs&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.o&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;built-in&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As explained above, the build system of Linux kernel gathers object files
by &lt;code class=&quot;highlighter-rouge&quot;&gt;ar&lt;/code&gt; and links them to get &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To work with Emscripten we need to get &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt; as a LLVM bitcode.
LLVM has a linker called &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt; that links multiple LLVM bitcode files
to get one LLVM bitcode.
To generate &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;, we need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;,
but there is a problem.
&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt; can not take archive files as arguments like &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt;s.
Therefore, we have to record object files that are originally archived.
In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt; will record them as file paths in &lt;code class=&quot;highlighter-rouge&quot;&gt;objs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, Let’s look at the part of &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt; generation.
I added following scripts to &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts/link-vmlinux.sh&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;info CLEAN obj 
python &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/clean-obj.py&quot;&lt;/span&gt;

info GEN link-vmlinux.sh
python &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/link-vmlinux-gen.py&quot;&lt;/span&gt;

info LINK vmlinux
bash &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/link-vmlinux.sh&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clean-obj.py&lt;/code&gt; removes duplicated file paths from &lt;code class=&quot;highlighter-rouge&quot;&gt;objs&lt;/code&gt;
which is generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;link-vmlinux-gen.py&lt;/code&gt; generates &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux-link.sh&lt;/code&gt;
(not &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts/link-vmlinux.sh&lt;/code&gt;) which performs &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;.
By performing &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux-link.sh&lt;/code&gt;, we can get &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is the flow of generating &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;generating-bootjs&quot;&gt;Generating boot.js&lt;/h3&gt;

&lt;p&gt;Next, I will look at until JavaScript code is generated.
As explained above, since LKL is one of Library OS,
&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt; does not work on its own, it works only when it has
a part of an application. In this case, our target is &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/tests/boot&lt;/code&gt;
which is LKL’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello, world&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$LINK&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.bc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-in.o &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/lib/liblkl-in.o &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/lib/lkl.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, we have to link &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/lib/lkl.o&lt;/code&gt;),
host dependent part &lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/lib/liblkl-in.o&lt;/code&gt; and
applicatin part &lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/tests/boot-in.o&lt;/code&gt; and get &lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/tests/boot.bc&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.ll &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/dlmalloc.bc js/dlmalloc.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/libc.bc js/libc.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/pthreads.bc js/pthreads.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/dlmalloc.ll js/dlmalloc.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/libc.ll js/libc.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/pthreads.ll js/pthreads.bc
&lt;span class=&quot;nv&quot;&gt;$PY&lt;/span&gt; rename_symbols.py &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.ll &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-mod.ll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, it disassembles all LLVM bitcode files
(&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/tests/boot.bc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;libc.bc&lt;/code&gt; etc.)
using &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-dis&lt;/code&gt;.
Next, it applies &lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;boot.ll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is a reason for performing such operations.
This is because function names used in the Linux kernel conflict
with function names used in libcs.
In normal LKL, this conflict is avoided by using ELF linker tricks.
Meanwhile, since JavaScript generated by Emscripten does not
have a namespace, such collisions occur.
Therefore, by rewriting the functions names that would collide
with &lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt;, it can avoid collisions.&lt;/p&gt;

&lt;p&gt;In addition, &lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt; also performs operations such as
converting inline assemblies in Linux kernel to Emscripten
&lt;code class=&quot;highlighter-rouge&quot;&gt;emscripten_asm_const_int&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;From the &lt;code class=&quot;highlighter-rouge&quot;&gt;boot-mod.ll&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;EMCC_DEBUG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;$CC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/boot.html &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-mod.ll &lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;generate HTML and JavaScript files.&lt;/p&gt;

&lt;h2 id=&quot;adding-workarounds&quot;&gt;Adding Workarounds&lt;/h2&gt;

&lt;p&gt;Although we generated the Linux kernel translated in “completely”
JavaScript and the application &lt;code class=&quot;highlighter-rouge&quot;&gt;boot.js&lt;/code&gt;, it will not work as it is.
This is due to the fact that the architecture of computers and
JavaScript is very different. So we have to make some modifications.&lt;/p&gt;

&lt;h3 id=&quot;replacing-inline-assemblies&quot;&gt;Replacing inline assemblies&lt;/h3&gt;

&lt;p&gt;In the Linux kernel, the architecture-dependent code is basically placed
under &lt;code class=&quot;highlighter-rouge&quot;&gt;arch/$ARCH&lt;/code&gt;, and other code are architecture independent.
However, an empty inline assembly may be inserted so that optimization
by the compiler prevents meaningful code from being lost at compile time.
Here is an example, &lt;code class=&quot;highlighter-rouge&quot;&gt;set_normalized_timespec64&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/time/time.c&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_normalized_timespec64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/*
		 * The following asm() prevents the compiler from
		 * optimising this loop into a modulo operation. See
		 * also __iter_div_u64_rem() in include/linux/time.h
		 */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Such Inline assemblies cause a failure to convert from LLVM bitcode to
JavaScript. Therefore, we have to replace inline assemblies such as
&lt;code class=&quot;highlighter-rouge&quot;&gt;asm(&quot;&quot; : &quot;+rm&quot;(nsec))&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;emcsripten_asm_const_int&lt;/code&gt;
which calls JavaScript code from C defined in Emscripten.&lt;/p&gt;

&lt;h3 id=&quot;fix-early_param&quot;&gt;Fix early_param&lt;/h3&gt;

&lt;p&gt;In the Linux kernel, there is &lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;.
This is defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;include/linux/init.h&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obs_kernel_param&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define __setup_param(str, unique_id, fn, early)			\
	static const char __setup_str_##unique_id[] __initconst		\
		__aligned(1) = str; 					\
	static struct obs_kernel_param __setup_##unique_id		\
		__used __section(.init.setup)				\
		__attribute__((aligned((sizeof(long)))))		\
		= { __setup_str_##unique_id, fn, early }
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define early_param(str, fn)						\
	__setup_param(str, fn, fn, 1)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt; is a macro, taking &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt; as arguments,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;obs_kernel_param&lt;/code&gt; structure placed in &lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By referring to &lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl/kernel/vmlinux.ldS&lt;/code&gt; which is generated
in the build of LKL, we can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt; is arranged
between &lt;code class=&quot;highlighter-rouge&quot;&gt;__setup_start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__setup_end&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__setup_start = .; KEEP(*(.init.setup)) __setup_end = .;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These symbols will be used in &lt;code class=&quot;highlighter-rouge&quot;&gt;init/main.c&lt;/code&gt; as follows.
Here it compares one of boot parameter (&lt;code class=&quot;highlighter-rouge&quot;&gt;param&lt;/code&gt;) of Linux kernel
with &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;obs_kernel_param&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt;.
If it matches, it will execute &lt;code class=&quot;highlighter-rouge&quot;&gt;(*setup_func)(char*)&lt;/code&gt; with argument &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Check for early params. */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_early_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				 &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obs_kernel_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__setup_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__setup_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
		    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		     &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;earlycon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* We accept everything at this stage. */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In summary, &lt;code class=&quot;highlighter-rouge&quot;&gt;do_early_param&lt;/code&gt; executes &lt;code class=&quot;highlighter-rouge&quot;&gt;setup_func&lt;/code&gt; registered by
&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt; by referring boot parameters.&lt;/p&gt;

&lt;p&gt;However, since it uses ELF symbols, it does not work correctly
in JavaScript. For this reason, the function which will be called here
is hard coded.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_early_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				 &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* XXX: There is a lot of early_param, but hardcode in init/main.c */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_INIT_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;quiet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;loglevel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;earlycon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* debug */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* quiet */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quiet_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* loglevel */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loglevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unknown early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* We accept everything at this stage. */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;fix-initcall&quot;&gt;Fix initcall&lt;/h3&gt;

&lt;p&gt;Like &lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;initcall&lt;/code&gt; which are called in the initialization
manages functions using ELF symbols.
With JavaScript alone, we can not know which function should be called.
Therefore, we have to generate inticall tables from &lt;code class=&quot;highlighter-rouge&quot;&gt;System.map&lt;/code&gt;
generated by a normal build of LKL.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/* initcall{} */&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EM_ASM({&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blacklist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    /* _&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(); */&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    _&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;();&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;});&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above is the initcall table generation script.
We hard-code the code to &lt;code class=&quot;highlighter-rouge&quot;&gt;do_initcalls&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_ASM&lt;/code&gt; is an inline assembly that directly calls the JavaScript code
in C.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* XXX: initcalls are broken, so hardcode here */&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* initcall0 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EM_ASM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_net_ns_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* initcall1 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EM_ASM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_lkl_console_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_wq_sysfs_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_ksysfs_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;demonstration-and-the-results&quot;&gt;Demonstration and the Results&lt;/h2&gt;

&lt;p&gt;As described at the top, LKL.js uses pthread,
we have to enable SharedArrayBuffer.
Although every modern web browsers are shipped with SharedarrayBuffer,
it is disabled by default because of Spectre mitigation in Mozilla Firefox.
Therefore, please enable it before executing the demo.&lt;/p&gt;

&lt;p&gt;The following is the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;start_kernel&lt;/code&gt;.
We can see that it shows dmesg on browsers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [    0.000000] Linux version 4.16.0+ (akira@akira-Z270) () #13 Tue Jul 17 23:01:19 JST 2018
  [    0.000000] bootmem address range: 0x675000 - 0x1674000
  [    0.000000] On node 0 totalpages: 4095
  [    0.000000]   Normal zone: 36 pages used for memmap
  [    0.000000]   Normal zone: 0 pages reserved
  [    0.000000]   Normal zone: 4095 pages, LIFO batch:0
  [    0.000000] pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768
  [    0.000000] pcpu-alloc: [0] 0 
  [    0.000000] Built 1 zonelists, mobility grouping off.  Total pages: 4059
  [    0.000000] Kernel command line: mem=16M loglevel=8
  [    0.000000] Parameter  is obsolete, ignored
  [    0.000000] Parameter  is obsolete, ignored
  [    0.000000] Dentry cache hash table entries: 2048 (order: 1, 8192 bytes)
  [    0.000000] Inode-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.000000] Memory available: 16144k/16380k RAM
  [    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
  [    0.000000] NR_IRQS: 1024
  [    0.000000] lkl: irqs initialized
  [    0.000000] clocksource: lkl: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns
  [    0.000100] lkl: time and timers initialized (irq1)
  [    0.001100] pid_max: default: 4096 minimum: 301
  [    0.009400] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.009900] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.327100] console [lkl_console0] enabled
  [    0.329600] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
  [    0.329700] xor: automatically using best checksumming function   8regs     
  [    0.341199] NET: Registered protocol family 16
  [    0.388999] clocksource: Switched to clocksource lkl
  [    0.414100] NET: Registered protocol family 2
  [    0.437700] tcp_listen_portaddr_hash hash table entries: 512 (order: 0, 4096 bytes)
  [    0.438199] TCP established hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.439000] TCP bind hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.439600] TCP: Hash tables configured (established 1024 bind 1024)
  [    0.443200] UDP hash table entries: 256 (order: 0, 4096 bytes)
  [    0.444000] UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
  [    0.472100] workingset: timestamp_bits=30 max_order=12 bucket_order=0
  [    0.863100] SGI XFS with ACLs, security attributes, no debug enabled
  [    0.923700] jitterentropy: Initialization failed with host not compliant with requirements: 2
  [    0.924599] io scheduler noop registered
  [    0.924900] io scheduler deadline registered
  [    0.933099] io scheduler cfq registered (default)
  [    0.933500] io scheduler kyber registered
  [    1.633500] NET: Registered protocol family 10
  [    1.658400] Segment Routing with IPv6
  [    1.660800] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
  [    1.674200] ------------[ cut here ]------------
  [    1.675500] WARNING: CPU: 0 PID: 0 at arch/lkl/kernel/setup.c:188   (null)
  [    1.675899] Call Trace:
  [    1.676200] 
  [    1.676999] ---[ end trace 941dc55fe0966cff ]---
  [    1.684299] Warning: unable to open an initial console.
  [    1.685200] This architecture does not have kernel memory protection.
  pthread_join((pthread_t)tid, NULL): No such process
  lkl_start_kernel(&amp;amp;lkl_host_ops, &quot;mem=16M loglevel=8&quot;) = 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;From the above results, we confirmed that Linux kernel was booted
directly in JavaScript.
However, it just outputted dmesg and
it is not suitable for practical use at all.
This is because of the following problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It fails to create kernel threads.&lt;/li&gt;
  &lt;li&gt;It fails to mount rootfs.&lt;/li&gt;
  &lt;li&gt;It fails to execute init (PID 1).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, support for pthreads in Emscripten is not good.
We extracted semaphore, mutex, and thread from Little Kernel (LK)
and add them to LKL as green threads.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/retrage/linux/tree/retrage/fiber&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We plan to create LKL.js using this green threads.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;We created a Linux kernel fully translated in JavaScript using
LKL and Emscripten. It boots the Linux kernel and we confirmed
that it shows dmesg.
Although the architecture is greatly different between
computers and JavaScript, we found that it works somewhat by adding
some fixes and workarounds.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/lkl/linux&lt;/li&gt;
  &lt;li&gt;https://github.com/kripken/emscripten&lt;/li&gt;
  &lt;li&gt;https://llvm.org/&lt;/li&gt;
  &lt;li&gt;https://clang.llvm.org/&lt;/li&gt;
  &lt;li&gt;https://wiki.linuxfoundation.org/llvmlinux&lt;/li&gt;
  &lt;li&gt;https://lwn.net/Articles/734071/&lt;/li&gt;
  &lt;li&gt;http://llvm.org/docs/CommandGuide/llvm-link.html&lt;/li&gt;
  &lt;li&gt;https://0xax.gitbooks.io/linux-insides/Concepts/linux-cpu-3.html&lt;/li&gt;
  &lt;li&gt;https://github.com/littlekernel/lk&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I ported Linux kernel directly on JavaScript. In other words, I translated the Linux kernel to JavaScript using Emscripten, and Unlike JSLinux, it runs without emulators. The following is the working repository. https://github.com/retrage/linux/tree/retrage/em-v2 I published a demonstration site for LKL.js. Please enable SharedArrayBuffer and try it out LKL.js Demo I also published slides about LKL.js. https://speakerdeck.com/retrage/lkl-dot-js-running-linux-kernel-on-javascript-star-directly-star Linux Kernel Library (LKL) We use Linux Kernel Library (LKL) which makes the Linux kernel an anykernel. LKL is a fork of torvalds/linux. It is designed to put LKL specific code only in arch/lkl and runs without modifications of other code. By this design, it makes easy to follow the mainline. (Currently v4.16) Since LKL is anykernel, it runs on user space of various OS such as Linux, FreeBSD, and Windows etc. Emscripten Emscripten is LLVM based C/C++ to JavaScript/WebAssembly transpiler. It also provides a Unix-like environment to run translated software on web browsers. Can we port LKL to JavaScript with Emscripten? LKL runs on various OSes, Emscripten provides Unix-like environment. So can LKL be ported to JavaScript with Emscripten? Current Status of Linux Kernel Build with Clang First of all, the Linux kernel is deeply dependent on gcc-extension, and there is a doubt that Clang can not compile it. Once upon the time, there was LLVMLinux project that aims to compile Linux kernel with Clang. However, through the efforts of the Google Android team, two LTS (4.4 and 4.9) can be built with Clang. Now, LKL can be built with Clang. LKL Build Flow 101 Let’s look at the build flow of LKL. First, when $ make -C tools/lkl is performed, the build system determines which source code (*.c/*.S) to be built from the Kconfig settings and compiles them. Object files (*.o) generated by compiling are once archived by ar to built-in.o. Next, it links all built-in.o files into vmlinux at once. For host side code, files under tools/lkl/lib compiled and linked to liblkl.o. Finally, link all files (vmlinux and liblkl.o) to liblkl.so. This is a simple build flow of LKL. Porting LKL with Emscripten Next, we will take a look at how to port LKL with Emscripten. Not limited to Emscripten, when using LLVM infrastructures, the compiler compiles source to target with the following flow. Soruce -&amp;gt; LLVM IR -&amp;gt; Target In this way, the source is once converted to LLVM IR (*.bc/*.ll) and then converted to the target. In Emscripten, the “linking” is the conversion from LLVM IR to JavaScript. Therefore, it is necessary to first convert all (including libc etc. provided by Emscripten) to LLVM IR. Generating vmlinux.bc The build using emcc (An Emscripten Clang wrapper) is: make -C tools/lkl CC=&quot;$CC $CFLAGS&quot; AR=&quot;$PY $PWD/ar.py&quot; V=1 The two important things here are $FCFLAS and ar.py. I will explain each one. (Note that C=&quot;$CC $CFLAGS&quot; is forced to pass $CFLAGS) $CFLAGS is: CFLAGS=&quot;$CFLAGS -s WASM=0&quot; CFLAGS=&quot;$CFLAGS -s ASYNCIFY=1&quot; CFLAGS=&quot;$CFLAGS -s EMULATE_FUNCTION_POINTER_CASTS=1&quot; CFLAGS=&quot;$CFLAGS -s USE_PTHREADS=1&quot; CFLAGS=&quot;$CFLAGS -s PTHREAD_POOL_SIZE=4&quot; CFLAGS=&quot;$CFLAGS -s TOTAL_MEMORY=1342177280&quot; The options are to pass to Emscripten. Please refer to the Emscripten manual for details. Furthermore, the following definitions are specified. CFLAGS=&quot;$CFLAGS -DMAX_NR_ZONES=2&quot; CFLAGS=&quot;$CFLAGS -DNR_PAGEFLAGS=20&quot; CFLAGS=&quot;$CFLAGS -DSPINLOCK_SIZE=0&quot; CFLAGS=&quot;$CFLAGS -DF_GETLK64=12&quot; CFLAGS=&quot;$CFLAGS -DF_SETLK64=13&quot; CFLAGS=&quot;$CFLAGS -DF_SETLKW64=14&quot; These values are originally obtained by compiling an empty file at the time of Linux kernel build. However, this time they can not be obtained directly. Therefore, we have to specify these values which come from when building with the x86_64 environment. Next, I will explain ar.py. The following is a snippet of ar.py. filename = &quot;objs&quot; def main(): if not os.path.exists(filename): with open(filename, &quot;w&quot;) as fp: pass objs = [] for i, arg in enumerate(sys.argv): if &quot;.o&quot; in arg and not &quot;built-in&quot; in arg and i &amp;gt; 2: objs.append(arg) with open(filename, &quot;aw&quot;) as fp: for obj in objs: if not obj is &quot;&quot;: fp.write(obj + &quot; &quot;) return 0 As explained above, the build system of Linux kernel gathers object files by ar and links them to get vmlinux. To work with Emscripten we need to get vmlinux as a LLVM bitcode. LLVM has a linker called llvm-link that links multiple LLVM bitcode files to get one LLVM bitcode. To generate vmlinux.bc, we need to use llvm-link, but there is a problem. llvm-link can not take archive files as arguments like lds. Therefore, we have to record object files that are originally archived. In this case, ar.py will record them as file paths in objs. Next, Let’s look at the part of vmlinux.bc generation. I added following scripts to scripts/link-vmlinux.sh. info CLEAN obj python &quot;${srctree}/clean-obj.py&quot; info GEN link-vmlinux.sh python &quot;${srctree}/link-vmlinux-gen.py&quot; info LINK vmlinux bash &quot;${srctree}/link-vmlinux.sh&quot; clean-obj.py removes duplicated file paths from objs which is generated by ar.py. link-vmlinux-gen.py generates vmlinux-link.sh (not scripts/link-vmlinux.sh) which performs llvm-link. By performing vmlinux-link.sh, we can get vmlinux.bc. This is the flow of generating vmlinux.bc. Generating boot.js Next, I will look at until JavaScript code is generated. As explained above, since LKL is one of Library OS, vmlinux does not work on its own, it works only when it has a part of an application. In this case, our target is tools/lkl/tests/boot which is LKL’s Hello, world. $LINK -o $LKL/tests/boot.bc \ $LKL/tests/boot-in.o $LKL/lib/liblkl-in.o $LKL/lib/lkl.o First, we have to link vmlinux.bc ($LKL/lib/lkl.o), host dependent part $LKL/lib/liblkl-in.o and applicatin part $LKL/tests/boot-in.o and get $LKL/tests/boot.bc. $DIS -o $LKL/tests/boot.ll $LKL/tests/boot.bc $CP ~/.emscripten_cache/asmjs/dlmalloc.bc js/dlmalloc.bc $CP ~/.emscripten_cache/asmjs/libc.bc js/libc.bc $CP ~/.emscripten_cache/asmjs/pthreads.bc js/pthreads.bc $DIS -o js/dlmalloc.ll js/dlmalloc.bc $DIS -o js/libc.ll js/libc.bc $DIS -o js/pthreads.ll js/pthreads.bc $PY rename_symbols.py $LKL/tests/boot.ll $LKL/tests/boot-mod.ll First, it disassembles all LLVM bitcode files ($LKL/tests/boot.bc and libc.bc etc.) using llvm-dis. Next, it applies rename_symbols.py to boot.ll. There is a reason for performing such operations. This is because function names used in the Linux kernel conflict with function names used in libcs. In normal LKL, this conflict is avoided by using ELF linker tricks. Meanwhile, since JavaScript generated by Emscripten does not have a namespace, such collisions occur. Therefore, by rewriting the functions names that would collide with rename_symbols.py, it can avoid collisions. In addition, rename_symbols.py also performs operations such as converting inline assemblies in Linux kernel to Emscripten emscripten_asm_const_int. From the boot-mod.ll, EMCC_DEBUG=1 $CC -o js/boot.html $LKL/tests/boot-mod.ll $CFLAGS -v generate HTML and JavaScript files. Adding Workarounds Although we generated the Linux kernel translated in “completely” JavaScript and the application boot.js, it will not work as it is. This is due to the fact that the architecture of computers and JavaScript is very different. So we have to make some modifications. Replacing inline assemblies In the Linux kernel, the architecture-dependent code is basically placed under arch/$ARCH, and other code are architecture independent. However, an empty inline assembly may be inserted so that optimization by the compiler prevents meaningful code from being lost at compile time. Here is an example, set_normalized_timespec64 in kernel/time/time.c: void set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec) { while (nsec &amp;gt;= NSEC_PER_SEC) { /* * The following asm() prevents the compiler from * optimising this loop into a modulo operation. See * also __iter_div_u64_rem() in include/linux/time.h */ asm(&quot;&quot; : &quot;+rm&quot;(nsec)); nsec -= NSEC_PER_SEC; ++sec; } while (nsec &amp;lt; 0) { asm(&quot;&quot; : &quot;+rm&quot;(nsec)); nsec += NSEC_PER_SEC; --sec; } ts-&amp;gt;tv_sec = sec; ts-&amp;gt;tv_nsec = nsec; } Such Inline assemblies cause a failure to convert from LLVM bitcode to JavaScript. Therefore, we have to replace inline assemblies such as asm(&quot;&quot; : &quot;+rm&quot;(nsec)) with emcsripten_asm_const_int which calls JavaScript code from C defined in Emscripten. Fix early_param In the Linux kernel, there is early_param. This is defined in include/linux/init.h as follows: struct obs_kernel_param { const char *str; int (*setup_func)(char *); int early; }; /* snip */ #define __setup_param(str, unique_id, fn, early) \ static const char __setup_str_##unique_id[] __initconst \ __aligned(1) = str; \ static struct obs_kernel_param __setup_##unique_id \ __used __section(.init.setup) \ __attribute__((aligned((sizeof(long))))) \ = { __setup_str_##unique_id, fn, early } /* snip */ #define early_param(str, fn) \ __setup_param(str, fn, fn, 1) early_param is a macro, taking str and fn as arguments, and obs_kernel_param structure placed in .init.setup. By referring to arch/lkl/kernel/vmlinux.ldS which is generated in the build of LKL, we can see that .init.setup is arranged between __setup_start and __setup_end. __setup_start = .; KEEP(*(.init.setup)) __setup_end = .; These symbols will be used in init/main.c as follows. Here it compares one of boot parameter (param) of Linux kernel with str of obs_kernel_param in .init.setup. If it matches, it will execute (*setup_func)(char*) with argument val. /* Check for early params. */ static int __init do_early_param(char *param, char *val, const char *unused, void *arg) { const struct obs_kernel_param *p; for (p = __setup_start; p &amp;lt; __setup_end; p++) { if ((p-&amp;gt;early &amp;amp;&amp;amp; parameq(param, p-&amp;gt;str)) || (strcmp(param, &quot;console&quot;) == 0 &amp;amp;&amp;amp; strcmp(p-&amp;gt;str, &quot;earlycon&quot;) == 0) ) { if (p-&amp;gt;setup_func(val) != 0) pr_warn(&quot;Malformed early option '%s'\n&quot;, param); } } /* We accept everything at this stage. */ return 0; } In summary, do_early_param executes setup_func registered by early_param by referring boot parameters. However, since it uses ELF symbols, it does not work correctly in JavaScript. For this reason, the function which will be called here is hard coded. static int __init do_early_param(char *param, char *val, const char *unused, void *arg) { /* XXX: There is a lot of early_param, but hardcode in init/main.c */ const char *early_params[MAX_INIT_ARGS+2] = { &quot;debug&quot;, &quot;quiet&quot;, &quot;loglevel&quot;, NULL, }; int i; for (i = 0; early_params[i]; i++) { if (strcmp(param, early_params[i]) == 0 || (strcmp(param, &quot;console&quot;) == 0 &amp;amp;&amp;amp; strcmp(early_params[i], &quot;earlycon&quot;) == 0) ) { switch (i) { case 0: /* debug */ if (debug_kernel(val) != 0) pr_warn(&quot;Malformed early option '%s'\n&quot;, param); break; case 1: /* quiet */ if (quiet_kernel(val) != 0) pr_warn(&quot;Malformed early option '%s'\n&quot;, param); break; case 2: /* loglevel */ if (loglevel(val) != 0) pr_warn(&quot;Malformed early option '%s'\n&quot;, param); break; default: pr_warn(&quot;Unknown early option '%s'\n&quot;, param); } } } /* We accept everything at this stage. */ return 0; } Fix initcall Like early_param, initcall which are called in the initialization manages functions using ELF symbols. With JavaScript alone, we can not know which function should be called. Therefore, we have to generate inticall tables from System.map generated by a normal build of LKL. with open(sys.argv[1], &quot;r&quot;) as fp: for line in fp: if SIG in line: symbol = line[:-1].split(&quot; &quot;)[2] try: level = int(symbol[-1]) initcall = symbol[symbol.index(SIG)+len(SIG):len(symbol)-1] initcalls[level].append(initcall) except ValueError: pass for level, row in enumerate(initcalls): print(&quot;/* initcall{} */&quot;.format(level)) print(&quot;EM_ASM({&quot;) for initcall in row: if initcall in blacklist: print(&quot; /* _&quot;+initcall+&quot;(); */&quot;) else: print(&quot; _&quot;+initcall+&quot;();&quot;) print(&quot;});&quot;) The above is the initcall table generation script. We hard-code the code to do_initcalls. EM_ASM is an inline assembly that directly calls the JavaScript code in C. static void __init do_initcalls(void) { /* XXX: initcalls are broken, so hardcode here */ /* initcall0 */ EM_ASM({ _net_ns_init(); }); /* initcall1 */ EM_ASM({ _lkl_console_init(); _wq_sysfs_init(); _ksysfs_init(); /* snip */ }); } Demonstration and the Results As described at the top, LKL.js uses pthread, we have to enable SharedArrayBuffer. Although every modern web browsers are shipped with SharedarrayBuffer, it is disabled by default because of Spectre mitigation in Mozilla Firefox. Therefore, please enable it before executing the demo. The following is the result of start_kernel. We can see that it shows dmesg on browsers. [ 0.000000] Linux version 4.16.0+ (akira@akira-Z270) () #13 Tue Jul 17 23:01:19 JST 2018 [ 0.000000] bootmem address range: 0x675000 - 0x1674000 [ 0.000000] On node 0 totalpages: 4095 [ 0.000000] Normal zone: 36 pages used for memmap [ 0.000000] Normal zone: 0 pages reserved [ 0.000000] Normal zone: 4095 pages, LIFO batch:0 [ 0.000000] pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768 [ 0.000000] pcpu-alloc: [0] 0 [ 0.000000] Built 1 zonelists, mobility grouping off. Total pages: 4059 [ 0.000000] Kernel command line: mem=16M loglevel=8 [ 0.000000] Parameter is obsolete, ignored [ 0.000000] Parameter is obsolete, ignored [ 0.000000] Dentry cache hash table entries: 2048 (order: 1, 8192 bytes) [ 0.000000] Inode-cache hash table entries: 1024 (order: 0, 4096 bytes) [ 0.000000] Memory available: 16144k/16380k RAM [ 0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1 [ 0.000000] NR_IRQS: 1024 [ 0.000000] lkl: irqs initialized [ 0.000000] clocksource: lkl: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns [ 0.000100] lkl: time and timers initialized (irq1) [ 0.001100] pid_max: default: 4096 minimum: 301 [ 0.009400] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes) [ 0.009900] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes) [ 0.327100] console [lkl_console0] enabled [ 0.329600] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns [ 0.329700] xor: automatically using best checksumming function 8regs [ 0.341199] NET: Registered protocol family 16 [ 0.388999] clocksource: Switched to clocksource lkl [ 0.414100] NET: Registered protocol family 2 [ 0.437700] tcp_listen_portaddr_hash hash table entries: 512 (order: 0, 4096 bytes) [ 0.438199] TCP established hash table entries: 1024 (order: 0, 4096 bytes) [ 0.439000] TCP bind hash table entries: 1024 (order: 0, 4096 bytes) [ 0.439600] TCP: Hash tables configured (established 1024 bind 1024) [ 0.443200] UDP hash table entries: 256 (order: 0, 4096 bytes) [ 0.444000] UDP-Lite hash table entries: 256 (order: 0, 4096 bytes) [ 0.472100] workingset: timestamp_bits=30 max_order=12 bucket_order=0 [ 0.863100] SGI XFS with ACLs, security attributes, no debug enabled [ 0.923700] jitterentropy: Initialization failed with host not compliant with requirements: 2 [ 0.924599] io scheduler noop registered [ 0.924900] io scheduler deadline registered [ 0.933099] io scheduler cfq registered (default) [ 0.933500] io scheduler kyber registered [ 1.633500] NET: Registered protocol family 10 [ 1.658400] Segment Routing with IPv6 [ 1.660800] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver [ 1.674200] ------------[ cut here ]------------ [ 1.675500] WARNING: CPU: 0 PID: 0 at arch/lkl/kernel/setup.c:188 (null) [ 1.675899] Call Trace: [ 1.676200] [ 1.676999] ---[ end trace 941dc55fe0966cff ]--- [ 1.684299] Warning: unable to open an initial console. [ 1.685200] This architecture does not have kernel memory protection. pthread_join((pthread_t)tid, NULL): No such process lkl_start_kernel(&amp;amp;lkl_host_ops, &quot;mem=16M loglevel=8&quot;) = 0 Limitations From the above results, we confirmed that Linux kernel was booted directly in JavaScript. However, it just outputted dmesg and it is not suitable for practical use at all. This is because of the following problems: It fails to create kernel threads. It fails to mount rootfs. It fails to execute init (PID 1). Also, support for pthreads in Emscripten is not good. We extracted semaphore, mutex, and thread from Little Kernel (LK) and add them to LKL as green threads. https://github.com/retrage/linux/tree/retrage/fiber We plan to create LKL.js using this green threads. Summary We created a Linux kernel fully translated in JavaScript using LKL and Emscripten. It boots the Linux kernel and we confirmed that it shows dmesg. Although the architecture is greatly different between computers and JavaScript, we found that it works somewhat by adding some fixes and workarounds. Reference https://github.com/lkl/linux https://github.com/kripken/emscripten https://llvm.org/ https://clang.llvm.org/ https://wiki.linuxfoundation.org/llvmlinux https://lwn.net/Articles/734071/ http://llvm.org/docs/CommandGuide/llvm-link.html https://0xax.gitbooks.io/linux-insides/Concepts/linux-cpu-3.html https://github.com/littlekernel/lk</summary></entry><entry><title type="html">LKL.js: Linux kernelを直接JavaScript上で動かす</title><link href="/2018/07/21/lkl-js.html" rel="alternate" type="text/html" title="LKL.js: Linux kernelを直接JavaScript上で動かす" /><published>2018-07-21T15:30:00+09:00</published><updated>2018-07-21T15:30:00+09:00</updated><id>/2018/07/21/lkl-js</id><content type="html" xml:base="/2018/07/21/lkl-js.html">&lt;p&gt;Linux kernelを直接JavaScript上で動かした．
つまり，JSLinuxのようにEmulatorをJavaScriptで作成し，
その上でLinuxを動かすのではなく，
JavaScriptで書かれたLinuxを生成し，それを動かす，ということである．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/lkl-js-architecture.png&quot; alt=&quot;lkl.js Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;リポジトリは以下の通り．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/retrage/linux/tree/retrage/em-v2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお
&lt;a href=&quot;https://retrage.github.io/lkl-js/&quot;&gt;lkl.js Demo&lt;/a&gt;
にデモを用意した．
SharedArrayBufferを有効にして試してみてほしい．&lt;/p&gt;

&lt;h2 id=&quot;linux-kernel-library-lkl&quot;&gt;Linux Kernel Library (LKL)&lt;/h2&gt;

&lt;p&gt;ここでは，Linux kernelをLibrary OSの形態の1つであるAnykernelにする
Linux Kernel Library (LKL)を利用する．
LKLはLinux kernelのforkとして存在し，&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl&lt;/code&gt;にのみLKL specificな
コードをおき，その他は全く変更を加えずに動作するように設計されている．
これによりmainlineへの追従性を高めている．(現在はv4.16)
LKLはAnykernelであるので，
LinuxやFreeBSD, Windowsなど様々なOSのユーザ空間で動作する．&lt;/p&gt;

&lt;h2 id=&quot;emscripten&quot;&gt;Emscripten&lt;/h2&gt;

&lt;p&gt;EmscriptenはLLVMを利用したC/C++からJavaScript/WebAssemblyへのトランスパイラである．
Emscriptenはlibcやpthreadなどへも対応しており，Unix-likeな環境を用意している．&lt;/p&gt;

&lt;h2 id=&quot;lklをemscriptenでjavascriptに移植できるか&quot;&gt;LKLをEmscriptenでJavaScriptに移植できるか？&lt;/h2&gt;

&lt;p&gt;LKLは様々なOSで動作し，EmscriptenはUnix-likeな環境を用意する．
では，LKLはEmscriptenでJavaScriptに移植することはできるだろうか．&lt;/p&gt;

&lt;h2 id=&quot;移植する前に&quot;&gt;移植する前に&lt;/h2&gt;

&lt;h3 id=&quot;clangでのlinux-kernelのビルドの現状&quot;&gt;clangでのLinux kernelのビルドの現状&lt;/h3&gt;

&lt;p&gt;そもそもLinux kernelとは，gcc拡張に依存しており，
clangなどではそもそも扱えないのでは，という疑問がある．
かつてLLVM Linuxというプロジェクトが立ち上がるぐらいには
Linux kernelをclangでコンパイルするのは困難であった．
しかし，2017年頃より，Androidの開発者らにより，
Linux kernelがclangでもコンパイル可能となった．&lt;/p&gt;

&lt;h3 id=&quot;linux-kernelのビルドの流れ&quot;&gt;Linux kernelのビルドの流れ&lt;/h3&gt;

&lt;p&gt;Linux kernelのビルドの流れをみていく．
最初に，makeが行われると，kconfigの設定からビルドされるソースコード(&lt;em&gt;.c/&lt;/em&gt;.S)が決定され，
コンパイルが行われる．コンパイルにより生成されたオブジェクトファイル(*.o)は
一度機能ごとにarにより&lt;code class=&quot;highlighter-rouge&quot;&gt;built-in.o&lt;/code&gt;などの名前でアーカイブ化される．
最後に，まとめて得られた&lt;code class=&quot;highlighter-rouge&quot;&gt;built-in.o&lt;/code&gt;をリンクすることにより&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt;を得る．
以上がLinux kernelにおける簡単なビルドの流れとなっている．&lt;/p&gt;

&lt;h2 id=&quot;lklをemscriptenで移植&quot;&gt;LKLをEmscriptenで移植&lt;/h2&gt;

&lt;p&gt;では，実際にどのようにLKLをEmscriptenで移植していくのかをみていく．&lt;/p&gt;

&lt;p&gt;Emscriptenに限らず，LLVMを利用する場合，次のような流れでターゲットにコンパイルする．&lt;/p&gt;

&lt;p&gt;Source -&amp;gt; LLVM IR -&amp;gt; Target&lt;/p&gt;

&lt;p&gt;このように一度LLVM IR (&lt;em&gt;.bc/&lt;/em&gt;.ll)に変換してからターゲットに変換される．
なお，Emscriptenでは通常のリンクに当たる部分がLLVM IRからJavaScriptへの変換となっている．
このため，最初に全て(Emscriptenの用意するlibcなども含めて)をLLVM IRに変換する必要がある．&lt;/p&gt;

&lt;h3 id=&quot;vmliuxbcの生成&quot;&gt;vmliux.bcの生成&lt;/h3&gt;

&lt;p&gt;emcc (Emscripten clangのwrapper)でのビルドは次のようになっている&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; tools/lkl &lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;AR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/ar.py&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここで重要なのが&lt;code class=&quot;highlighter-rouge&quot;&gt;$CFLAGS&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;の2つである．それぞれみていく．
(なお，&lt;code class=&quot;highlighter-rouge&quot;&gt;CC=&quot;$CC $CFLAGS&quot;&lt;/code&gt;となっているのは無理やりCFLAGSを渡すためである)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$CFLAGS&lt;/code&gt;は次のようになっている．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s WASM=0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s ASYNCIFY=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s EMULATE_FUNCTION_POINTER_CASTS=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s USE_PTHREADS=1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s PTHREAD_POOL_SIZE=4&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -s TOTAL_MEMORY=1342177280&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここでは，Emscriptenに渡すオプションを指定している．
詳細についてはEmscriptenのマニュアルを参考にしてほしい．&lt;/p&gt;

&lt;p&gt;さらに以下のような定義を指定している．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DMAX_NR_ZONES=2&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DNR_PAGEFLAGS=20&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DSPINLOCK_SIZE=0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_GETLK64=12&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_SETLK64=13&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -DF_SETLKW64=14&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これらは本来Linux kernelビルド時に空のファイルをコンパイルするなど
して得られる値であり，今回の場合，これらは直接得ることができない．
そのため，あらかじめx86_64でビルドしたときに得られた値をここで指定している．&lt;/p&gt;

&lt;p&gt;次に&lt;code class=&quot;highlighter-rouge&quot;&gt;ar.py&lt;/code&gt;をみていく．以下のような簡単なものとなっている．&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;objs&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.o&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;built-in&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先に説明したように，本来Linux kernelでは
コンパイルによって得られたオブジェクトファイルを
&lt;code class=&quot;highlighter-rouge&quot;&gt;ar&lt;/code&gt;によりまとめ，最後にリンクを行うことで&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt;を得る．&lt;/p&gt;

&lt;p&gt;Emscriptenで扱うには&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt;をLLVM bitcodeとして得る必要がある．
LLVMには&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;という複数のLLVM bitcodeファイルをリンクして
1つのLLVM bitcodeを得るリンカが存在する．
&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;を得るには&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;を利用する必要があるが，
ここで1つ問題がある．&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;は通常のリンカのように，
アーカイブファイルを引数としてとることができない．
そのため，本来アーカイブにされるオブジェクトファイルを記録しておく必要がある．
ここでは，&lt;code class=&quot;highlighter-rouge&quot;&gt;objs&lt;/code&gt;にそれらをまとめてファイルパスとして記録しておく．&lt;/p&gt;

&lt;p&gt;次に実際に&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;が生成される部分をみていく．
&lt;code class=&quot;highlighter-rouge&quot;&gt;scripts/link-vmlinux.sh&lt;/code&gt;に次のような変更が加えられている．&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;info CLEAN obj 
python &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/clean-obj.py&quot;&lt;/span&gt;

info GEN link-vmlinux.sh
python &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/link-vmlinux-gen.py&quot;&lt;/span&gt;

info LINK vmlinux
bash &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srctree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/link-vmlinux.sh&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clean-obj.py&lt;/code&gt;では先に得られた&lt;code class=&quot;highlighter-rouge&quot;&gt;objs&lt;/code&gt;より重複するファイルパスを削除する．
次に&lt;code class=&quot;highlighter-rouge&quot;&gt;link-vmlinux-gen.py&lt;/code&gt;では&lt;code class=&quot;highlighter-rouge&quot;&gt;objs&lt;/code&gt;より&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-link&lt;/code&gt;を行う
&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux-link.sh&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;scripts/link-vmlinux.sh&lt;/code&gt;とは異なる)を生成する．
最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;link-vmlinux.sh&lt;/code&gt;を実行し，&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;を得る．&lt;/p&gt;

&lt;p&gt;以上が&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt;を得るまでの流れとなっている．&lt;/p&gt;

&lt;h3 id=&quot;bootjsの生成&quot;&gt;boot.jsの生成&lt;/h3&gt;

&lt;p&gt;次に実際にJavaScriptが生成されるまでをみていく．
先に説明したとおり，LKLはLibray OSの1つであるので，&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt;それ単体では動作せず，
アプリケーションとなる部分があってはじめて動作する．ここでは，LKLのHello, worldに相当する
&lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lkl/tests/boot&lt;/code&gt;をターゲットとする．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$LINK&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.bc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-in.o &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/lib/liblkl-in.o &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/lib/lkl.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;まず，先に生成した&lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux.bc&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/lib/lkl.o&lt;/code&gt;)と
ホスト依存部分&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/lib/liblkl-in.o&lt;/code&gt;，
アプリケーション部分&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/tests/boot-in.o&lt;/code&gt;をリンクして&lt;code class=&quot;highlighter-rouge&quot;&gt;$LKL/tests/boot.bc&lt;/code&gt;を得る．&lt;/p&gt;

&lt;p&gt;次に以下のようなことを行う．&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.ll &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/dlmalloc.bc js/dlmalloc.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/libc.bc js/libc.bc
&lt;span class=&quot;nv&quot;&gt;$CP&lt;/span&gt; ~/.emscripten_cache/asmjs/pthreads.bc js/pthreads.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/dlmalloc.ll js/dlmalloc.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/libc.ll js/libc.bc
&lt;span class=&quot;nv&quot;&gt;$DIS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/pthreads.ll js/pthreads.bc
&lt;span class=&quot;nv&quot;&gt;$PY&lt;/span&gt; rename_symbols.py &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot.ll &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-mod.ll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最初に&lt;code class=&quot;highlighter-rouge&quot;&gt;boot.bc&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-dis&lt;/code&gt;を用いてLLVM bitcodeからLLVM IRへ変換する．
次にEmscriptenの&lt;code class=&quot;highlighter-rouge&quot;&gt;dlmalloc.bc&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;libc.bc&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;pthreads.bc&lt;/code&gt;などのファイルを
LLVM IRへと変換する．
最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;boot.ll&lt;/code&gt;に対して実行する．
このようなことを行うのには理由がある．
それは，Linux kernelで利用されている関数名とlibcなどで利用されている関数名が
衝突してしまうからである．
通常のLKLでは，ELFの仕様を利用しうまくLinux kernelの関数を隠匿化することにより
この衝突を回避している．一方で，Emscriptenでは名前空間などが存在しないために，
このような衝突が発生してしまう．
そこで，あらかじめリンクされる予定のLLVM bitcodeをLLVM IRに変換し，
衝突するであろう関数名を&lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt;で書き換えることにより衝突を回避している．&lt;/p&gt;

&lt;p&gt;また，&lt;code class=&quot;highlighter-rouge&quot;&gt;rename_symbols.py&lt;/code&gt;では，
Linux kernelに含まれる，inline asmをEmscriptenの&lt;code class=&quot;highlighter-rouge&quot;&gt;emscripten_asm_const_int&lt;/code&gt;
に変換するなどの操作も行なっている．&lt;/p&gt;

&lt;p&gt;以上によって得られた&lt;code class=&quot;highlighter-rouge&quot;&gt;boot-mod.ll&lt;/code&gt;より&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;EMCC_DEBUG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;$CC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; js/boot.html &lt;span class=&quot;nv&quot;&gt;$LKL&lt;/span&gt;/tests/boot-mod.ll &lt;span class=&quot;nv&quot;&gt;$CFLAGS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;によりHTMLとJSを得る．&lt;/p&gt;

&lt;h2 id=&quot;動かすための修正&quot;&gt;動かすための修正&lt;/h2&gt;

&lt;p&gt;以上により得られた「完全に」JavaScriptで書かれたLinux kernelとそれを利用した
アプリケーションboot.jsであるが，このままでは動作しない．
これは，通常のマシンとJavaScriptとではそもそものアーキテクチャが
大きく異なっていることに由来する．それでもいくつかの修正を加える．&lt;/p&gt;

&lt;h3 id=&quot;inline-assemblyの置換&quot;&gt;inline assemblyの置換&lt;/h3&gt;

&lt;p&gt;Linux kernelでは基本的に&lt;code class=&quot;highlighter-rouge&quot;&gt;arch&lt;/code&gt;以下にアーキテクチャ依存のコードをおき，
それ以外ではアーキテクチャ非依存のコードとなるように配置されている．
しかし，一部のコードでは，コンパイラによる最適化により意味のあるコードが
コンパイル時に失われないように空のinline assemblyが挿入されている場合がある．
以下はその一例，&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/time/time.c&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;set_normalized_timespec64&lt;/code&gt;である．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_normalized_timespec64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/*
		 * The following asm() prevents the compiler from
		 * optimising this loop into a modulo operation. See
		 * also __iter_div_u64_rem() in include/linux/time.h
		 */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv_nsec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このようなinline assemblyはLLVM bitcodeからJavaScriptへの変換に失敗する要因となる．
このため，&lt;code class=&quot;highlighter-rouge&quot;&gt;asm(&quot;&quot; : &quot;+rm&quot;(nsec));&lt;/code&gt;をEmscriptenで定義されている
CからJSのコードを呼ぶinline assembly&lt;code class=&quot;highlighter-rouge&quot;&gt;emscripten_asm_const_int&lt;/code&gt;に置き換えることで対応する．&lt;/p&gt;

&lt;h3 id=&quot;early_paramの修正&quot;&gt;early_paramの修正&lt;/h3&gt;

&lt;p&gt;Linux kernelでは，&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;というものが存在する．
これは，&lt;code class=&quot;highlighter-rouge&quot;&gt;include/linux/init.h&lt;/code&gt;に以下のように定義される．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obs_kernel_param&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define __setup_param(str, unique_id, fn, early)			\
	static const char __setup_str_##unique_id[] __initconst		\
		__aligned(1) = str; 					\
	static struct obs_kernel_param __setup_##unique_id		\
		__used __section(.init.setup)				\
		__attribute__((aligned((sizeof(long)))))		\
		= { __setup_str_##unique_id, fn, early }
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define early_param(str, fn)						\
	__setup_param(str, fn, fn, 1)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;つまり，&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;はマクロであり，&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt;を引数にとり，
&lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt;セクションに置かれる&lt;code class=&quot;highlighter-rouge&quot;&gt;obs_kernel_param&lt;/code&gt;構造体であることがわかる．&lt;/p&gt;

&lt;p&gt;通常のLKLのビルドで生成される&lt;code class=&quot;highlighter-rouge&quot;&gt;arch/lkl/kernel/vmlinux.lds&lt;/code&gt;を参照すると
以下のようであることから，&lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;__setup_start&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;__setup_end&lt;/code&gt;で
挟まれたように配置されることがわかる．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__setup_start = .; KEEP(*(.init.setup)) __setup_end = .;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これらのシンボルは&lt;code class=&quot;highlighter-rouge&quot;&gt;init/main.c&lt;/code&gt;において次のように使われる．
ここでは，Linux kernelのboot parameter(&lt;code class=&quot;highlighter-rouge&quot;&gt;param&lt;/code&gt;)の1つについて，
&lt;code class=&quot;highlighter-rouge&quot;&gt;.init.setup&lt;/code&gt;にある&lt;code class=&quot;highlighter-rouge&quot;&gt;obs_kernel_param&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;と比較を行い，
一致した場合に設定してある&lt;code class=&quot;highlighter-rouge&quot;&gt;(*setup_func)(char*)&lt;/code&gt;を
&lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;を引数として実行している．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Check for early params. */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_early_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				 &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obs_kernel_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__setup_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__setup_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
		    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		     &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;earlycon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* We accept everything at this stage. */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;まとめると，&lt;code class=&quot;highlighter-rouge&quot;&gt;do_early_param&lt;/code&gt;では&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;によって登録されている
&lt;code class=&quot;highlighter-rouge&quot;&gt;setup_func&lt;/code&gt;をboot parameterにより実行する，という形になっている．&lt;/p&gt;

&lt;p&gt;ただ，これはELFのシンボルを利用しているために，JavaScriptでは正しく実行されない．
このため，ここで呼ばれるであろう関数について，以下のようにハードコードする．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_early_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				 &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* XXX: There is a lot of early_param, but hardcode in init/main.c */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_INIT_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;quiet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;loglevel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;early_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;earlycon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* debug */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* quiet */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quiet_kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* loglevel */&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loglevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Malformed early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;pr_warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unknown early option '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* We accept everything at this stage. */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;initcallの修正&quot;&gt;initcallの修正&lt;/h3&gt;

&lt;p&gt;先の&lt;code class=&quot;highlighter-rouge&quot;&gt;early_param&lt;/code&gt;同様，初期化で呼ばれる&lt;code class=&quot;highlighter-rouge&quot;&gt;initcall&lt;/code&gt;も
ELFのシンボルを用いて呼ばれる関数を管理している．
JavaScript単体では，どの関数が呼ばれるべきかはわからない．
そのため，通常のLKLのビルドで生成される&lt;code class=&quot;highlighter-rouge&quot;&gt;System.map&lt;/code&gt;
を用いて関数をあらかじめ取得し，そこから関数呼び出しを行う．&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/* initcall{} */&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EM_ASM({&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blacklist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    /* _&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(); */&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    _&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initcall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;();&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;});&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これによって得られるコードを&lt;code class=&quot;highlighter-rouge&quot;&gt;do_initcalls&lt;/code&gt;にハードコードする．
&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_ASM&lt;/code&gt;はCにJSのコード直接記述するinline assemblyである．&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_initcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* XXX: initcalls are broken, so hardcode here */&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* initcall0 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EM_ASM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_net_ns_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* initcall1 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EM_ASM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_lkl_console_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_wq_sysfs_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_ksysfs_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;デモと結果&quot;&gt;デモと結果&lt;/h2&gt;

&lt;p&gt;冒頭で紹介したように，lkl.jsではpthreadを利用しているため，
SharedArrayBufferを有効にする必要がある．
現在のブラウザではSharedArrayBufferが実装されているものの，
Spectreのmitiagtionのため，デフォルトでは無効になっている．
そのためこれを有効にした上で実行してみてほしい．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;start_kernel&lt;/code&gt;の実行結果を以下に示す．&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [    0.000000] Linux version 4.16.0+ (akira@akira-Z270) () #13 Tue Jul 17 23:01:19 JST 2018
  [    0.000000] bootmem address range: 0x675000 - 0x1674000
  [    0.000000] On node 0 totalpages: 4095
  [    0.000000]   Normal zone: 36 pages used for memmap
  [    0.000000]   Normal zone: 0 pages reserved
  [    0.000000]   Normal zone: 4095 pages, LIFO batch:0
  [    0.000000] pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768
  [    0.000000] pcpu-alloc: [0] 0 
  [    0.000000] Built 1 zonelists, mobility grouping off.  Total pages: 4059
  [    0.000000] Kernel command line: mem=16M loglevel=8
  [    0.000000] Parameter  is obsolete, ignored
  [    0.000000] Parameter  is obsolete, ignored
  [    0.000000] Dentry cache hash table entries: 2048 (order: 1, 8192 bytes)
  [    0.000000] Inode-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.000000] Memory available: 16144k/16380k RAM
  [    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
  [    0.000000] NR_IRQS: 1024
  [    0.000000] lkl: irqs initialized
  [    0.000000] clocksource: lkl: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns
  [    0.000100] lkl: time and timers initialized (irq1)
  [    0.001100] pid_max: default: 4096 minimum: 301
  [    0.009400] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.009900] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.327100] console [lkl_console0] enabled
  [    0.329600] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
  [    0.329700] xor: automatically using best checksumming function   8regs     
  [    0.341199] NET: Registered protocol family 16
  [    0.388999] clocksource: Switched to clocksource lkl
  [    0.414100] NET: Registered protocol family 2
  [    0.437700] tcp_listen_portaddr_hash hash table entries: 512 (order: 0, 4096 bytes)
  [    0.438199] TCP established hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.439000] TCP bind hash table entries: 1024 (order: 0, 4096 bytes)
  [    0.439600] TCP: Hash tables configured (established 1024 bind 1024)
  [    0.443200] UDP hash table entries: 256 (order: 0, 4096 bytes)
  [    0.444000] UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
  [    0.472100] workingset: timestamp_bits=30 max_order=12 bucket_order=0
  [    0.863100] SGI XFS with ACLs, security attributes, no debug enabled
  [    0.923700] jitterentropy: Initialization failed with host not compliant with requirements: 2
  [    0.924599] io scheduler noop registered
  [    0.924900] io scheduler deadline registered
  [    0.933099] io scheduler cfq registered (default)
  [    0.933500] io scheduler kyber registered
  [    1.633500] NET: Registered protocol family 10
  [    1.658400] Segment Routing with IPv6
  [    1.660800] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
  [    1.674200] ------------[ cut here ]------------
  [    1.675500] WARNING: CPU: 0 PID: 0 at arch/lkl/kernel/setup.c:188   (null)
  [    1.675899] Call Trace:
  [    1.676200] 
  [    1.676999] ---[ end trace 941dc55fe0966cff ]---
  [    1.684299] Warning: unable to open an initial console.
  [    1.685200] This architecture does not have kernel memory protection.
  pthread_join((pthread_t)tid, NULL): No such process
  lkl_start_kernel(&amp;amp;lkl_host_ops, &quot;mem=16M loglevel=8&quot;) = 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;現在の問題点&quot;&gt;現在の問題点&lt;/h2&gt;

&lt;p&gt;以上より，JavaScript上で直接Linux kerenlが起動したことが確認できた．
しかし，現状ではdmesgが出力されるだけで全く実用には適さない．
これには次のような問題点が存在するためである．&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;kthreadの生成に失敗する&lt;/li&gt;
  &lt;li&gt;rootfsのマウントに失敗する&lt;/li&gt;
  &lt;li&gt;init&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;また，Emscriptenでのpthreadのサポートがあまりよくない．
Little Kernel(LK)からsemaphore, mutex, threadの機能を抜き出し，
これらをgreen threadとして扱うLKLを作成した．&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/retrage/linux/tree/retrage/fiber&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを用いたLKL.jsを作成することを予定している．&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;JavaScriptで書かれたLinux kernelをLKLからEmscriptenにより生成し，
これが起動し，dmesgが出力されることを確認した．
通常のマシンとJavaScriptではアーキテクチャが大きく異なるが，
いくつかの修正とworkaroundを加えることにより，
多少なりとも動作することがわかった．&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/lkl/linux&lt;/li&gt;
  &lt;li&gt;https://github.com/kripken/emscripten&lt;/li&gt;
  &lt;li&gt;https://llvm.org/&lt;/li&gt;
  &lt;li&gt;https://clang.llvm.org/&lt;/li&gt;
  &lt;li&gt;https://wiki.linuxfoundation.org/llvmlinux&lt;/li&gt;
  &lt;li&gt;https://lwn.net/Articles/734071/&lt;/li&gt;
  &lt;li&gt;http://llvm.org/docs/CommandGuide/llvm-link.html&lt;/li&gt;
  &lt;li&gt;https://0xax.gitbooks.io/linux-insides/Concepts/linux-cpu-3.html&lt;/li&gt;
  &lt;li&gt;https://github.com/littlekernel/lk&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Linux kernelを直接JavaScript上で動かした． つまり，JSLinuxのようにEmulatorをJavaScriptで作成し， その上でLinuxを動かすのではなく， JavaScriptで書かれたLinuxを生成し，それを動かす，ということである．</summary></entry></feed>